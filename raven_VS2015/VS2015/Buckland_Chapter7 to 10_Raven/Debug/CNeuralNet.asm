; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

	TITLE	C:\Users\ntrembla71\Desktop\Devoir3AI2019\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\CNeuralNet.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z	; std::_Container_base12::_Swap_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?RandFloat@@YANXZ				; RandFloat
PUBLIC	?RandomClamped@@YANXZ				; RandomClamped
PUBLIC	??0?$allocator@N@std@@QAE@XZ			; std::allocator<double>::allocator<double>
PUBLIC	?deallocate@?$allocator@N@std@@QAEXQANI@Z	; std::allocator<double>::deallocate
PUBLIC	?allocate@?$allocator@N@std@@QAEPANI@Z		; std::allocator<double>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z ; std::_Default_allocator_traits<std::allocator<double> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SA?AV?$allocator@N@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<double> >::select_on_container_copy_construction
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::~_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >
PUBLIC	?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXABV?$allocator@N@2@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Copy_alloc
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Swap_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second
PUBLIC	??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
PUBLIC	??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
PUBLIC	?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Move_from
PUBLIC	??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
PUBLIC	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
PUBLIC	?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEXABN@Z ; std::vector<double,std::allocator<double> >::push_back
PUBLIC	?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::push_back
PUBLIC	??4?$vector@NV?$allocator@N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<double,std::allocator<double> >::operator=
PUBLIC	?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ ; std::vector<double,std::allocator<double> >::clear
PUBLIC	?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::begin
PUBLIC	?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::end
PUBLIC	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
PUBLIC	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
PUBLIC	?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@NV?$allocator@N@std@@@std@@ABE_NXZ ; std::vector<double,std::allocator<double> >::_Has_unused_capacity
PUBLIC	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
PUBLIC	?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ; std::vector<double,std::allocator<double> >::_Calculate_growth
PUBLIC	?_Buy@?$vector@NV?$allocator@N@std@@@std@@AAE_NI@Z ; std::vector<double,std::allocator<double> >::_Buy
PUBLIC	?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ; std::vector<double,std::allocator<double> >::_Change_array
PUBLIC	?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy
PUBLIC	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Orphan_range
PUBLIC	??_G?$vector@NV?$allocator@N@std@@@std@@QAEPAXI@Z ; std::vector<double,std::allocator<double> >::`scalar deleting destructor'
PUBLIC	?deallocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEXQAV?$vector@NV?$allocator@N@std@@@2@I@Z ; std::allocator<std::vector<double,std::allocator<double> > >::deallocate
PUBLIC	?allocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@I@Z ; std::allocator<std::vector<double,std::allocator<double> > >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SA?AV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::select_on_container_copy_construction
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::~_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Free_proxy
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second
PUBLIC	??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::size
PUBLIC	?max_size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::max_size
PUBLIC	?capacity@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::capacity
PUBLIC	??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
PUBLIC	?_Destroy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXPAV?$vector@NV?$allocator@N@std@@@2@0@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Destroy
PUBLIC	?_Buy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAE_NI@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Buy
PUBLIC	?_Tidy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Xlength
PUBLIC	?GetInputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ ; CData::GetInputSet
PUBLIC	?GetOutputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ ; CData::GetOutputSet
PUBLIC	??0SNeuron@@QAE@H@Z				; SNeuron::SNeuron
PUBLIC	??1SNeuron@@QAE@XZ				; SNeuron::~SNeuron
PUBLIC	??0SNeuron@@QAE@$$QAU0@@Z			; SNeuron::SNeuron
PUBLIC	??_GSNeuron@@QAEPAXI@Z				; SNeuron::`scalar deleting destructor'
PUBLIC	??0?$allocator@USNeuron@@@std@@QAE@XZ		; std::allocator<SNeuron>::allocator<SNeuron>
PUBLIC	?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z ; std::allocator<SNeuron>::deallocate
PUBLIC	?allocate@?$allocator@USNeuron@@@std@@QAEPAUSNeuron@@I@Z ; std::allocator<SNeuron>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAIABV?$allocator@USNeuron@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::~_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Swap_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SNeuron> >::_Vector_val<std::_Simple_types<SNeuron> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuron@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second
PUBLIC	??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >
PUBLIC	?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Move_from
PUBLIC	??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >
PUBLIC	??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::~vector<SNeuron,std::allocator<SNeuron> >
PUBLIC	?push_back@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::push_back
PUBLIC	?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::begin
PUBLIC	?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::end
PUBLIC	?size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::size
PUBLIC	?max_size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::max_size
PUBLIC	?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABE_NXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::_Has_unused_capacity
PUBLIC	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
PUBLIC	?_Umove@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEPAUSNeuron@@PAU3@00@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00U?$integral_constant@_N$00@2@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEII@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXQAUSNeuron@@II@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Change_array
PUBLIC	?_Tidy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::_Tidy
PUBLIC	?_Xlength@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@CAXXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Orphan_range
PUBLIC	??0SNeuronLayer@@QAE@HH@Z			; SNeuronLayer::SNeuronLayer
PUBLIC	??1SNeuronLayer@@QAE@XZ				; SNeuronLayer::~SNeuronLayer
PUBLIC	??0SNeuronLayer@@QAE@$$QAU0@@Z			; SNeuronLayer::SNeuronLayer
PUBLIC	??_GSNeuronLayer@@QAEPAXI@Z			; SNeuronLayer::`scalar deleting destructor'
PUBLIC	??0?$allocator@USNeuronLayer@@@std@@QAE@XZ	; std::allocator<SNeuronLayer>::allocator<SNeuronLayer>
PUBLIC	?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z ; std::allocator<SNeuronLayer>::deallocate
PUBLIC	?allocate@?$allocator@USNeuronLayer@@@std@@QAEPAUSNeuronLayer@@I@Z ; std::allocator<SNeuronLayer>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAIABV?$allocator@USNeuronLayer@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::~_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SNeuronLayer> >::_Vector_val<std::_Simple_types<SNeuronLayer> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second
PUBLIC	??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::vector<SNeuronLayer,std::allocator<SNeuronLayer> >
PUBLIC	??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::~vector<SNeuronLayer,std::allocator<SNeuronLayer> >
PUBLIC	?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back
PUBLIC	?size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::size
PUBLIC	?max_size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::max_size
PUBLIC	?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABE_NXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Has_unused_capacity
PUBLIC	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
PUBLIC	?_Umove@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEPAUSNeuronLayer@@PAU3@00@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00U?$integral_constant@_N$00@2@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEII@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXQAUSNeuronLayer@@II@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Change_array
PUBLIC	?_Tidy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Tidy
PUBLIC	?_Xlength@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@CAXXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Orphan_range
PUBLIC	?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z ; CNeuralNet::NetworkTrainingEpoch
PUBLIC	?CreateNet@CNeuralNet@@AAEXXZ			; CNeuralNet::CreateNet
PUBLIC	?InitializeNetwork@CNeuralNet@@AAEXXZ		; CNeuralNet::InitializeNetwork
PUBLIC	?Sigmoid@CNeuralNet@@AAENNN@Z			; CNeuralNet::Sigmoid
PUBLIC	??0CNeuralNet@@QAE@HHHN@Z			; CNeuralNet::CNeuralNet
PUBLIC	?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z ; CNeuralNet::Update
PUBLIC	?Train@CNeuralNet@@QAE_NPAVCData@@@Z		; CNeuralNet::Train
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++
PUBLIC	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Verify_offset
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=
PUBLIC	??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-=
PUBLIC	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator=
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPBUSNeuron@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Compat
PUBLIC	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++
PUBLIC	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator=
PUBLIC	??$move@AAUSNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::move<SNeuronLayer &>
PUBLIC	??$emplace_back@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::emplace_back<SNeuronLayer>
PUBLIC	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
PUBLIC	??$_Emplace_back_with_unused_capacity@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAE@$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_back_with_unused_capacity<SNeuronLayer>
PUBLIC	??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z ; std::_Unfancy<SNeuronLayer>
PUBLIC	??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::construct<SNeuronLayer,SNeuronLayer>
PUBLIC	??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_reallocate<SNeuronLayer>
PUBLIC	??$_Const_cast@$$CBUSNeuron@@@std@@YA@PBUSNeuron@@@Z ; std::_Const_cast<SNeuron const >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuron> > >
PUBLIC	??$move@AAUSNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::move<SNeuron &>
PUBLIC	??$emplace_back@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAUSNeuron@@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::emplace_back<SNeuron>
PUBLIC	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
PUBLIC	??$_Emplace_back_with_unused_capacity@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAE@$$QAUSNeuron@@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_back_with_unused_capacity<SNeuron>
PUBLIC	??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z ; std::_Unfancy<SNeuron>
PUBLIC	??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::construct<SNeuron,SNeuron>
PUBLIC	??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_reallocate<SNeuron>
PUBLIC	??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > ><std::allocator<std::vector<double,std::allocator<double> > >,void>
PUBLIC	??$_Ucopy@PAV?$vector@NV?$allocator@N@std@@@std@@@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEPAV?$vector@NV?$allocator@N@std@@@1@PAV21@00@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Ucopy<std::vector<double,std::allocator<double> > *>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
PUBLIC	??$addressof@$$CBV?$vector@NV?$allocator@N@std@@@std@@@std@@YAPBV?$vector@NV?$allocator@N@std@@@0@ABV10@@Z ; std::addressof<std::vector<double,std::allocator<double> > const >
PUBLIC	??$assign@PANX@?$vector@NV?$allocator@N@std@@@std@@QAEXPAN0@Z ; std::vector<double,std::allocator<double> >::assign<double *,void>
PUBLIC	??$move@AAN@std@@YA$$QANAAN@Z			; std::move<double &>
PUBLIC	??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAN@Z ; std::vector<double,std::allocator<double> >::emplace_back<double>
PUBLIC	??$forward@N@std@@YA$$QANAAN@Z			; std::forward<double>
PUBLIC	??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAE@$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>
PUBLIC	??$_Unfancy@N@std@@YAPANPAN@Z			; std::_Unfancy<double>
PUBLIC	??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
PUBLIC	??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>
PUBLIC	??$emplace_back@ABN@?$vector@NV?$allocator@N@std@@@std@@QAE@ABN@Z ; std::vector<double,std::allocator<double> >::emplace_back<double const &>
PUBLIC	??$forward@ABN@std@@YAABNABN@Z			; std::forward<double const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABN@?$vector@NV?$allocator@N@std@@@std@@AAE@ABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double const &>
PUBLIC	??$construct@NABN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QANABN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double const &>
PUBLIC	??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
PUBLIC	??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::move<std::allocator<double> &>
PUBLIC	??$?0V?$allocator@N@std@@X@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@$$QAV?$allocator@N@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > ><std::allocator<double>,void>
PUBLIC	??$move@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YA$$QAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ; std::move<std::vector<double,std::allocator<double> > &>
PUBLIC	??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Ucopy<double *>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><>
PUBLIC	??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@@Z ; std::_Pocca<std::allocator<double> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0USNeuronLayer@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuronLayer@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuronLayer>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuronLayer> > >
PUBLIC	??$_Destroy_range@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@@Z ; std::_Destroy_range<std::allocator<SNeuronLayer> >
PUBLIC	??$?0USNeuron@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuron@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuron>
PUBLIC	??$_Destroy_range@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@@Z ; std::_Destroy_range<std::allocator<SNeuron> >
PUBLIC	??$?0V?$vector@NV?$allocator@N@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<double,std::allocator<double> > >
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YAII@Z		; std::_Get_size_of_n<16>
PUBLIC	??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$forward@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YA$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1><std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??$_Uninitialized_copy@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??$_Adl_verify_range@PANPAN@std@@YAXABQAN0@Z	; std::_Adl_verify_range<double *,double *>
PUBLIC	??$_Get_unwrapped@N@std@@YAPANQAN@Z		; std::_Get_unwrapped<double>
PUBLIC	??$_Assign_range@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0Uforward_iterator_tag@1@@Z ; std::vector<double,std::allocator<double> >::_Assign_range<double *>
PUBLIC	??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::forward<std::allocator<double> >
PUBLIC	??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >
PUBLIC	??$_Uninitialized_copy@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_copy<double *,double *,std::allocator<double> >
PUBLIC	??$_Unfancy@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@@Z ; std::_Unfancy<std::vector<double,std::allocator<double> > >
PUBLIC	??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::allocator<double> >
PUBLIC	??$_Destroy_range1@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<double> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Destroy_range1@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<SNeuronLayer> >
PUBLIC	??$_Destroy_range1@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<SNeuron> >
PUBLIC	??$_Destroy_range1@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??$_Uninitialized_move@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@QAU1@0PAU1@AAV?$allocator@USNeuronLayer@@@0@@Z ; std::_Uninitialized_move<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
PUBLIC	??$_Get_size_of_n@$0BE@@std@@YAII@Z		; std::_Get_size_of_n<20>
PUBLIC	??$_Uninitialized_move@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@QAU1@0PAU1@AAV?$allocator@USNeuron@@@0@@Z ; std::_Uninitialized_move<SNeuron *,SNeuron *,std::allocator<SNeuron> >
PUBLIC	??$move@AAV?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ; std::move<std::allocator<SNeuron> &>
PUBLIC	??$?0V?$allocator@USNeuron@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USNeuron@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > ><std::allocator<SNeuron>,void>
PUBLIC	??$move@AAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@YA$$QAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@0@AAV10@@Z ; std::move<std::vector<SNeuron,std::allocator<SNeuron> > &>
PUBLIC	??$_Get_size_of_n@$0CI@@std@@YAII@Z		; std::_Get_size_of_n<40>
PUBLIC	??$_Uninitialized_move@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,double *,std::allocator<double> >
PUBLIC	??$_Get_unwrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ; std::_Get_unwrapped<std::vector<double,std::allocator<double> > >
PUBLIC	??$_Idl_distance@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YA@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z ; std::_Idl_distance<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>
PUBLIC	??$_Idl_distance1@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YAHABQAV?$vector@NV?$allocator@N@std@@@0@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>
PUBLIC	??$_Get_unwrapped_n@V?$vector@NV?$allocator@N@std@@@std@@H$0A@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@H@Z ; std::_Get_unwrapped_n<std::vector<double,std::allocator<double> >,int,0>
PUBLIC	??$_Ptr_copy_cat@V?$vector@NV?$allocator@N@std@@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z ; std::_Ptr_copy_cat<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > >
PUBLIC	??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_copy_al_unchecked<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
PUBLIC	??$_Seek_wrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAXAAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ; std::_Seek_wrapped<std::vector<double,std::allocator<double> > >
PUBLIC	??$_Verify_range@N@std@@YAXQBN0@Z		; std::_Verify_range<double>
PUBLIC	??$_Adl_verify_range1@PANPAN@std@@YAXABQAN0U?$integral_constant@_N$00@0@@Z ; std::_Adl_verify_range1<double *,double *>
PUBLIC	??$distance@PAN@std@@YAHPAN0@Z			; std::distance<double *>
PUBLIC	??$next@PAN@std@@YAPANPANH@Z			; std::next<double *>
PUBLIC	??$_Copy_unchecked@PANPAN@std@@YAPANPAN00@Z	; std::_Copy_unchecked<double *,double *>
PUBLIC	??$_Idl_distance@PANPAN@std@@YA@ABQAN0@Z	; std::_Idl_distance<double *,double *>
PUBLIC	??$_Idl_distance1@PANPAN@std@@YAHABQAN0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<double *,double *>
PUBLIC	??$_Get_unwrapped_n@NH$0A@@std@@YAPANQANH@Z	; std::_Get_unwrapped_n<double,int,0>
PUBLIC	??$_Ptr_copy_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ; std::_Ptr_copy_cat<double,double>
PUBLIC	??$_Uninitialized_copy_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<double,double,std::allocator<double> >
PUBLIC	??$_Seek_wrapped@N@std@@YAXAAPANQAN@Z		; std::_Seek_wrapped<double>
PUBLIC	??0?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@PAV?$vector@NV?$allocator@N@std@@@1@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::~_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Release
PUBLIC	??$destroy@USNeuronLayer@@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::destroy<SNeuronLayer>
PUBLIC	??$destroy@USNeuron@@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::destroy<SNeuron>
PUBLIC	??$destroy@V?$vector@NV?$allocator@N@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::destroy<std::vector<double,std::allocator<double> > >
PUBLIC	??$_Get_unwrapped@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@QAU1@@Z ; std::_Get_unwrapped<SNeuronLayer>
PUBLIC	??$_Idl_distance@PAUSNeuronLayer@@PAU1@@std@@YA@ABQAUSNeuronLayer@@0@Z ; std::_Idl_distance<SNeuronLayer *,SNeuronLayer *>
PUBLIC	??$_Idl_distance1@PAUSNeuronLayer@@PAU1@@std@@YAHABQAUSNeuronLayer@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<SNeuronLayer *,SNeuronLayer *>
PUBLIC	??$_Get_unwrapped_n@USNeuronLayer@@H$0A@@std@@YAPAUSNeuronLayer@@QAU1@H@Z ; std::_Get_unwrapped_n<SNeuronLayer,int,0>
PUBLIC	??$_Ptr_move_cat@USNeuronLayer@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuronLayer@@0@Z ; std::_Ptr_move_cat<SNeuronLayer,SNeuronLayer>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
PUBLIC	??$_Seek_wrapped@USNeuronLayer@@@std@@YAXAAPAUSNeuronLayer@@QAU1@@Z ; std::_Seek_wrapped<SNeuronLayer>
PUBLIC	??$_Get_unwrapped@USNeuron@@@std@@YAPAUSNeuron@@QAU1@@Z ; std::_Get_unwrapped<SNeuron>
PUBLIC	??$_Idl_distance@PAUSNeuron@@PAU1@@std@@YA@ABQAUSNeuron@@0@Z ; std::_Idl_distance<SNeuron *,SNeuron *>
PUBLIC	??$_Idl_distance1@PAUSNeuron@@PAU1@@std@@YAHABQAUSNeuron@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<SNeuron *,SNeuron *>
PUBLIC	??$_Get_unwrapped_n@USNeuron@@H$0A@@std@@YAPAUSNeuron@@QAU1@H@Z ; std::_Get_unwrapped_n<SNeuron,int,0>
PUBLIC	??$_Ptr_move_cat@USNeuron@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuron@@0@Z ; std::_Ptr_move_cat<SNeuron,SNeuron>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<SNeuron *,SNeuron *,std::allocator<SNeuron> >
PUBLIC	??$_Seek_wrapped@USNeuron@@@std@@YAXAAPAUSNeuron@@QAU1@@Z ; std::_Seek_wrapped<SNeuron>
PUBLIC	??$forward@V?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ; std::forward<std::allocator<SNeuron> >
PUBLIC	??$?0V?$allocator@USNeuron@@@std@@$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USNeuron@@@1@@Z ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><std::allocator<SNeuron> >
PUBLIC	??$_Ptr_move_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ; std::_Ptr_move_cat<double,double>
PUBLIC	??$_Uninitialized_move_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<double,double,std::allocator<double> >
PUBLIC	??$_Emplace_back@AAV?$vector@NV?$allocator@N@std@@@std@@@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEXAAV?$vector@NV?$allocator@N@std@@@1@@Z ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Emplace_back<std::vector<double,std::allocator<double> > &>
PUBLIC	??$_Distance1@PAN@std@@YAHPAN0Urandom_access_iterator_tag@0@@Z ; std::_Distance1<double *>
PUBLIC	??$advance@PANH@std@@YAXAAPANH@Z		; std::advance<double *,int>
PUBLIC	??$_Copy_unchecked1@PANPAN@std@@YAPANPAN00U_Trivially_copyable_ptr_iterator_tag@0@@Z ; std::_Copy_unchecked1<double *,double *>
PUBLIC	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z	; std::_Copy_memmove<double *,double *>
PUBLIC	??0?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@PAUSNeuronLayer@@AAV?$allocator@USNeuronLayer@@@1@@Z ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
PUBLIC	??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::~_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@XZ ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Release
PUBLIC	??$_Emplace_back@USNeuronLayer@@@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Emplace_back<SNeuronLayer>
PUBLIC	??0?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@PAUSNeuron@@AAV?$allocator@USNeuron@@@1@@Z ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
PUBLIC	??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::~_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@XZ ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Release
PUBLIC	??$_Emplace_back@USNeuron@@@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Emplace_back<SNeuron>
PUBLIC	??$forward@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YAAAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ; std::forward<std::vector<double,std::allocator<double> > &>
PUBLIC	??$construct@V?$vector@NV?$allocator@N@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@AAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::construct<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > &>
PUBLIC	??$_Advance1@PANH@std@@YAXAAPANHUrandom_access_iterator_tag@0@@Z ; std::_Advance1<double *,int>
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_0GM@FAFCIENC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NI@CLIPCEJM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0GM@EMOPLGHB@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NI@NGGEPBDP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1LC@INEBDOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1JO@EPEOPKAD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1BEE@BOINOPIE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1HO@GLEAPAMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAd?$AAo?$AAu@ ; `string'
PUBLIC	??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ ; `string'
PUBLIC	??_C@_1NM@FPJHPHPF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ ; `string'
PUBLIC	??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ ; `string'
PUBLIC	??_C@_1NM@OOAJLDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ ; `string'
PUBLIC	??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_1MM@GONDLIIM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1NE@BHMMJPHD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_1ME@OFGOCAMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_0CO@LHPFLLJB@cannot?5seek?5value?9initialized?5v@ ; `string'
PUBLIC	??_C@_1NC@HMKFOKIL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1GA@EIHBFEJD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@ ; `string'
PUBLIC	??_C@_0CJ@DIFMEJBE@cannot?5seek?5vector?5iterator?5bef@ ; `string'
PUBLIC	??_C@_1FG@JCGKNFIB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_0CG@JDIOCKHH@cannot?5seek?5vector?5iterator?5aft@ ; `string'
PUBLIC	??_C@_1FA@LCODAPOP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@ ; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3f689374bc6a7efa
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40c3878000000000
PUBLIC	__real@40e0000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_rand:PROC
EXTRN	_exp:PROC
EXTRN	_memmove:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?MaxInt@@3HB DD	01H DUP (?)				; MaxInt
	ALIGN	8

?MaxDouble@@3NB DQ 01H DUP (?)				; MaxDouble
?MinDouble@@3NB DQ 01H DUP (?)				; MinDouble
?MaxFloat@@3MB DD 01H DUP (?)				; MaxFloat
?MinFloat@@3MB DD 01H DUP (?)				; MinFloat
_BSS	ENDS
CRT$XCU	SEGMENT
?MaxInt$initializer$@@3P6AXXZA DD FLAT:??__EMaxInt@@YAXXZ ; MaxInt$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@40e0000000000000
CONST	SEGMENT
__real@40e0000000000000 DQ 040e0000000000000r	; 32768
CONST	ENDS
;	COMDAT __real@40c3878000000000
CONST	SEGMENT
__real@40c3878000000000 DQ 040c3878000000000r	; 9999
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f689374bc6a7efa
CONST	SEGMENT
__real@3f689374bc6a7efa DQ 03f689374bc6a7efar	; 0.003
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@LCODAPOP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@
CONST	SEGMENT
??_C@_1FA@LCODAPOP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'a', 00H, 'f', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JDIOCKHH@cannot?5seek?5vector?5iterator?5aft@
CONST	SEGMENT
??_C@_0CG@JDIOCKHH@cannot?5seek?5vector?5iterator?5aft@ DB 'cannot seek v'
	DB	'ector iterator after end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@JCGKNFIB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@
CONST	SEGMENT
??_C@_1FG@JCGKNFIB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'n', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@DIFMEJBE@cannot?5seek?5vector?5iterator?5bef@
CONST	SEGMENT
??_C@_0CJ@DIFMEJBE@cannot?5seek?5vector?5iterator?5bef@ DB 'cannot seek v'
	DB	'ector iterator before begin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@EIHBFEJD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
CONST	SEGMENT
??_C@_1GA@EIHBFEJD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H
	DB	'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@HMKFOKIL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NC@HMKFOKIL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'd', 00H, 'o'
	DB	00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H
	DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LHPFLLJB@cannot?5seek?5value?9initialized?5v@
CONST	SEGMENT
??_C@_0CO@LHPFLLJB@cannot?5seek?5value?9initialized?5v@ DB 'cannot seek v'
	DB	'alue-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@OFGOCAMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1ME@OFGOCAMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'd', 00H, 'o'
	DB	00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
CONST	SEGMENT
??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@BHMMJPHD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NE@BHMMJPHD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'N', 00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@ DB 'vector iterators '
	DB	'incompatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'd', 00H, 'o'
	DB	00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '*', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@GONDLIIM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1MM@GONDLIIM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 'd', 00H, 'o'
	DB	00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '+', 00H, '+', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
CONST	SEGMENT
??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@ DB 'can''t dere'
	DB	'ference out of range vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NM@OOAJLDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NM@OOAJLDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'N', 00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '-', 00H, '>', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
CONST	SEGMENT
??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@ DB 'can''t derefe'
	DB	'rence value-initialized vector iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
CONST	SEGMENT
??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@ DB 'can''t increm'
	DB	'ent vector iterator past end', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, '''', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NM@FPJHPHPF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
CONST	SEGMENT
??_C@_1NM@FPJHPHPF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'S', 00H, 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'N', 00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
CONST	SEGMENT
??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@ DB 'can''t increm'
	DB	'ent value-initialized vector iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@GLEAPAMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAd?$AAo?$AAu@
CONST	SEGMENT
??_C@_1HO@GLEAPAMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAd?$AAo?$AAu@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'd', 00H, 'o'
	DB	00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 'd', 00H, 'o', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BEE@BOINOPIE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1BEE@BOINOPIE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'd', 00H, 'o', 00H, 'u', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'd', 00H
	DB	'o', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'd', 00H, 'o', 00H, 'u', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H
	DB	':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@EPEOPKAD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1JO@EPEOPKAD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'N', 00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 'S', 00H, 'N', 00H, 'e', 00H, 'u', 00H
	DB	'r', 00H, 'o', 00H, 'n', 00H, '>', 00H, ' ', 00H, '>', 00H, ':'
	DB	00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LC@INEBDOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1LC@INEBDOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'S', 00H
	DB	'N', 00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 'L'
	DB	00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, ',', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H
	DB	' ', 00H, 'S', 00H, 'N', 00H, 'e', 00H, 'u', 00H, 'r', 00H, 'o'
	DB	00H, 'n', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, '[', 00H, ']', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'p'
	DB	00H, 'r', 00H, 'o', 00H, 'f', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, '\', 00H, 'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '1', 00H, '6', 00H, '.', 00H
	DB	'2', 00H, '7', 00H, '0', 00H, '2', 00H, '3', 00H, '\', 00H, 'i'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\professional\vc'
	DB	'\tools\msvc\14.16.27023\include\vector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NI@NGGEPBDP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NI@NGGEPBDP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'p'
	DB	00H, 'r', 00H, 'o', 00H, 'f', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, '\', 00H, 'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '1', 00H, '6', 00H, '.', 00H
	DB	'2', 00H, '7', 00H, '0', 00H, '2', 00H, '3', 00H, '\', 00H, 'i'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'x', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r'
	DB	00H, 'y', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@EMOPLGHB@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GM@EMOPLGHB@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\professional\vc'
	DB	'\tools\msvc\14.16.27023\include\xmemory0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NI@CLIPCEJM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NI@CLIPCEJM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'p'
	DB	00H, 'r', 00H, 'o', 00H, 'f', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, '\', 00H, 'm', 00H, 's', 00H, 'v', 00H, 'c', 00H, '\'
	DB	00H, '1', 00H, '4', 00H, '.', 00H, '1', 00H, '6', 00H, '.', 00H
	DB	'2', 00H, '7', 00H, '0', 00H, '2', 00H, '3', 00H, '\', 00H, 'i'
	DB	00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H
	DB	'\', 00H, 'x', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@FAFCIENC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GM@FAFCIENC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\professional\vc'
	DB	'\tools\msvc\14.16.27023\include\xutility', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z$0
__unwindtable$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$0
__unwindtable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$2
__ehfuncinfo$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z$0
__unwindtable$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z$0
__unwindtable$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z$0
__ehfuncinfo$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$??0CNeuralNet@@QAE@HHHN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNeuralNet@@QAE@HHHN@Z$0
__unwindtable$??0SNeuron@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SNeuron@@QAE@H@Z$0
__unwindtable$?Train@CNeuralNet@@QAE_NPAVCData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Train@CNeuralNet@@QAE_NPAVCData@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Train@CNeuralNet@@QAE_NPAVCData@@@Z$1
__unwindtable$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z$1
__unwindtable$??0SNeuronLayer@@QAE@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SNeuronLayer@@QAE@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SNeuronLayer@@QAE@HH@Z$1
__unwindtable$?CreateNet@CNeuralNet@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$3
__ehfuncinfo$?Train@CNeuralNet@@QAE_NPAVCData@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Train@CNeuralNet@@QAE_NPAVCData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0CNeuralNet@@QAE@HHHN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CNeuralNet@@QAE@HHHN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateNet@CNeuralNet@@AAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?CreateNet@CNeuralNet@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SNeuronLayer@@QAE@HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SNeuronLayer@@QAE@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0SNeuron@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SNeuron@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$8
	DD	03H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$10
	DD	03H
	DD	FLAT:__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$12
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MaxDouble$initializer$@@3P6AXXZA DD FLAT:??__EMaxDouble@@YAXXZ ; MaxDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinDouble$initializer$@@3P6AXXZA DD FLAT:??__EMinDouble@@YAXXZ ; MinDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MaxFloat$initializer$@@3P6AXXZA DD FLAT:??__EMaxFloat@@YAXXZ ; MaxFloat$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinFloat$initializer$@@3P6AXXZA DD FLAT:??__EMinFloat@@YAXXZ ; MinFloat$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Advance1@PANH@std@@YAXAAPANHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance1@PANH@std@@YAXAAPANHUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance1<double *,int>, COMDAT

; 1207 : 	{	// increment iterator by offset, random-access iterators

	push	ebp
	mov	ebp, esp

; 1208 : 	_Where += _Off;

	mov	eax, DWORD PTR __Where$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Off$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	DWORD PTR [ecx], eax

; 1209 : 	}

	pop	ebp
	ret	0
??$_Advance1@PANH@std@@YAXAAPANHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance1<double *,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@V?$vector@NV?$allocator@N@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@AAV31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$vector@NV?$allocator@N@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@AAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::construct<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YAAAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ; std::forward<std::vector<double,std::allocator<double> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@V?$vector@NV?$allocator@N@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@AAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::construct<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YAAAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YAAAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z PROC ; std::forward<std::vector<double,std::allocator<double> > &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YAAAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ENDP ; std::forward<std::vector<double,std::allocator<double> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@USNeuron@@@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@USNeuron@@@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z PROC ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Emplace_back<SNeuron>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z ; std::_Unfancy<SNeuron>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::construct<SNeuron,SNeuron>
	add	esp, 12					; 0000000cH

; 165  : 		++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 166  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@USNeuron@@@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z ENDP ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Emplace_back<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@XZ PROC ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Release, COMDAT
; _this$ = ecx

; 169  : 		{	// suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		_First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 171  : 		return (_Last);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 172  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@XZ ENDP ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::~_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy all elements guarded by this instance

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		_Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@@Z ; std::_Destroy_range<std::allocator<SNeuron> >
	add	esp, 12					; 0000000cH

; 159  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::~_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@PAUSNeuron@@AAV?$allocator@USNeuron@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@PAUSNeuron@@AAV?$allocator@USNeuron@@@1@@Z PROC ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		: _First(_Dest),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx

; 148  : 		_Last(_Dest),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax

; 149  : 		_Al(_Al_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 151  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@PAUSNeuron@@AAV?$allocator@USNeuron@@@1@@Z ENDP ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@USNeuronLayer@@@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@USNeuronLayer@@@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z PROC ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Emplace_back<SNeuronLayer>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z ; std::_Unfancy<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::construct<SNeuronLayer,SNeuronLayer>
	add	esp, 12					; 0000000cH

; 165  : 		++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 166  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@USNeuronLayer@@@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ENDP ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Emplace_back<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@XZ PROC ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Release, COMDAT
; _this$ = ecx

; 169  : 		{	// suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		_First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 171  : 		return (_Last);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 172  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@XZ ENDP ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::~_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy all elements guarded by this instance

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		_Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@@Z ; std::_Destroy_range<std::allocator<SNeuronLayer> >
	add	esp, 12					; 0000000cH

; 159  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::~_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@PAUSNeuronLayer@@AAV?$allocator@USNeuronLayer@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@PAUSNeuronLayer@@AAV?$allocator@USNeuronLayer@@@1@@Z PROC ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		: _First(_Dest),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx

; 148  : 		_Last(_Dest),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax

; 149  : 		_Al(_Al_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 151  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@PAUSNeuronLayer@@AAV?$allocator@USNeuronLayer@@@1@@Z ENDP ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z
_TEXT	SEGMENT
__Count$ = -16						; size = 4
__Dest_ch$ = -12					; size = 4
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z PROC		; std::_Copy_memmove<double *,double *>, COMDAT

; 2398 : 	{	// implement copy-like function as memmove

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 2405 : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ENDP		; std::_Copy_memmove<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_unchecked1@PANPAN@std@@YAPANPAN00U_Trivially_copyable_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_unchecked1@PANPAN@std@@YAPANPAN00U_Trivially_copyable_ptr_iterator_tag@0@@Z PROC ; std::_Copy_unchecked1<double *,double *>, COMDAT

; 2424 : 	{	// copy [_First, _Last) to [_Dest, ...), pointers to trivially copyable

	push	ebp
	mov	ebp, esp

; 2425 : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>
	add	esp, 12					; 0000000cH

; 2426 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Copy_unchecked1@PANPAN@std@@YAPANPAN00U_Trivially_copyable_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_unchecked1<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$advance@PANH@std@@YAXAAPANH@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@PANH@std@@YAXAAPANH@Z PROC			; std::advance<double *,int>, COMDAT

; 1214 : 	{	// increment iterator by offset, arbitrary iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1215 : 		// we remove_const_t before _Iter_cat_t for better diagnostics if the user passes an iterator that is const
; 1216 : 	_Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??$_Advance1@PANH@std@@YAXAAPANHUrandom_access_iterator_tag@0@@Z ; std::_Advance1<double *,int>
	add	esp, 12					; 0000000cH

; 1217 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$advance@PANH@std@@YAXAAPANH@Z ENDP			; std::advance<double *,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Distance1@PAN@std@@YAHPAN0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Distance1@PAN@std@@YAHPAN0Urandom_access_iterator_tag@0@@Z PROC ; std::_Distance1<double *>, COMDAT

; 1234 : 	{	// return distance between iterators; random-access

	push	ebp
	mov	ebp, esp

; 1235 : 	return (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3

; 1236 : 	}

	pop	ebp
	ret	0
??$_Distance1@PAN@std@@YAHPAN0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Distance1<double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@AAV?$vector@NV?$allocator@N@std@@@std@@@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEXAAV?$vector@NV?$allocator@N@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAV?$vector@NV?$allocator@N@std@@@std@@@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEXAAV?$vector@NV?$allocator@N@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Emplace_back<std::vector<double,std::allocator<double> > &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YAAAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ; std::forward<std::vector<double,std::allocator<double> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@@Z ; std::_Unfancy<std::vector<double,std::allocator<double> > >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@V?$vector@NV?$allocator@N@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@AAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::construct<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > &>
	add	esp, 12					; 0000000cH

; 165  : 		++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 166  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@AAV?$vector@NV?$allocator@N@std@@@std@@@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEXAAV?$vector@NV?$allocator@N@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Emplace_back<std::vector<double,std::allocator<double> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<double,double,std::allocator<double> >, COMDAT

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>
	add	esp, 12					; 0000000cH

; 245  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<double,double,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z PROC ; std::_Ptr_move_cat<double,double>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1087 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1088 : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ENDP ; std::_Ptr_move_cat<double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@USNeuron@@@std@@$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USNeuron@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@USNeuron@@@std@@$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USNeuron@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><std::allocator<SNeuron> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ; std::forward<std::allocator<SNeuron> >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SNeuron> >::_Vector_val<std::_Simple_types<SNeuron> >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@USNeuron@@@std@@$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USNeuron@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><std::allocator<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z PROC ; std::forward<std::allocator<SNeuron> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@USNeuron@@@std@@YAXAAPAUSNeuron@@QAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@USNeuron@@@std@@YAXAAPAUSNeuron@@QAU1@@Z PROC ; std::_Seek_wrapped<SNeuron>, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@USNeuron@@@std@@YAXAAPAUSNeuron@@QAU1@@Z ENDP ; std::_Seek_wrapped<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<SNeuron *,SNeuron *,std::allocator<SNeuron> >, COMDAT

; 228  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@PAUSNeuron@@AAV?$allocator@USNeuron@@@1@@Z ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 40					; 00000028H
	mov	DWORD PTR __First$[ebp], edx
$LN4@Uninitiali:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Uninitiali

; 231  : 		{
; 232  : 		_Backout._Emplace_back(_STD move(*_First));

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAUSNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::move<SNeuron &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@USNeuron@@@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Emplace_back<SNeuron>

; 233  : 		}

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 234  : 
; 235  : 	return (_Backout._Release());

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@XZ ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::~_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
	mov	eax, DWORD PTR $T2[ebp]

; 236  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAUSNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >::~_Uninitialized_backout_al<SNeuron *,std::allocator<SNeuron> >
__ehhandler$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<SNeuron *,SNeuron *,std::allocator<SNeuron> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@USNeuron@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuron@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@USNeuron@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuron@@0@Z PROC ; std::_Ptr_move_cat<SNeuron,SNeuron>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1087 : 	return {};

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	al, BYTE PTR $T1[ebp]

; 1088 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_move_cat@USNeuron@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuron@@0@Z ENDP ; std::_Ptr_move_cat<SNeuron,SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@USNeuron@@H$0A@@std@@YAPAUSNeuron@@QAU1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@USNeuron@@H$0A@@std@@YAPAUSNeuron@@QAU1@H@Z PROC ; std::_Get_unwrapped_n<SNeuron,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@USNeuron@@H$0A@@std@@YAPAUSNeuron@@QAU1@H@Z ENDP ; std::_Get_unwrapped_n<SNeuron,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAUSNeuron@@PAU1@@std@@YAHABQAUSNeuron@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAUSNeuron@@PAU1@@std@@YAHABQAUSNeuron@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<SNeuron *,SNeuron *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PAUSNeuron@@PAU1@@std@@YAHABQAUSNeuron@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<SNeuron *,SNeuron *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAUSNeuron@@PAU1@@std@@YA@ABQAUSNeuron@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAUSNeuron@@PAU1@@std@@YA@ABQAUSNeuron@@0@Z PROC ; std::_Idl_distance<SNeuron *,SNeuron *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PAUSNeuron@@PAU1@@std@@YAHABQAUSNeuron@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<SNeuron *,SNeuron *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PAUSNeuron@@PAU1@@std@@YA@ABQAUSNeuron@@0@Z ENDP ; std::_Idl_distance<SNeuron *,SNeuron *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@USNeuron@@@std@@YAPAUSNeuron@@QAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@USNeuron@@@std@@YAPAUSNeuron@@QAU1@@Z PROC ; std::_Get_unwrapped<SNeuron>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@USNeuron@@@std@@YAPAUSNeuron@@QAU1@@Z ENDP ; std::_Get_unwrapped<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@USNeuronLayer@@@std@@YAXAAPAUSNeuronLayer@@QAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@USNeuronLayer@@@std@@YAXAAPAUSNeuronLayer@@QAU1@@Z PROC ; std::_Seek_wrapped<SNeuronLayer>, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@USNeuronLayer@@@std@@YAXAAPAUSNeuronLayer@@QAU1@@Z ENDP ; std::_Seek_wrapped<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >, COMDAT

; 228  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@PAUSNeuronLayer@@AAV?$allocator@USNeuronLayer@@@1@@Z ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], edx
$LN4@Uninitiali:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Uninitiali

; 231  : 		{
; 232  : 		_Backout._Emplace_back(_STD move(*_First));

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAUSNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::move<SNeuronLayer &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@USNeuronLayer@@@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Emplace_back<SNeuronLayer>

; 233  : 		}

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 234  : 
; 235  : 	return (_Backout._Release());

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@XZ ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::~_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
	mov	eax, DWORD PTR $T2[ebp]

; 236  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAUSNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >::~_Uninitialized_backout_al<SNeuronLayer *,std::allocator<SNeuronLayer> >
__ehhandler$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@USNeuronLayer@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuronLayer@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@USNeuronLayer@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuronLayer@@0@Z PROC ; std::_Ptr_move_cat<SNeuronLayer,SNeuronLayer>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1087 : 	return {};

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	al, BYTE PTR $T1[ebp]

; 1088 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_move_cat@USNeuronLayer@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuronLayer@@0@Z ENDP ; std::_Ptr_move_cat<SNeuronLayer,SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@USNeuronLayer@@H$0A@@std@@YAPAUSNeuronLayer@@QAU1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@USNeuronLayer@@H$0A@@std@@YAPAUSNeuronLayer@@QAU1@H@Z PROC ; std::_Get_unwrapped_n<SNeuronLayer,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@USNeuronLayer@@H$0A@@std@@YAPAUSNeuronLayer@@QAU1@H@Z ENDP ; std::_Get_unwrapped_n<SNeuronLayer,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAUSNeuronLayer@@PAU1@@std@@YAHABQAUSNeuronLayer@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAUSNeuronLayer@@PAU1@@std@@YAHABQAUSNeuronLayer@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<SNeuronLayer *,SNeuronLayer *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PAUSNeuronLayer@@PAU1@@std@@YAHABQAUSNeuronLayer@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<SNeuronLayer *,SNeuronLayer *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAUSNeuronLayer@@PAU1@@std@@YA@ABQAUSNeuronLayer@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAUSNeuronLayer@@PAU1@@std@@YA@ABQAUSNeuronLayer@@0@Z PROC ; std::_Idl_distance<SNeuronLayer *,SNeuronLayer *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PAUSNeuronLayer@@PAU1@@std@@YAHABQAUSNeuronLayer@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<SNeuronLayer *,SNeuronLayer *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PAUSNeuronLayer@@PAU1@@std@@YA@ABQAUSNeuronLayer@@0@Z ENDP ; std::_Idl_distance<SNeuronLayer *,SNeuronLayer *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@QAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@QAU1@@Z PROC ; std::_Get_unwrapped<SNeuronLayer>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@QAU1@@Z ENDP ; std::_Get_unwrapped<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@V?$vector@NV?$allocator@N@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$vector@NV?$allocator@N@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::destroy<std::vector<double,std::allocator<double> > >, COMDAT

; 886  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 887  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$vector@NV?$allocator@N@std@@@std@@QAEPAXI@Z

; 888  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@V?$vector@NV?$allocator@N@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::destroy<std::vector<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@USNeuron@@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USNeuron@@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@@Z PROC ; std::_Default_allocator_traits<std::allocator<SNeuron> >::destroy<SNeuron>, COMDAT

; 886  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 887  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GSNeuron@@QAEPAXI@Z

; 888  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@USNeuron@@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SNeuron> >::destroy<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@USNeuronLayer@@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USNeuronLayer@@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@@Z PROC ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::destroy<SNeuronLayer>, COMDAT

; 886  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 887  : 		_Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GSNeuronLayer@@QAEPAXI@Z

; 888  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@USNeuronLayer@@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::destroy<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Release, COMDAT
; _this$ = ecx

; 169  : 		{	// suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		_First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 171  : 		return (_Last);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 172  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::~_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy all elements guarded by this instance

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		_Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 12					; 0000000cH

; 159  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::~_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@PAV?$vector@NV?$allocator@N@std@@@1@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@PAV?$vector@NV?$allocator@N@std@@@1@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		: _First(_Dest),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx

; 148  : 		_Last(_Dest),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax

; 149  : 		_Al(_Al_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 151  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@PAV?$vector@NV?$allocator@N@std@@@1@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@N@std@@YAXAAPANQAN@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@N@std@@YAXAAPANQAN@Z PROC		; std::_Seek_wrapped<double>, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@N@std@@YAXAAPANQAN@Z ENDP		; std::_Seek_wrapped<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<double,double,std::allocator<double> >, COMDAT

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_memmove<double *,double *>
	add	esp, 12					; 0000000cH

; 203  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Uninitialized_copy_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<double,double,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_copy_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z PROC ; std::_Ptr_copy_cat<double,double>, COMDAT

; 1069 : 	{	// return pointer copy optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1070 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1071 : 	}

	pop	ebp
	ret	0
??$_Ptr_copy_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ENDP ; std::_Ptr_copy_cat<double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@NH$0A@@std@@YAPANQANH@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@NH$0A@@std@@YAPANQANH@Z PROC	; std::_Get_unwrapped_n<double,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@NH$0A@@std@@YAPANQANH@Z ENDP	; std::_Get_unwrapped_n<double,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PANPAN@std@@YAHABQAN0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PANPAN@std@@YAHABQAN0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<double *,double *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 3

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PANPAN@std@@YAHABQAN0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PANPAN@std@@YA@ABQAN0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PANPAN@std@@YA@ABQAN0@Z PROC		; std::_Idl_distance<double *,double *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PANPAN@std@@YAHABQAN0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<double *,double *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PANPAN@std@@YA@ABQAN0@Z ENDP		; std::_Idl_distance<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_unchecked@PANPAN@std@@YAPANPAN00@Z
_TEXT	SEGMENT
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_unchecked@PANPAN@std@@YAPANPAN00@Z PROC	; std::_Copy_unchecked<double *,double *>, COMDAT

; 2432 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 2433 : 		// note: _Copy_unchecked is called directly from elsewhere in the STL
; 2434 : 	return (_Copy_unchecked1(_First, _Last, _Dest, _Ptr_copy_cat(_First, _Dest)));

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$_Ptr_copy_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ; std::_Ptr_copy_cat<double,double>
	add	esp, 12					; 0000000cH
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_unchecked1@PANPAN@std@@YAPANPAN00U_Trivially_copyable_ptr_iterator_tag@0@@Z ; std::_Copy_unchecked1<double *,double *>
	add	esp, 16					; 00000010H

; 2435 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_unchecked@PANPAN@std@@YAPANPAN00@Z ENDP	; std::_Copy_unchecked<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$next@PAN@std@@YAPANPANH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Off$ = 12						; size = 4
??$next@PAN@std@@YAPANPANH@Z PROC			; std::next<double *>, COMDAT

; 1254 : 	{	// increment iterator

	push	ebp
	mov	ebp, esp

; 1255 : 	static_assert(_Is_input_iter_v<_InIt>, "next requires input iterator");
; 1256 : 
; 1257 : 	_STD advance(_First, _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$advance@PANH@std@@YAXAAPANH@Z	; std::advance<double *,int>
	add	esp, 8

; 1258 : 	return (_First);

	mov	eax, DWORD PTR __First$[ebp]

; 1259 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$next@PAN@std@@YAPANPANH@Z ENDP			; std::next<double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$distance@PAN@std@@YAHPAN0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PAN@std@@YAHPAN0@Z PROC			; std::distance<double *>, COMDAT

; 1240 : 	{	// return distance between iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1241 : 	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Distance1@PAN@std@@YAHPAN0Urandom_access_iterator_tag@0@@Z ; std::_Distance1<double *>
	add	esp, 12					; 0000000cH

; 1242 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$distance@PAN@std@@YAHPAN0@Z ENDP			; std::distance<double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range1@PANPAN@std@@YAXABQAN0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Adl_verify_range1@PANPAN@std@@YAXABQAN0U?$integral_constant@_N$00@0@@Z PROC ; std::_Adl_verify_range1<double *,double *>, COMDAT

; 602  : 	{	// check that [_First, _Last) forms an iterator range

	push	ebp
	mov	ebp, esp

; 603  : 	_Verify_range(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Verify_range@N@std@@YAXQBN0@Z	; std::_Verify_range<double>
	add	esp, 8

; 604  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Adl_verify_range1@PANPAN@std@@YAXABQAN0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Adl_verify_range1<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Verify_range@N@std@@YAXQBN0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Verify_range@N@std@@YAXQBN0@Z PROC			; std::_Verify_range<double>, COMDAT

; 558  : 	{	// special case range verification for pointers

	push	ebp
	mov	ebp, esp
$LN4@Verify_ran:

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	ja	SHORT $LN7@Verify_ran
	jmp	SHORT $LN2@Verify_ran
$LN7@Verify_ran:
	push	OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	559					; 0000022fH
	push	OFFSET ??_C@_0GM@FAFCIENC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Verify_ran
	int	3
$LN11@Verify_ran:
	push	0
	push	559					; 0000022fH
	push	OFFSET ??_C@_1NI@CLIPCEJM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
	push	OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@Verify_ran
$LN2@Verify_ran:
	xor	eax, eax
	jne	SHORT $LN4@Verify_ran

; 560  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Verify_range@N@std@@YAXQBN0@Z ENDP			; std::_Verify_range<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAXAAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAXAAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z PROC ; std::_Seek_wrapped<std::vector<double,std::allocator<double> > >, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAXAAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ENDP ; std::_Seek_wrapped<std::vector<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 436  : 		constexpr _Unused_parameter(_Ty&&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Backout$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT

; 186  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 187  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@PAV?$vector@NV?$allocator@N@std@@@1@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 188  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], edx
$LN4@Uninitiali:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Uninitiali

; 189  : 		{
; 190  : 		_Backout._Emplace_back(*_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@AAV?$vector@NV?$allocator@N@std@@@std@@@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEXAAV?$vector@NV?$allocator@N@std@@@1@@Z ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Emplace_back<std::vector<double,std::allocator<double> > &>

; 191  : 		}

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 192  : 
; 193  : 	return (_Backout._Release());

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::~_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	eax, DWORD PTR $T2[ebp]

; 194  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAV?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >::~_Uninitialized_backout_al<std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
__ehhandler$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@V?$vector@NV?$allocator@N@std@@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_copy_cat@V?$vector@NV?$allocator@N@std@@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z PROC ; std::_Ptr_copy_cat<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > >, COMDAT

; 1069 : 	{	// return pointer copy optimization category for pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1070 : 	return {};

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	al, BYTE PTR $T1[ebp]

; 1071 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_copy_cat@V?$vector@NV?$allocator@N@std@@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z ENDP ; std::_Ptr_copy_cat<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@V?$vector@NV?$allocator@N@std@@@std@@H$0A@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@V?$vector@NV?$allocator@N@std@@@std@@H$0A@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@H@Z PROC ; std::_Get_unwrapped_n<std::vector<double,std::allocator<double> >,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@V?$vector@NV?$allocator@N@std@@@std@@H$0A@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@H@Z ENDP ; std::_Get_unwrapped_n<std::vector<double,std::allocator<double> >,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YAHABQAV?$vector@NV?$allocator@N@std@@@0@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YAHABQAV?$vector@NV?$allocator@N@std@@@0@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YAHABQAV?$vector@NV?$allocator@N@std@@@0@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YA@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YA@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z PROC ; std::_Idl_distance<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YAHABQAV?$vector@NV?$allocator@N@std@@@0@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YA@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z ENDP ; std::_Idl_distance<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z PROC ; std::_Get_unwrapped<std::vector<double,std::allocator<double> > >, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ENDP ; std::_Get_unwrapped<std::vector<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
$T1 = -38						; size = 1
$T2 = -37						; size = 1
__UDest$ = -32						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z PROC ; std::_Uninitialized_move<double *,double *,std::allocator<double> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@N@std@@YAPANQAN@Z	; std::_Get_unwrapped<double>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@N@std@@YAPANQAN@Z	; std::_Get_unwrapped<double>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PANPAN@std@@YA@ABQAN0@Z ; std::_Idl_distance<double *,double *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@NH$0A@@std@@YAPANQANH@Z ; std::_Get_unwrapped_n<double,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Ptr_move_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ; std::_Ptr_move_cat<double,double>
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Uninitialized_move_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<double,double,std::allocator<double> >
	add	esp, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Seek_wrapped@N@std@@YAXAAPANQAN@Z	; std::_Seek_wrapped<double>
	add	esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Uninitiali:
	DD	3
	DD	$LN6@Uninitiali
$LN6@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_move@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ENDP ; std::_Uninitialized_move<double *,double *,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0CI@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0CI@@std@@YAII@Z PROC		; std::_Get_size_of_n<40>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 107374182 ; 06666666H

; 25   : 	size_t _Result = _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 40
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 107374182	; 06666666H
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0CI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<40>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@YA$$QAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@YA$$QAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@0@AAV10@@Z PROC ; std::move<std::vector<SNeuron,std::allocator<SNeuron> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@YA$$QAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@0@AAV10@@Z ENDP ; std::move<std::vector<SNeuron,std::allocator<SNeuron> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@USNeuron@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USNeuron@@@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$?0V?$allocator@USNeuron@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USNeuron@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > ><std::allocator<SNeuron>,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ; std::forward<std::allocator<SNeuron> >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@USNeuron@@@std@@$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USNeuron@@@1@@Z ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><std::allocator<SNeuron> >

; 456  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Alloc_proxy

; 457  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@USNeuron@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USNeuron@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > ><std::allocator<SNeuron>,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z PROC ; std::move<std::allocator<SNeuron> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAV?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ENDP ; std::move<std::allocator<SNeuron> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@QAU1@0PAU1@AAV?$allocator@USNeuron@@@0@@Z
_TEXT	SEGMENT
$T1 = -42						; size = 1
$T2 = -41						; size = 1
__UDest$ = -32						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@QAU1@0PAU1@AAV?$allocator@USNeuron@@@0@@Z PROC ; std::_Uninitialized_move<SNeuron *,SNeuron *,std::allocator<SNeuron> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@USNeuron@@@std@@YAPAUSNeuron@@QAU1@@Z ; std::_Get_unwrapped<SNeuron>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@USNeuron@@@std@@YAPAUSNeuron@@QAU1@@Z ; std::_Get_unwrapped<SNeuron>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUSNeuron@@PAU1@@std@@YA@ABQAUSNeuron@@0@Z ; std::_Idl_distance<SNeuron *,SNeuron *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@USNeuron@@H$0A@@std@@YAPAUSNeuron@@QAU1@H@Z ; std::_Get_unwrapped_n<SNeuron,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

	lea	edx, DWORD PTR __UDest$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Ptr_move_cat@USNeuron@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuron@@0@Z ; std::_Ptr_move_cat<SNeuron,SNeuron>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UDest$[ebp]
	push	edx
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Uninitialized_move_al_unchecked@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@PAU1@QAU1@1AAV?$allocator@USNeuron@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<SNeuron *,SNeuron *,std::allocator<SNeuron> >
	add	esp, 24					; 00000018H
	push	eax
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@USNeuron@@@std@@YAXAAPAUSNeuron@@QAU1@@Z ; std::_Seek_wrapped<SNeuron>
	add	esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Uninitiali:
	DD	3
	DD	$LN6@Uninitiali
$LN6@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_move@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@QAU1@0PAU1@AAV?$allocator@USNeuron@@@0@@Z ENDP ; std::_Uninitialized_move<SNeuron *,SNeuron *,std::allocator<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0BE@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BE@@std@@YAII@Z PROC		; std::_Get_size_of_n<20>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 214748364 ; 0cccccccH

; 25   : 	size_t _Result = _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 20
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 214748364	; 0cccccccH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BE@@std@@YAII@Z ENDP		; std::_Get_size_of_n<20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@QAU1@0PAU1@AAV?$allocator@USNeuronLayer@@@0@@Z
_TEXT	SEGMENT
$T1 = -42						; size = 1
$T2 = -41						; size = 1
__UDest$ = -32						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@QAU1@0PAU1@AAV?$allocator@USNeuronLayer@@@0@@Z PROC ; std::_Uninitialized_move<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@QAU1@@Z ; std::_Get_unwrapped<SNeuronLayer>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@QAU1@@Z ; std::_Get_unwrapped<SNeuronLayer>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUSNeuronLayer@@PAU1@@std@@YA@ABQAUSNeuronLayer@@0@Z ; std::_Idl_distance<SNeuronLayer *,SNeuronLayer *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@USNeuronLayer@@H$0A@@std@@YAPAUSNeuronLayer@@QAU1@H@Z ; std::_Get_unwrapped_n<SNeuronLayer,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

	lea	edx, DWORD PTR __UDest$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Ptr_move_cat@USNeuronLayer@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSNeuronLayer@@0@Z ; std::_Ptr_move_cat<SNeuronLayer,SNeuronLayer>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UDest$[ebp]
	push	edx
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Uninitialized_move_al_unchecked@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@PAU1@QAU1@1AAV?$allocator@USNeuronLayer@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
	add	esp, 24					; 00000018H
	push	eax
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@USNeuronLayer@@@std@@YAXAAPAUSNeuronLayer@@QAU1@@Z ; std::_Seek_wrapped<SNeuronLayer>
	add	esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Uninitiali:
	DD	3
	DD	$LN6@Uninitiali
$LN6@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_move@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@QAU1@0PAU1@AAV?$allocator@USNeuronLayer@@@0@@Z ENDP ; std::_Uninitialized_move<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT

; 1133 : 	{	// destroy [_First, _Last), no special optimization

	push	ebp
	mov	ebp, esp

; 1134 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Destroy_ra

; 1135 : 		{
; 1136 : 		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unfancy@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@@Z ; std::_Unfancy<std::vector<double,std::allocator<double> > >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$destroy@V?$vector@NV?$allocator@N@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@QAV?$vector@NV?$allocator@N@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::destroy<std::vector<double,std::allocator<double> > >
	add	esp, 8

; 1137 : 		}

	jmp	SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1138 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<SNeuron> >, COMDAT

; 1133 : 	{	// destroy [_First, _Last), no special optimization

	push	ebp
	mov	ebp, esp

; 1134 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Destroy_ra

; 1135 : 		{
; 1136 : 		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z ; std::_Unfancy<SNeuron>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$destroy@USNeuron@@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::destroy<SNeuron>
	add	esp, 8

; 1137 : 		}

	jmp	SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1138 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<SNeuronLayer> >, COMDAT

; 1133 : 	{	// destroy [_First, _Last), no special optimization

	push	ebp
	mov	ebp, esp

; 1134 : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Destroy_ra

; 1135 : 		{
; 1136 : 		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z ; std::_Unfancy<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$destroy@USNeuronLayer@@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::destroy<SNeuronLayer>
	add	esp, 8

; 1137 : 		}

	jmp	SHORT $LN2@Destroy_ra
$LN1@Destroy_ra:

; 1138 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<SNeuronLayer> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 94   : 	if (_Block_size <= _Bytes)

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);

	mov	DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	101					; 00000065H
	push	OFFSET ??_C@_0GM@EMOPLGHB@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	101					; 00000065H
	push	OFFSET ??_C@_1NI@NGGEPBDP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 110  : 	}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<double> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

	push	ebp
	mov	ebp, esp

; 1146 : 		// nothing to do
; 1147 : 	}

	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::allocator<double> >, COMDAT

; 1075 : 	{	// (don't) propagate on container copy assignment

	push	ebp
	mov	ebp, esp

; 1076 : 	}

	pop	ebp
	ret	0
??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@@Z PROC ; std::_Unfancy<std::vector<double,std::allocator<double> > >, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@@Z ENDP ; std::_Unfancy<std::vector<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z
_TEXT	SEGMENT
$T1 = -38						; size = 1
$T2 = -37						; size = 1
__UDest$ = -32						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z PROC ; std::_Uninitialized_copy<double *,double *,std::allocator<double> >, COMDAT

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@N@std@@YAPANQAN@Z	; std::_Get_unwrapped<double>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@N@std@@YAPANQAN@Z	; std::_Get_unwrapped<double>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PANPAN@std@@YA@ABQAN0@Z ; std::_Idl_distance<double *,double *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@NH$0A@@std@@YAPANQANH@Z ; std::_Get_unwrapped_n<double,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 214  : 	_Seek_wrapped(_Dest,

	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Ptr_copy_cat@NN@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAN0@Z ; std::_Ptr_copy_cat<double,double>
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Uninitialized_copy_al_unchecked@NNV?$allocator@N@std@@@std@@YAPANQAN00AAV?$allocator@N@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<double,double,std::allocator<double> >
	add	esp, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Seek_wrapped@N@std@@YAXAAPANQAN@Z	; std::_Seek_wrapped<double>
	add	esp, 8

; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 220  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Uninitiali:
	DD	3
	DD	$LN6@Uninitiali
$LN6@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_copy@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ENDP ; std::_Uninitialized_copy<double *,double *,std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::forward<std::allocator<double> >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z PROC ; std::forward<std::allocator<double> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ENDP ; std::forward<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Assign_range@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Newlast$1 = -28					; size = 4
__Mid$2 = -24						; size = 4
__Newcapacity$3 = -20					; size = 4
__Oldcapacity$ = -16					; size = 4
__Oldsize$ = -12					; size = 4
__Newsize$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign_range@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0Uforward_iterator_tag@1@@Z PROC ; std::vector<double,std::allocator<double> >::_Assign_range<double *>, COMDAT
; _this$ = ecx

; 1341 : 		{	// assign [_First, _Last), forward iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1342 : 		const size_type _Newsize = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$distance@PAN@std@@YAHPAN0@Z		; std::distance<double *>
	add	esp, 8
	push	eax
	call	??$_Convert_size@I@std@@YAII@Z		; std::_Convert_size<unsigned int>
	add	esp, 4
	mov	DWORD PTR __Newsize$[ebp], eax

; 1343 : 
; 1344 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all

; 1345 : 
; 1346 : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 1347 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1348 : 
; 1349 : 		if (_Newsize > _Oldcapacity)

	mov	edx, DWORD PTR __Newsize$[ebp]
	cmp	edx, DWORD PTR __Oldcapacity$[ebp]
	jbe	$LN2@Assign_ran

; 1350 : 			{	// reallocate
; 1351 : 			if (_Newsize > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jbe	SHORT $LN4@Assign_ran

; 1352 : 				{
; 1353 : 				_Xlength();

	call	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN4@Assign_ran:

; 1354 : 				}
; 1355 : 
; 1356 : 			const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ; std::vector<double,std::allocator<double> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$3[ebp], eax

; 1357 : 
; 1358 : 			if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Assign_ran

; 1359 : 				{	// destroy and deallocate old array
; 1360 : 				_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1361 : 				this->_Getal().deallocate(this->_Myfirst(), _Oldcapacity);

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate
$LN5@Assign_ran:

; 1362 : 				}
; 1363 : 
; 1364 : 			_Buy(_Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@NV?$allocator@N@std@@@std@@AAE_NI@Z ; std::vector<double,std::allocator<double> >::_Buy

; 1365 : 
; 1366 : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Ucopy<double *>
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR [eax], esi
	jmp	$LN8@Assign_ran
$LN2@Assign_ran:

; 1367 : 			}
; 1368 : 		else if (_Newsize > _Oldsize)

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldsize$[ebp]
	jbe	SHORT $LN6@Assign_ran

; 1369 : 			{
; 1370 : 			// performance note: traversing [_First, _Mid) twice
; 1371 : 			const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));

	mov	ecx, DWORD PTR __Oldsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$next@PAN@std@@YAPANPANH@Z		; std::next<double *>
	add	esp, 8
	mov	DWORD PTR __Mid$2[ebp], eax

; 1372 : 			_Copy_unchecked(_First, _Mid, this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Mid$2[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_unchecked@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_unchecked<double *,double *>
	add	esp, 12					; 0000000cH

; 1373 : 			this->_Mylast() = _Ucopy(_Mid, _Last, this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mid$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Ucopy<double *>
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1374 : 			}
; 1375 : 		else

	jmp	SHORT $LN8@Assign_ran
$LN6@Assign_ran:

; 1376 : 			{
; 1377 : 			const pointer _Newlast = this->_Myfirst() + _Newsize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR __Newlast$1[ebp], edx

; 1378 : 			_Copy_unchecked(_First, _Last, this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_unchecked@PANPAN@std@@YAPANPAN00@Z ; std::_Copy_unchecked<double *,double *>
	add	esp, 12					; 0000000cH

; 1379 : 			_Destroy(_Newlast, this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Newlast$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1380 : 			this->_Mylast() = _Newlast;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR __Newlast$1[ebp]
	mov	DWORD PTR [eax], edx
$LN8@Assign_ran:

; 1381 : 			}
; 1382 : 		}

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Assign_range@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0Uforward_iterator_tag@1@@Z ENDP ; std::vector<double,std::allocator<double> >::_Assign_range<double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@N@std@@YAPANQAN@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@N@std@@YAPANQAN@Z PROC		; std::_Get_unwrapped<double>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@N@std@@YAPANQAN@Z ENDP		; std::_Get_unwrapped<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PANPAN@std@@YAXABQAN0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PANPAN@std@@YAXABQAN0@Z PROC	; std::_Adl_verify_range<double *,double *>, COMDAT

; 615  : 	{	// check that [_First, _Last) forms an iterator range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adl_verify_range1@PANPAN@std@@YAXABQAN0U?$integral_constant@_N$00@0@@Z ; std::_Adl_verify_range1<double *,double *>
	add	esp, 12					; 0000000cH

; 617  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adl_verify_range@PANPAN@std@@YAXABQAN0@Z ENDP	; std::_Adl_verify_range<double *,double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -42						; size = 1
$T2 = -41						; size = 1
__UDest$ = -32						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ; std::_Get_unwrapped<std::vector<double,std::allocator<double> > >
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ; std::_Get_unwrapped<std::vector<double,std::allocator<double> > >
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@@std@@YA@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z ; std::_Idl_distance<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@V?$vector@NV?$allocator@N@std@@@std@@H$0A@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@H@Z ; std::_Get_unwrapped_n<std::vector<double,std::allocator<double> >,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 214  : 	_Seek_wrapped(_Dest,

	lea	edx, DWORD PTR __UDest$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Ptr_copy_cat@V?$vector@NV?$allocator@N@std@@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$vector@NV?$allocator@N@std@@@0@0@Z ; std::_Ptr_copy_cat<std::vector<double,std::allocator<double> >,std::vector<double,std::allocator<double> > >
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UDest$[ebp]
	push	edx
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Uninitialized_copy_al_unchecked@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@PAV10@QAV10@1AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_copy_al_unchecked<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 24					; 00000018H
	push	eax
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@V?$vector@NV?$allocator@N@std@@@std@@@std@@YAXAAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@@Z ; std::_Seek_wrapped<std::vector<double,std::allocator<double> > >
	add	esp, 8

; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 220  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Uninitiali:
	DD	3
	DD	$LN6@Uninitiali
$LN6@Uninitiali:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Uninitiali
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@Uninitiali
$LN5@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
??$_Uninitialized_copy@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1><std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YA$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1><std::allocator<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YA$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YA$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YA$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BA@@std@@YAII@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 268435455 ; 0fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0V?$vector@NV?$allocator@N@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0V?$vector@NV?$allocator@N@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<double,std::allocator<double> > >, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$vector@NV?$allocator@N@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SNeuron> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<SNeuron> >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0USNeuron@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuron@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0USNeuron@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuron@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuron>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0USNeuron@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuron@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SNeuronLayer> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<SNeuronLayer> >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SNeuronLayer> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuronLayer> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuronLayer> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1212 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

	push	ebp
	mov	ebp, esp

; 1213 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1214 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 886  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 874  : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0USNeuronLayer@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuronLayer@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0USNeuronLayer@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuronLayer@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuronLayer>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0USNeuronLayer@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuronLayer@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 208  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

	xor	eax, eax
$LN1@Allocate:

; 194  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@@Z PROC ; std::_Destroy_range<std::allocator<double> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<double> >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@@Z ENDP ; std::_Destroy_range<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@N@std@@QAE@XZ		; std::allocator<double>::allocator<double>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@@Z
_TEXT	SEGMENT
__Tag$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<double> >, COMDAT

; 1080 : 	{	// (maybe) propagate on container copy assignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1081 : 	typename allocator_traits<_Alloc>::propagate_on_container_copy_assignment _Tag;
; 1082 : 	_Pocca(_Left, _Right, _Tag);

	movzx	eax, BYTE PTR __Tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Left$[ebp]
	push	edx
	call	??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::allocator<double> >
	add	esp, 12					; 0000000cH

; 1083 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Pocca
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Pocca:
	DD	1
	DD	$LN4@Pocca
$LN4@Pocca:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Pocca
$LN3@Pocca:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@USNeuron@@@std@@QAE@XZ	; std::allocator<SNeuron>::allocator<SNeuron>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SNeuron> >::_Vector_val<std::_Simple_types<SNeuron> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@USNeuronLayer@@@std@@QAE@XZ ; std::allocator<SNeuronLayer>::allocator<SNeuronLayer>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SNeuronLayer> >::_Vector_val<std::_Simple_types<SNeuronLayer> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z PROC ; std::vector<double,std::allocator<double> >::_Ucopy<double *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_copy<double *,double *,std::allocator<double> >
	add	esp, 16					; 00000010H

; 1824 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ENDP ; std::vector<double,std::allocator<double> >::_Ucopy<double *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YA$$QAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YA$$QAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z PROC ; std::move<std::vector<double,std::allocator<double> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YA$$QAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ENDP ; std::move<std::vector<double,std::allocator<double> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@N@std@@X@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@$$QAV?$allocator@N@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$?0V?$allocator@N@std@@X@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@$$QAV?$allocator@N@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > ><std::allocator<double>,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::forward<std::allocator<double> >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@N@std@@$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@N@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><std::allocator<double> >

; 456  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Alloc_proxy

; 457  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@N@std@@X@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@$$QAV?$allocator@N@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > ><std::allocator<double>,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z PROC ; std::move<std::allocator<double> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ENDP ; std::move<std::allocator<double> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ; std::vector<double,std::allocator<double> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@N@std@@QAEPANI@Z	; std::allocator<double>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	call	??$_Unfancy@N@std@@YAPANPAN@Z		; std::_Unfancy<double>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABN@std@@YAABNABN@Z		; std::forward<double const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv206[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@NABN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QANABN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double const &>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ; std::vector<double,std::allocator<double> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@NABN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QANABN@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@NABN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QANABN@Z PROC ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABN@std@@YAABNABN@Z		; std::forward<double const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [edx], xmm0

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@NABN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QANABN@Z ENDP ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABN@?$vector@NV?$allocator@N@std@@@std@@AAE@ABN@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABN@?$vector@NV?$allocator@N@std@@@std@@AAE@ABN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double const &>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABN@std@@YAABNABN@Z		; std::forward<double const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@N@std@@YAPANPAN@Z		; std::_Unfancy<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	call	??$construct@NABN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QANABN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double const &>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABN@?$vector@NV?$allocator@N@std@@@std@@AAE@ABN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABN@std@@YAABNABN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABN@std@@YAABNABN@Z PROC			; std::forward<double const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@ABN@std@@YAABNABN@Z ENDP			; std::forward<double const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@ABN@?$vector@NV?$allocator@N@std@@@std@@QAE@ABN@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABN@?$vector@NV?$allocator@N@std@@@std@@QAE@ABN@Z PROC ; std::vector<double,std::allocator<double> >::emplace_back<double const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@NV?$allocator@N@std@@@std@@ABE_NXZ ; std::vector<double,std::allocator<double> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@ABN@std@@YAABNABN@Z		; std::forward<double const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@ABN@?$vector@NV?$allocator@N@std@@@std@@AAE@ABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double const &>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABN@std@@YAABNABN@Z		; std::forward<double const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@ABN@?$vector@NV?$allocator@N@std@@@std@@QAEPANQANABN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double const &>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@ABN@?$vector@NV?$allocator@N@std@@@std@@QAE@ABN@Z ENDP ; std::vector<double,std::allocator<double> >::emplace_back<double const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ; std::vector<double,std::allocator<double> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@N@std@@QAEPANI@Z	; std::allocator<double>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8+8]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	call	??$_Unfancy@N@std@@YAPANPAN@Z		; std::_Unfancy<double>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@N@std@@YA$$QANAAN@Z		; std::forward<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv206[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ; std::vector<double,std::allocator<double> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z PROC ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@N@std@@YA$$QANAAN@Z		; std::forward<double>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [edx], xmm0

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ENDP ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@N@std@@YAPANPAN@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@N@std@@YAPANPAN@Z PROC			; std::_Unfancy<double>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@N@std@@YAPANPAN@Z ENDP			; std::_Unfancy<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAE@$$QAN@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAE@$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@N@std@@YA$$QANAAN@Z		; std::forward<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@N@std@@YAPANPAN@Z		; std::_Unfancy<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	call	??$construct@NN@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAXAAV?$allocator@N@1@QAN$$QAN@Z ; std::_Default_allocator_traits<std::allocator<double> >::construct<double,double>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAE@$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@N@std@@YA$$QANAAN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@N@std@@YA$$QANAAN@Z PROC			; std::forward<double>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@N@std@@YA$$QANAAN@Z ENDP			; std::forward<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAN@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::emplace_back<double>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@NV?$allocator@N@std@@@std@@ABE_NXZ ; std::vector<double,std::allocator<double> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@N@std@@YA$$QANAAN@Z		; std::forward<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@N@?$vector@NV?$allocator@N@std@@@std@@AAE@$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_back_with_unused_capacity<double>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@N@std@@YA$$QANAAN@Z		; std::forward<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@N@?$vector@NV?$allocator@N@std@@@std@@QAEPANQAN$$QAN@Z ; std::vector<double,std::allocator<double> >::_Emplace_reallocate<double>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::emplace_back<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAN@std@@YA$$QANAAN@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAN@std@@YA$$QANAAN@Z PROC			; std::move<double &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAN@std@@YA$$QANAAN@Z ENDP			; std::move<double &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$assign@PANX@?$vector@NV?$allocator@N@std@@@std@@QAEXPAN0@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$assign@PANX@?$vector@NV?$allocator@N@std@@@std@@QAEXPAN0@Z PROC ; std::vector<double,std::allocator<double> >::assign<double *,void>, COMDAT
; _this$ = ecx

; 1388 : 		{	// assign [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1389 : 		_Adl_verify_range(_First, _Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adl_verify_range@PANPAN@std@@YAXABQAN0@Z ; std::_Adl_verify_range<double *,double *>
	add	esp, 8

; 1390 : 		_Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Get_unwrapped@N@std@@YAPANQAN@Z	; std::_Get_unwrapped<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Get_unwrapped@N@std@@YAPANQAN@Z	; std::_Get_unwrapped<double>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Assign_range@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0Uforward_iterator_tag@1@@Z ; std::vector<double,std::allocator<double> >::_Assign_range<double *>

; 1391 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$assign@PANX@?$vector@NV?$allocator@N@std@@@std@@QAEXPAN0@Z ENDP ; std::vector<double,std::allocator<double> >::assign<double *,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@$$CBV?$vector@NV?$allocator@N@std@@@std@@@std@@YAPBV?$vector@NV?$allocator@N@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$vector@NV?$allocator@N@std@@@std@@@std@@YAPBV?$vector@NV?$allocator@N@std@@@0@ABV10@@Z PROC ; std::addressof<std::vector<double,std::allocator<double> > const >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBV?$vector@NV?$allocator@N@std@@@std@@@std@@YAPBV?$vector@NV?$allocator@N@std@@@0@ABV10@@Z ENDP ; std::addressof<std::vector<double,std::allocator<double> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAV?$vector@NV?$allocator@N@std@@@std@@@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEPAV?$vector@NV?$allocator@N@std@@@1@PAV21@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAV?$vector@NV?$allocator@N@std@@@std@@@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEPAV?$vector@NV?$allocator@N@std@@@1@PAV21@00@Z PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Ucopy<std::vector<double,std::allocator<double> > *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PAV?$vector@NV?$allocator@N@std@@@std@@PAV12@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@YAPAV?$vector@NV?$allocator@N@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::vector<double,std::allocator<double> > *,std::vector<double,std::allocator<double> > *,std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 16					; 00000010H

; 1824 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAV?$vector@NV?$allocator@N@std@@@std@@@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEPAV?$vector@NV?$allocator@N@std@@@1@PAV21@00@Z ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Ucopy<std::vector<double,std::allocator<double> > *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > ><std::allocator<std::vector<double,std::allocator<double> > >,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YA$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1><std::allocator<std::vector<double,std::allocator<double> > > >

; 456  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Alloc_proxy

; 457  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > ><std::allocator<std::vector<double,std::allocator<double> > >,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_reallocate<SNeuron>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@CAXXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEII@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@USNeuron@@@std@@QAEPAUSNeuron@@I@Z ; std::allocator<SNeuron>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	edx, DWORD PTR __Whereoff$[ebp], 40
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+40]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	imul	eax, DWORD PTR __Whereoff$[ebp], 40
	add	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	call	??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z ; std::_Unfancy<SNeuron>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR tv206[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::construct<SNeuron,SNeuron>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	imul	ecx, DWORD PTR __Whereoff$[ebp], 40
	add	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	edx, DWORD PTR __Whereptr$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEPAUSNeuron@@PAU3@00@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	imul	ecx, DWORD PTR __Whereoff$[ebp], 40
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEPAUSNeuron@@PAU3@00@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z ; std::allocator<SNeuron>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXQAUSNeuron@@II@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	imul	esi, DWORD PTR __Whereoff$[ebp], 40
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	add	esi, DWORD PTR [eax]
	mov	eax, esi
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_reallocate<SNeuron>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<SNeuron> >::construct<SNeuron,SNeuron>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	40					; 00000028H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0SNeuron@@QAE@$$QAU0@@Z

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SNeuron> >::construct<SNeuron,SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z PROC	; std::_Unfancy<SNeuron>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z ENDP	; std::_Unfancy<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAE@$$QAUSNeuron@@@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAE@$$QAUSNeuron@@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_back_with_unused_capacity<SNeuron>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@USNeuron@@@std@@YAPAUSNeuron@@PAU1@@Z ; std::_Unfancy<SNeuron>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	call	??$construct@USNeuron@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAXAAV?$allocator@USNeuron@@@1@QAUSNeuron@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::construct<SNeuron,SNeuron>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAE@$$QAUSNeuron@@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_back_with_unused_capacity<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z PROC	; std::forward<SNeuron>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ENDP	; std::forward<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAUSNeuron@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAUSNeuron@@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::emplace_back<SNeuron>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABE_NXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAE@$$QAUSNeuron@@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_back_with_unused_capacity<SNeuron>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@USNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::forward<SNeuron>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEPAUSNeuron@@QAU2@$$QAU2@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Emplace_reallocate<SNeuron>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAUSNeuron@@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::emplace_back<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAUSNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUSNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z PROC	; std::move<SNeuron &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAUSNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ENDP	; std::move<SNeuron &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Const_cast@$$CBUSNeuron@@@std@@YA@PBUSNeuron@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBUSNeuron@@@std@@YA@PBUSNeuron@@@Z PROC ; std::_Const_cast<SNeuron const >, COMDAT

; 386  : 	{	// remove constness from a plain pointer

	push	ebp
	mov	ebp, esp

; 387  : 	return (const_cast<remove_const_t<_Ty> *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]

; 388  : 	}

	pop	ebp
	ret	0
??$_Const_cast@$$CBUSNeuron@@@std@@YA@PBUSNeuron@@@Z ENDP ; std::_Const_cast<SNeuron const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Constructed_first$ = -52				; size = 4
__Constructed_last$ = -48				; size = 4
__Newvec$ = -44						; size = 4
__Newcapacity$ = -40					; size = 4
__Newsize$ = -36					; size = 4
__Oldsize$ = -32					; size = 4
__Al$ = -28						; size = 4
__Whereoff$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_reallocate<SNeuronLayer>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@CAXXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEII@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@USNeuronLayer@@@std@@QAEPAUSNeuronLayer@@I@Z ; std::allocator<SNeuronLayer>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	edx, DWORD PTR __Whereoff$[ebp], 20
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+20]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	imul	eax, DWORD PTR __Whereoff$[ebp], 20
	add	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	call	??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z ; std::_Unfancy<SNeuronLayer>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR tv206[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::construct<SNeuronLayer,SNeuronLayer>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	imul	ecx, DWORD PTR __Whereoff$[ebp], 20
	add	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	edx, DWORD PTR __Whereptr$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEPAUSNeuronLayer@@PAU3@00@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	imul	ecx, DWORD PTR __Whereoff$[ebp], 20
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEPAUSNeuronLayer@@PAU3@00@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z ; std::allocator<SNeuronLayer>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXQAUSNeuronLayer@@II@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	imul	esi, DWORD PTR __Whereoff$[ebp], 20
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	add	esi, DWORD PTR [eax]
	mov	eax, esi
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_reallocate<SNeuronLayer>
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::construct<SNeuronLayer,SNeuronLayer>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	20					; 00000014H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0SNeuronLayer@@QAE@$$QAU0@@Z

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::construct<SNeuronLayer,SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z PROC ; std::_Unfancy<SNeuronLayer>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z ENDP ; std::_Unfancy<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAE@$$QAUSNeuronLayer@@@Z
_TEXT	SEGMENT
tv142 = -12						; size = 4
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAE@$$QAUSNeuronLayer@@@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_back_with_unused_capacity<SNeuronLayer>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@USNeuronLayer@@@std@@YAPAUSNeuronLayer@@PAU1@@Z ; std::_Unfancy<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	call	??$construct@USNeuronLayer@@U1@@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAXAAV?$allocator@USNeuronLayer@@@1@QAUSNeuronLayer@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::construct<SNeuronLayer,SNeuronLayer>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAE@$$QAUSNeuronLayer@@@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_back_with_unused_capacity<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z PROC ; std::forward<SNeuronLayer>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ENDP ; std::forward<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@$$QAUSNeuronLayer@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@$$QAUSNeuronLayer@@@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::emplace_back<SNeuronLayer>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABE_NXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAE@$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_back_with_unused_capacity<SNeuronLayer>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@USNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::forward<SNeuronLayer>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEPAUSNeuronLayer@@QAU2@$$QAU2@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Emplace_reallocate<SNeuronLayer>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@$$QAUSNeuronLayer@@@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::emplace_back<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAUSNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUSNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z PROC ; std::move<SNeuronLayer &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAUSNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ENDP ; std::move<SNeuronLayer &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++, COMDAT
; _this$ = ecx

; 267  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++

; 269  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 270  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->, COMDAT
; _this$ = ecx

; 262  : 		{	// return pointer to class object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 		return (_Const_cast(_Mybase::operator->()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPBUSNeuron@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	push	eax
	call	??$_Const_cast@$$CBUSNeuron@@@std@@YA@PBUSNeuron@@@Z ; std::_Const_cast<SNeuron const >
	add	esp, 4

; 264  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT
; _this$ = ecx

; 253  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		: _Mybase(_Parg, _Pvector)

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >

; 254  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT
; _this$ = ecx

; 247  : 	_Vector_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 248  : 		{	// construct with null vector pointer

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >

; 249  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Compat, COMDAT
; _this$ = ecx

; 195  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 196  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 197  : 		(void)_Right;
; 198  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 199  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@Compat
	jmp	SHORT $LN2@Compat
$LN7@Compat:
	push	OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	199					; 000000c7H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Compat
	int	3
$LN11@Compat:
	push	0
	push	199					; 000000c7H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NE@BHMMJPHD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Compat
$LN2@Compat:
	xor	edx, edx
	jne	SHORT $LN4@Compat

; 200  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 201  : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator!=, COMDAT
; _this$ = ecx

; 169  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 171  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator==, COMDAT
; _this$ = ecx

; 163  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Compat

; 165  : 		return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 166  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++, COMDAT
; _this$ = ecx

; 71   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 72   :  #if _ITERATOR_DEBUG_LEVEL != 0
; 73   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 74   : 		_STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	74					; 0000004aH
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	74					; 0000004aH
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NM@FPJHPHPF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 75   : 		_STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NM@FPJHPHPF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 76   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 77   : 
; 78   : 		++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 79   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 80   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPBUSNeuron@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPBUSNeuron@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->, COMDAT
; _this$ = ecx

; 59   : 		{	// return pointer to class object

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 60   :  #if _ITERATOR_DEBUG_LEVEL != 0
; 61   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 62   : 		_STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	62					; 0000003eH
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	62					; 0000003eH
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NM@OOAJLDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 63   : 		_STL_VERIFY(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast,

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN13@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	64					; 00000040H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	64					; 00000040H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NM@OOAJLDEF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H

; 64   : 			"can't dereference out of range vector iterator");

	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 65   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 66   : 
; 67   : 		return (_Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 68   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPBUSNeuron@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 41   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 43   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 44   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >, COMDAT
; _this$ = ecx

; 37   : 		{	// construct with null pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 36   : 		: _Ptr()

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 38   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Tmp$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-, COMDAT
; _this$ = ecx

; 310  : 		{	// return this - integer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 311  : 		_Vector_iterator _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 312  : 		return (_Tmp -= _Off);

	mov	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-=
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 313  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__ehhandler$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-=, COMDAT
; _this$ = ecx

; 305  : 		{	// decrement by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 306  : 		return (*this += -_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=

; 307  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=, COMDAT
; _this$ = ecx

; 293  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 		*(_Mybase *)this += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=

; 295  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 296  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++, COMDAT
; _this$ = ecx

; 267  : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 		++*(_Mybase *)this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++

; 269  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 270  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*, COMDAT
; _this$ = ecx

; 257  : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 258  : 		return (const_cast<reference>(_Mybase::operator*()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*

; 259  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx

; 253  : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		: _Mybase(_Parg, _Pvector)

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >

; 254  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx

; 247  : 	_Vector_iterator()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 248  : 		{	// construct with null vector pointer

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >

; 249  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Compat, COMDAT
; _this$ = ecx

; 195  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@Compat:

; 196  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 197  : 		(void)_Right;
; 198  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 199  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "vector iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@Compat
	jmp	SHORT $LN2@Compat
$LN7@Compat:
	push	OFFSET ??_C@_0BO@CAOBBIOC@vector?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	199					; 000000c7H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Compat
	int	3
$LN11@Compat:
	push	0
	push	199					; 000000c7H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1ME@OFGOCAMP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1EA@DJDGNIII@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Compat
$LN2@Compat:
	xor	edx, edx
	jne	SHORT $LN4@Compat

; 200  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 201  : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator!=, COMDAT
; _this$ = ecx

; 169  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 171  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator==, COMDAT
; _this$ = ecx

; 163  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Compat

; 165  : 		return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 166  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=, COMDAT
; _this$ = ecx

; 128  : 		{	// increment by integer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 		_Verify_offset(_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXH@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Verify_offset

; 130  : 		_Ptr += _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Off$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 131  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 132  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXH@Z
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXH@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Verify_offset, COMDAT
; _this$ = ecx

; 109  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 110  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 111  : 		(void)_Off;
; 112  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 113  : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@Verify_off:

; 114  : 		_STL_VERIFY(_Off == 0 || _Ptr, "cannot seek value-initialized vector iterator");

	cmp	DWORD PTR __Off$[ebp], 0
	je	SHORT $LN22@Verify_off
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@Verify_off
$LN22@Verify_off:
	jmp	SHORT $LN2@Verify_off
$LN7@Verify_off:
	push	OFFSET ??_C@_0CO@LHPFLLJB@cannot?5seek?5value?9initialized?5v@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	114					; 00000072H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN30@Verify_off
	int	3
$LN30@Verify_off:
	push	0
	push	114					; 00000072H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NC@HMKFOKIL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GA@EIHBFEJD@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAa@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@Verify_off
$LN2@Verify_off:
	xor	eax, eax
	jne	SHORT $LN4@Verify_off

; 115  : 		if (_Off < 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jge	SHORT $LN23@Verify_off
$LN10@Verify_off:

; 116  : 			{
; 117  : 			_STL_VERIFY(_Off >= _Mycont->_Myfirst - _Ptr, "cannot seek vector iterator before begin");

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 3
	cmp	DWORD PTR __Off$[ebp], eax
	jl	SHORT $LN13@Verify_off
	jmp	SHORT $LN8@Verify_off
$LN13@Verify_off:
	push	OFFSET ??_C@_0CJ@DIFMEJBE@cannot?5seek?5vector?5iterator?5bef@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	117					; 00000075H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN31@Verify_off
	int	3
$LN31@Verify_off:
	push	0
	push	117					; 00000075H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NC@HMKFOKIL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1FG@JCGKNFIB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@Verify_off
$LN8@Verify_off:
	xor	eax, eax
	jne	SHORT $LN10@Verify_off
$LN23@Verify_off:

; 118  : 			}
; 119  : 
; 120  : 		if (_Off > 0)

	cmp	DWORD PTR __Off$[ebp], 0
	jle	SHORT $LN1@Verify_off
$LN16@Verify_off:

; 121  : 			{
; 122  : 			_STL_VERIFY(_Off <= _Mycont->_Mylast - _Ptr, "cannot seek vector iterator after end");

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+8]
	sar	eax, 3
	cmp	DWORD PTR __Off$[ebp], eax
	jg	SHORT $LN19@Verify_off
	jmp	SHORT $LN14@Verify_off
$LN19@Verify_off:
	push	OFFSET ??_C@_0CG@JDIOCKHH@cannot?5seek?5vector?5iterator?5aft@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	122					; 0000007aH
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN32@Verify_off
	int	3
$LN32@Verify_off:
	push	0
	push	122					; 0000007aH
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NC@HMKFOKIL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1FA@LCODAPOP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAv?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN19@Verify_off
$LN14@Verify_off:
	xor	eax, eax
	jne	SHORT $LN16@Verify_off
$LN1@Verify_off:

; 123  : 			}
; 124  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 125  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Verify_offset@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEXH@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++, COMDAT
; _this$ = ecx

; 71   : 		{	// preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 72   :  #if _ITERATOR_DEBUG_LEVEL != 0
; 73   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 74   : 		_STL_VERIFY(_Ptr, "can't increment value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DC@KEKNBAEB@can?8t?5increment?5value?9initializ@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	74					; 0000004aH
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	74					; 0000004aH
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1MM@GONDLIIM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GI@EDCILPL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 75   : 		_STL_VERIFY(_Ptr < _Mycont->_Mylast, "can't increment vector iterator past end");

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CJ@OAAAAGPM@can?8t?5increment?5vector?5iterator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	75					; 0000004bH
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1MM@GONDLIIM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1FG@LDPPKMGP@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 76   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 77   : 
; 78   : 		++_Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 79   : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 80   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*, COMDAT
; _this$ = ecx

; 47   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 48   :  #if _ITERATOR_DEBUG_LEVEL != 0
; 49   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 50   : 		_STL_VERIFY(_Ptr, "can't dereference value-initialized vector iterator");

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DE@CHADHGFF@can?8t?5dereference?5value?9initial@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	50					; 00000032H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	50					; 00000032H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GM@FNBFNBEL@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN10@operator:

; 51   : 		_STL_VERIFY(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast,

	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [edx+8]
	ja	SHORT $LN13@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Mycont$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CP@MDHADBHN@can?8t?5dereference?5out?5of?5range?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	52					; 00000034H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	52					; 00000034H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1MK@MNACACDL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo@
	push	OFFSET ??_C@_1GC@JDCKOLAC@?$AA?$CC?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H

; 52   : 			"can't dereference out of range vector iterator");

	xor	edx, edx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	eax, eax
	jne	SHORT $LN10@operator

; 53   :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 54   : 
; 55   : 		return (*_Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]

; 56   : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEABNXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx

; 42   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 41   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 43   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 44   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >, COMDAT
; _this$ = ecx

; 37   : 		{	// construct with null pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12

; 36   : 		: _Ptr()

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 38   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
$T2 = -66						; size = 1
$T3 = -65						; size = 1
_SetOut$ = -60						; size = 16
_SetIn$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
?Train@CNeuralNet@@QAE_NPAVCData@@@Z PROC		; CNeuralNet::Train
; _this$ = ecx

; 298  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Train@CNeuralNet@@QAE_NPAVCData@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 299  :   vector<vector<double> > SetIn  = data->GetInputSet();

	lea	eax, DWORD PTR _SetIn$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	?GetInputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ ; CData::GetInputSet
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 300  :   vector<vector<double> > SetOut = data->GetOutputSet();

	lea	ecx, DWORD PTR _SetOut$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?GetOutputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ ; CData::GetOutputSet
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 301  : 
; 302  :    //initialize all the weights to small random values
; 303  :    InitializeNetwork();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitializeNetwork@CNeuralNet@@AAEXXZ	; CNeuralNet::InitializeNetwork
$LN2@Train:

; 304  : 
; 305  :    //train using backprop until the SSE is below the user defined
; 306  :    //threshold
; 307  :    while( m_dErrorSum > ERROR_THRESHOLD)

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [edx+24]
	comisd	xmm0, QWORD PTR __real@3f689374bc6a7efa
	jbe	SHORT $LN3@Train

; 308  :    {
; 309  :      //return false if there are any problems
; 310  :      if (!NetworkTrainingEpoch(SetIn, SetOut))

	lea	eax, DWORD PTR _SetOut$[ebp]
	push	eax
	lea	ecx, DWORD PTR _SetIn$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z ; CNeuralNet::NetworkTrainingEpoch
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN4@Train

; 311  :      {
; 312  :        return false;

	mov	BYTE PTR $T3[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _SetOut$[ebp]
	call	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _SetIn$[ebp]
	call	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	al, BYTE PTR $T3[ebp]
	jmp	SHORT $LN1@Train
$LN4@Train:

; 313  :      }
; 314  : 
; 315  :      ++m_iNumEpochs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], ecx

; 316  : 	 if (m_iNumEpochs > MAX_EPOQUE)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 200			; 000000c8H
	jle	SHORT $LN5@Train

; 317  : 		 break;

	jmp	SHORT $LN3@Train
$LN5@Train:

; 318  :    }

	jmp	SHORT $LN2@Train
$LN3@Train:

; 319  : 
; 320  :    m_bTrained = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 1

; 321  :    
; 322  :    return true;

	mov	BYTE PTR $T2[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _SetOut$[ebp]
	call	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _SetIn$[ebp]
	call	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	al, BYTE PTR $T2[ebp]
$LN1@Train:

; 323  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Train
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN13@Train:
	DD	2
	DD	$LN12@Train
$LN12@Train:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN9@Train
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN10@Train
$LN10@Train:
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN9@Train:
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Train@CNeuralNet@@QAE_NPAVCData@@@Z$0:
	lea	ecx, DWORD PTR _SetIn$[ebp]
	jmp	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
__unwindfunclet$?Train@CNeuralNet@@QAE_NPAVCData@@@Z$1:
	lea	ecx, DWORD PTR _SetOut$[ebp]
	jmp	??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
__ehhandler$?Train@CNeuralNet@@QAE_NPAVCData@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Train@CNeuralNet@@QAE_NPAVCData@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Train@CNeuralNet@@QAE_NPAVCData@@@Z ENDP		; CNeuralNet::Train
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
tv270 = -84						; size = 8
tv150 = -76						; size = 4
$T2 = -72						; size = 4
_k$3 = -68						; size = 4
_NumInputs$4 = -64					; size = 4
_netinput$5 = -60					; size = 8
_n$6 = -52						; size = 4
_i$7 = -48						; size = 4
_cWeight$ = -44						; size = 4
_outputs$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_inputs$ = 12						; size = 16
?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z PROC ; CNeuralNet::Update
; _this$ = ecx

; 126  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 127  : 	//stores the resultant outputs from each layer
; 128  : 	vector<double> outputs;

	lea	ecx, DWORD PTR _outputs$[ebp]
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 129  : 
; 130  : 	int cWeight = 0;

	mov	DWORD PTR _cWeight$[ebp], 0

; 131  : 	
; 132  : 	//first check that we have the correct amount of inputs
; 133  : 	if (inputs.size() != m_iNumInputs)

	lea	ecx, DWORD PTR _inputs$[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN11@Update

; 134  :   {
; 135  : 		//just return an empty vector if incorrect.
; 136  : 		return outputs;

	lea	edx, DWORD PTR _outputs$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outputs$[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inputs$[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@Update
$LN11@Update:

; 137  :   }
; 138  : 	
; 139  : 	//For each layer...
; 140  : 	for (int i=0; i<m_iNumHiddenLayers + 1; ++i)

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@Update
$LN2@Update:
	mov	ecx, DWORD PTR _i$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$7[ebp], ecx
$LN4@Update:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	cmp	DWORD PTR _i$7[ebp], eax
	jge	$LN3@Update

; 141  : 	{
; 142  : 		
; 143  : 		if ( i > 0 )

	cmp	DWORD PTR _i$7[ebp], 0
	jle	SHORT $LN12@Update

; 144  : 		{
; 145  : 			inputs = outputs;

	lea	ecx, DWORD PTR _outputs$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inputs$[ebp]
	call	??4?$vector@NV?$allocator@N@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<double,std::allocator<double> >::operator=
$LN12@Update:

; 146  : 		}
; 147  : 
; 148  : 		outputs.clear();

	lea	ecx, DWORD PTR _outputs$[ebp]
	call	?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ ; std::vector<double,std::allocator<double> >::clear

; 149  : 		
; 150  : 		cWeight = 0;

	mov	DWORD PTR _cWeight$[ebp], 0

; 151  : 
; 152  : 		//for each neuron sum the (inputs * corresponding weights).Throw 
; 153  : 		//the total at our sigmoid function to get the output.
; 154  : 		for (int n=0; n<m_vecLayers[i].m_iNumNeurons; ++n)

	mov	DWORD PTR _n$6[ebp], 0
	jmp	SHORT $LN7@Update
$LN5@Update:
	mov	edx, DWORD PTR _n$6[ebp]
	add	edx, 1
	mov	DWORD PTR _n$6[ebp], edx
$LN7@Update:
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	mov	ecx, DWORD PTR _n$6[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN6@Update

; 155  : 		{
; 156  : 			double netinput = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _netinput$5[ebp], xmm0

; 157  : 
; 158  : 			int	NumInputs = m_vecLayers[i].m_vecNeurons[n].m_iNumInputs;

	mov	edx, DWORD PTR _n$6[ebp]
	push	edx
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _NumInputs$4[ebp], ecx

; 159  : 			
; 160  : 			//for each weight
; 161  : 			for (int k=0; k<NumInputs - 1; ++k)

	mov	DWORD PTR _k$3[ebp], 0
	jmp	SHORT $LN10@Update
$LN8@Update:
	mov	edx, DWORD PTR _k$3[ebp]
	add	edx, 1
	mov	DWORD PTR _k$3[ebp], edx
$LN10@Update:
	mov	eax, DWORD PTR _NumInputs$4[ebp]
	sub	eax, 1
	cmp	DWORD PTR _k$3[ebp], eax
	jge	SHORT $LN9@Update

; 162  : 			{
; 163  : 				//sum the weights x inputs
; 164  : 				netinput += m_vecLayers[i].m_vecNeurons[n].m_vecWeight[k] * inputs[cWeight++];

	mov	ecx, DWORD PTR _cWeight$[ebp]
	mov	DWORD PTR tv150[ebp], ecx
	mov	edx, DWORD PTR _cWeight$[ebp]
	add	edx, 1
	mov	DWORD PTR _cWeight$[ebp], edx
	mov	eax, DWORD PTR tv150[ebp]
	push	eax
	lea	ecx, DWORD PTR _inputs$[ebp]
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _k$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$6[ebp]
	push	edx
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [esi]
	addsd	xmm0, QWORD PTR _netinput$5[ebp]
	movsd	QWORD PTR _netinput$5[ebp], xmm0

; 165  : 			}

	jmp	SHORT $LN8@Update
$LN9@Update:

; 166  : 
; 167  : 			//add in the bias
; 168  : 			netinput += m_vecLayers[i].m_vecNeurons[n].m_vecWeight[NumInputs-1] * BIAS;

	mov	ecx, DWORD PTR _NumInputs$4[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _n$6[ebp]
	push	edx
	mov	eax, DWORD PTR _i$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR __real@bff0000000000000
	addsd	xmm0, QWORD PTR _netinput$5[ebp]
	movsd	QWORD PTR _netinput$5[ebp], xmm0

; 169  : 
; 170  : 			 
; 171  : 			//The combined activation is first filtered through the sigmoid 
; 172  : 			//function and a record is kept for each neuron 
; 173  : 			m_vecLayers[i].m_vecNeurons[n].m_dActivation = Sigmoid(netinput, ACTIVATION_RESPONSE);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _netinput$5[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Sigmoid@CNeuralNet@@AAENNN@Z		; CNeuralNet::Sigmoid
	mov	ecx, DWORD PTR _n$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	fstp	QWORD PTR tv270[ebp]
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	fld	QWORD PTR tv270[ebp]
	fstp	QWORD PTR [eax+24]

; 174  : 
; 175  : 			//store the outputs from each layer as we generate them.
; 176  : 			outputs.push_back(m_vecLayers[i].m_vecNeurons[n].m_dActivation);

	mov	eax, DWORD PTR _n$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	add	eax, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _outputs$[ebp]
	call	?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEXABN@Z ; std::vector<double,std::allocator<double> >::push_back

; 177  : 
; 178  : 			cWeight = 0;

	mov	DWORD PTR _cWeight$[ebp], 0

; 179  : 		}

	jmp	$LN5@Update
$LN6@Update:

; 180  : 	}

	jmp	$LN2@Update
$LN3@Update:

; 181  : 
; 182  : 	return outputs;

	lea	edx, DWORD PTR _outputs$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outputs$[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inputs$[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Update:

; 183  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN21@Update:
	DD	1
	DD	$LN20@Update
$LN20@Update:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN18@Update
$LN18@Update:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z$0:
	lea	ecx, DWORD PTR _inputs$[ebp]
	jmp	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z$1:
	lea	ecx, DWORD PTR _outputs$[ebp]
	jmp	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__ehhandler$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-84]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z ENDP ; CNeuralNet::Update
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_NumInputs$ = 8						; size = 4
_NumOutputs$ = 12					; size = 4
_HiddenNeurons$ = 16					; size = 4
_LearningRate$ = 20					; size = 8
??0CNeuralNet@@QAE@HHHN@Z PROC				; CNeuralNet::CNeuralNet
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CNeuralNet@@QAE@HHHN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 50   :                        double LearningRate):m_iNumInputs(NumInputs),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NumInputs$[ebp]
	mov	DWORD PTR [eax], ecx

; 51   :                                             m_iNumOutputs(NumOutputs),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _NumOutputs$[ebp]
	mov	DWORD PTR [edx+4], eax

; 52   :                                             m_iNumHiddenLayers(1),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1

; 53   :                                             m_iNeuronsPerHiddenLyr(HiddenNeurons),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _HiddenNeurons$[ebp]
	mov	DWORD PTR [edx+12], eax

; 54   :                                             m_dLearningRate(LearningRate),

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _LearningRate$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0

; 55   :                                             m_dErrorSum(9999),

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40c3878000000000
	movsd	QWORD PTR [edx+24], xmm0

; 56   :                                             m_bTrained(false),

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0

; 57   :                                             m_iNumEpochs(0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 58   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::vector<SNeuronLayer,std::allocator<SNeuronLayer> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 59   : 	CreateNet();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateNet@CNeuralNet@@AAEXXZ		; CNeuralNet::CreateNet

; 60   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CNeuralNet@@QAE@HHHN@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::~vector<SNeuronLayer,std::allocator<SNeuronLayer> >
__ehhandler$??0CNeuralNet@@QAE@HHHN@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CNeuralNet@@QAE@HHHN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CNeuralNet@@QAE@HHHN@Z ENDP				; CNeuralNet::CNeuralNet
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
;	COMDAT ?Sigmoid@CNeuralNet@@AAENNN@Z
_TEXT	SEGMENT
tv81 = -20						; size = 8
tv77 = -12						; size = 8
_this$ = -4						; size = 4
_netinput$ = 8						; size = 8
_response$ = 16						; size = 8
?Sigmoid@CNeuralNet@@AAENNN@Z PROC			; CNeuralNet::Sigmoid, COMDAT
; _this$ = ecx

; 330  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 331  : 	return ( 1 / ( 1 + exp(-netinput / response)));

	movsd	xmm0, QWORD PTR _netinput$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, QWORD PTR _response$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	movsd	QWORD PTR tv81[ebp], xmm1
	fld	QWORD PTR tv81[ebp]

; 332  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Sigmoid@CNeuralNet@@AAENNN@Z ENDP			; CNeuralNet::Sigmoid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
tv161 = -24						; size = 8
_k$1 = -16						; size = 4
_n$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
?InitializeNetwork@CNeuralNet@@AAEXXZ PROC		; CNeuralNet::InitializeNetwork
; _this$ = ecx

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 	//for each layer
; 101  : 	for (int i=0; i<m_iNumHiddenLayers + 1; ++i)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Initialize
$LN2@Initialize:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Initialize:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	cmp	DWORD PTR _i$3[ebp], edx
	jge	$LN3@Initialize

; 102  : 	{
; 103  : 		//for each neuron
; 104  : 		for (int n=0; n<m_vecLayers[i].m_iNumNeurons; ++n)

	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN7@Initialize
$LN5@Initialize:
	mov	eax, DWORD PTR _n$2[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
$LN7@Initialize:
	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	mov	edx, DWORD PTR _n$2[ebp]
	cmp	edx, DWORD PTR [eax]
	jge	SHORT $LN6@Initialize

; 105  : 		{
; 106  : 			//for each weight
; 107  : 			for (int k=0; k<m_vecLayers[i].m_vecNeurons[n].m_iNumInputs; ++k)

	mov	DWORD PTR _k$1[ebp], 0
	jmp	SHORT $LN10@Initialize
$LN8@Initialize:
	mov	eax, DWORD PTR _k$1[ebp]
	add	eax, 1
	mov	DWORD PTR _k$1[ebp], eax
$LN10@Initialize:
	mov	ecx, DWORD PTR _n$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	mov	ecx, DWORD PTR _k$1[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN9@Initialize

; 108  : 			{
; 109  : 				m_vecLayers[i].m_vecNeurons[n].m_vecWeight[k] = RandomClamped();

	call	?RandomClamped@@YANXZ			; RandomClamped
	mov	edx, DWORD PTR _k$1[ebp]
	push	edx
	mov	eax, DWORD PTR _n$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	fstp	QWORD PTR tv161[ebp]
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	fld	QWORD PTR tv161[ebp]
	fstp	QWORD PTR [eax]

; 110  : 			}

	jmp	SHORT $LN8@Initialize
$LN9@Initialize:

; 111  : 		}

	jmp	$LN5@Initialize
$LN6@Initialize:

; 112  : 	}

	jmp	$LN2@Initialize
$LN3@Initialize:

; 113  : 
; 114  :   m_dErrorSum  = 9999;

	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@40c3878000000000
	movsd	QWORD PTR [edx+24], xmm0

; 115  :   m_iNumEpochs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 116  : 
; 117  : 	return;
; 118  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitializeNetwork@CNeuralNet@@AAEXXZ ENDP		; CNeuralNet::InitializeNetwork
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
tv153 = -132						; size = 4
tv157 = -128						; size = 4
tv151 = -124						; size = 4
tv156 = -120						; size = 4
tv149 = -116						; size = 4
tv155 = -112						; size = 4
tv147 = -108						; size = 4
tv154 = -104						; size = 4
$T2 = -100						; size = 20
$T3 = -80						; size = 20
$T4 = -60						; size = 20
$T5 = -40						; size = 20
_i$6 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateNet@CNeuralNet@@AAEXXZ PROC			; CNeuralNet::CreateNet
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateNet@CNeuralNet@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 69   : 	//create the layers of the network
; 70   : 	if (m_iNumHiddenLayers > 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jle	$LN5@CreateNet

; 71   : 	{
; 72   : 		//create first hidden layer
; 73   : 		m_vecLayers.push_back(SNeuronLayer(m_iNeuronsPerHiddenLyr, m_iNumInputs));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0SNeuronLayer@@QAE@HH@Z		; SNeuronLayer::SNeuronLayer
	mov	DWORD PTR tv154[ebp], eax
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR tv147[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv147[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1SNeuronLayer@@QAE@XZ

; 74   :     
; 75   : 		for (int i=0; i<m_iNumHiddenLayers-1; ++i)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@CreateNet
$LN2@CreateNet:
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6[ebp], ecx
$LN4@CreateNet:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	cmp	DWORD PTR _i$6[ebp], eax
	jge	SHORT $LN3@CreateNet

; 76   : 		{
; 77   : 
; 78   : 				m_vecLayers.push_back(SNeuronLayer(m_iNeuronsPerHiddenLyr,

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0SNeuronLayer@@QAE@HH@Z		; SNeuronLayer::SNeuronLayer
	mov	DWORD PTR tv155[ebp], eax
	mov	edx, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv149[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv149[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1SNeuronLayer@@QAE@XZ

; 79   : 											 m_iNeuronsPerHiddenLyr));
; 80   : 		}

	jmp	SHORT $LN2@CreateNet
$LN3@CreateNet:

; 81   : 
; 82   : 		//create output layer
; 83   : 		m_vecLayers.push_back(SNeuronLayer(m_iNumOutputs, m_iNeuronsPerHiddenLyr));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0SNeuronLayer@@QAE@HH@Z		; SNeuronLayer::SNeuronLayer
	mov	DWORD PTR tv156[ebp], eax
	mov	edx, DWORD PTR tv156[ebp]
	mov	DWORD PTR tv151[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR tv151[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1SNeuronLayer@@QAE@XZ

; 84   : 	}
; 85   : 
; 86   :   else

	jmp	SHORT $LN1@CreateNet
$LN5@CreateNet:

; 87   :   {
; 88   : 	  //create output layer
; 89   : 	  m_vecLayers.push_back(SNeuronLayer(m_iNumOutputs, m_iNumInputs));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0SNeuronLayer@@QAE@HH@Z		; SNeuronLayer::SNeuronLayer
	mov	DWORD PTR tv157[ebp], eax
	mov	edx, DWORD PTR tv157[ebp]
	mov	DWORD PTR tv153[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR tv153[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1SNeuronLayer@@QAE@XZ
$LN1@CreateNet:

; 90   :   }
; 91   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$0:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1SNeuronLayer@@QAE@XZ
__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$1:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1SNeuronLayer@@QAE@XZ
__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$2:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1SNeuronLayer@@QAE@XZ
__unwindfunclet$?CreateNet@CNeuralNet@@AAEXXZ$3:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1SNeuronLayer@@QAE@XZ
__ehhandler$?CreateNet@CNeuralNet@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateNet@CNeuralNet@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateNet@CNeuralNet@@AAEXXZ ENDP			; CNeuralNet::CreateNet
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
tv390 = -360						; size = 4
tv625 = -356						; size = 8
tv378 = -348						; size = 4
tv420 = -344						; size = 4
tv424 = -340						; size = 4
tv418 = -336						; size = 4
tv416 = -332						; size = 4
tv65 = -328						; size = 4
tv414 = -324						; size = 4
tv267 = -320						; size = 4
tv623 = -316						; size = 8
tv258 = -308						; size = 4
tv412 = -304						; size = 4
tv68 = -300						; size = 4
tv410 = -296						; size = 4
tv71 = -292						; size = 4
tv408 = -288						; size = 4
tv406 = -284						; size = 4
tv621 = -280						; size = 8
tv619 = -272						; size = 8
tv617 = -264						; size = 8
tv399 = -256						; size = 4
$T2 = -249						; size = 1
$T3 = -248						; size = 12
$T4 = -233						; size = 1
$T5 = -232						; size = 12
$T6 = -220						; size = 12
$T7 = -205						; size = 1
$T8 = -204						; size = 12
$T9 = -192						; size = 12
$T10 = -180						; size = 12
$T11 = -165						; size = 1
$T12 = -164						; size = 12
$T13 = -152						; size = 12
$T14 = -137						; size = 1
$T15 = -136						; size = 4
_w$16 = -132						; size = 4
_err$17 = -128						; size = 8
_n$18 = -120						; size = 4
_err$19 = -116						; size = 8
_op$20 = -108						; size = 4
_outputs$21 = -100					; size = 16
_vec$22 = -80						; size = 4
_curNrnHid$ = -72					; size = 12
_curNrnOut$ = -52					; size = 12
_curWeight$ = -32					; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_SetIn$ = 8						; size = 4
_SetOut$ = 12						; size = 4
?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z PROC ; CNeuralNet::NetworkTrainingEpoch
; _this$ = ecx

; 193  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 348				; 0000015cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 194  :   //create some iterators
; 195  :   vector<double>::iterator  curWeight;

	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 196  :   vector<SNeuron>::iterator curNrnOut, curNrnHid;

	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 197  : 
; 198  :   //this will hold the cumulative error value for the training set
; 199  :   m_dErrorSum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+24], xmm0

; 200  : 
; 201  :   //run each input pattern through the network, calculate the errors and update
; 202  :   //the weights accordingly
; 203  :   for (int vec=0; vec<SetIn.size(); ++vec)

	mov	DWORD PTR _vec$22[ebp], 0
	jmp	SHORT $LN4@NetworkTra
$LN2@NetworkTra:
	mov	ecx, DWORD PTR _vec$22[ebp]
	add	ecx, 1
	mov	DWORD PTR _vec$22[ebp], ecx
$LN4@NetworkTra:
	mov	ecx, DWORD PTR _SetIn$[ebp]
	call	?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::size
	cmp	DWORD PTR _vec$22[ebp], eax
	jae	$LN3@NetworkTra

; 204  :   {
; 205  :     //first run this input vector through the network and retrieve the outputs
; 206  :     vector<double> outputs = Update(SetIn[vec]);

	sub	esp, 16					; 00000010H
	mov	esi, esp
	mov	DWORD PTR $T15[ebp], esp
	mov	edx, DWORD PTR _vec$22[ebp]
	push	edx
	mov	ecx, DWORD PTR _SetIn$[ebp]
	call	??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
	push	eax
	mov	ecx, esi
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
	lea	eax, DWORD PTR _outputs$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CNeuralNet@@QAE?AV?$vector@NV?$allocator@N@std@@@std@@V23@@Z ; CNeuralNet::Update
	mov	DWORD PTR tv399[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 207  : 
; 208  :     //return if error has occurred
; 209  :     if (outputs.size() == 0)

	lea	ecx, DWORD PTR _outputs$21[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	test	eax, eax
	jne	SHORT $LN17@NetworkTra

; 210  :     {
; 211  :       return false;

	mov	BYTE PTR $T14[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _outputs$21[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	mov	al, BYTE PTR $T14[ebp]
	jmp	$LN1@NetworkTra
$LN17@NetworkTra:

; 212  :     }
; 213  : 
; 214  :     //for each output neuron calculate the error and adjust weights
; 215  :     //accordingly
; 216  :     for (int op=0; op<m_iNumOutputs; ++op)

	mov	DWORD PTR _op$20[ebp], 0
	jmp	SHORT $LN7@NetworkTra
$LN5@NetworkTra:
	mov	ecx, DWORD PTR _op$20[ebp]
	add	ecx, 1
	mov	DWORD PTR _op$20[ebp], ecx
$LN7@NetworkTra:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _op$20[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	$LN6@NetworkTra

; 217  :     {
; 218  :       //first calculate the error value
; 219  :       double err = (SetOut[vec][op] - outputs[op]) * outputs[op] * (1 - outputs[op]);     

	mov	ecx, DWORD PTR _op$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _vec$22[ebp]
	push	edx
	mov	ecx, DWORD PTR _SetOut$[ebp]
	call	??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _op$20[ebp]
	push	eax
	lea	ecx, DWORD PTR _outputs$21[ebp]
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR [esi]
	subsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _op$20[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outputs$21[ebp]
	movsd	QWORD PTR tv617[ebp], xmm0
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR tv617[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	mov	edx, DWORD PTR _op$20[ebp]
	push	edx
	lea	ecx, DWORD PTR _outputs$21[ebp]
	movsd	QWORD PTR tv619[ebp], xmm0
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR tv619[ebp]
	mulsd	xmm1, xmm0
	movsd	QWORD PTR _err$19[ebp], xmm1

; 220  : 
; 221  :       //keep a record of the error value
; 222  :       m_vecLayers[1].m_vecNeurons[op].m_dError = err;

	mov	eax, DWORD PTR _op$20[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	movsd	xmm0, QWORD PTR _err$19[ebp]
	movsd	QWORD PTR [eax+32], xmm0

; 223  : 
; 224  :       //update the SSE. (when this value becomes lower than a
; 225  :       //preset threshold we know the training is successful)
; 226  :       m_dErrorSum += (SetOut[vec][op] - outputs[op]) * (SetOut[vec][op] - outputs[op]); 

	mov	ecx, DWORD PTR _op$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _vec$22[ebp]
	push	edx
	mov	ecx, DWORD PTR _SetOut$[ebp]
	call	??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _op$20[ebp]
	push	eax
	lea	ecx, DWORD PTR _outputs$21[ebp]
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR [esi]
	subsd	xmm0, QWORD PTR [eax]
	mov	ecx, DWORD PTR _op$20[ebp]
	push	ecx
	mov	edx, DWORD PTR _vec$22[ebp]
	push	edx
	mov	ecx, DWORD PTR _SetOut$[ebp]
	movsd	QWORD PTR tv621[ebp], xmm0
	call	??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _op$20[ebp]
	push	eax
	lea	ecx, DWORD PTR _outputs$21[ebp]
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR [esi]
	subsd	xmm0, QWORD PTR [eax]
	movsd	xmm1, QWORD PTR tv621[ebp]
	mulsd	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	addsd	xmm1, QWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [edx+24], xmm1

; 227  : 
; 228  :       curWeight = m_vecLayers[1].m_vecNeurons[op].m_vecWeight.begin();

	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$20[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::begin
	mov	DWORD PTR tv406[ebp], eax
	mov	edx, DWORD PTR tv406[ebp]
	push	edx
	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T13[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ

; 229  :       curNrnHid = m_vecLayers[0].m_vecNeurons.begin();

	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::begin
	mov	DWORD PTR tv408[ebp], eax
	mov	ecx, DWORD PTR tv408[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T12[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
$LN8@NetworkTra:

; 230  : 
; 231  :       //for each weight up to but not including the bias
; 232  :       while(curWeight != m_vecLayers[1].m_vecNeurons[op].m_vecWeight.end()-1)

	push	1
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$20[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ; std::vector<double,std::allocator<double> >::end
	mov	DWORD PTR tv71[ebp], eax
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR tv410[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR tv410[ebp]
	call	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator-
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv412[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR tv412[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator!=
	mov	BYTE PTR $T11[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T10[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T11[ebp]
	test	edx, edx
	je	SHORT $LN9@NetworkTra

; 233  :       {
; 234  :         //calculate the new weight based on the backprop rules
; 235  :         *curWeight += err * m_dLearningRate * curNrnHid->m_dActivation;

	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
	mov	DWORD PTR tv258[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _err$19[ebp]
	mulsd	xmm0, QWORD PTR [eax+16]
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	movsd	QWORD PTR tv623[ebp], xmm0
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	movsd	xmm0, QWORD PTR tv623[ebp]
	mulsd	xmm0, QWORD PTR [eax+24]
	mov	ecx, DWORD PTR tv258[ebp]
	addsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR tv258[ebp]
	movsd	QWORD PTR [edx], xmm0

; 236  : 
; 237  :         ++curWeight; ++curNrnHid;

	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator++
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++

; 238  :       }

	jmp	$LN8@NetworkTra
$LN9@NetworkTra:

; 239  : 
; 240  :       //and the bias for this neuron
; 241  :       *curWeight += err * m_dLearningRate * BIAS;     

	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QBEAANXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::operator*
	mov	DWORD PTR tv267[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _err$19[ebp]
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR tv267[ebp]
	addsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR tv267[ebp]
	movsd	QWORD PTR [edx], xmm0

; 242  :     }

	jmp	$LN5@NetworkTra
$LN6@NetworkTra:

; 243  : 
; 244  :    //**moving backwards to the hidden layer**
; 245  :     curNrnHid = m_vecLayers[0].m_vecNeurons.begin();

	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::begin
	mov	DWORD PTR tv414[ebp], eax
	mov	ecx, DWORD PTR tv414[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ

; 246  : 
; 247  :     int n = 0;

	mov	DWORD PTR _n$18[ebp], 0
$LN10@NetworkTra:

; 248  :     
; 249  :     //for each neuron in the hidden layer calculate the error signal
; 250  :     //and then adjust the weights accordingly
; 251  :     while(curNrnHid != m_vecLayers[0].m_vecNeurons.end())

	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::end
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv416[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR tv416[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator!=
	mov	BYTE PTR $T7[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T7[ebp]
	test	edx, edx
	je	$LN11@NetworkTra

; 252  :     {
; 253  :       double err = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _err$17[ebp], xmm0

; 254  : 
; 255  :       curNrnOut = m_vecLayers[1].m_vecNeurons.begin();

	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::begin
	mov	DWORD PTR tv418[ebp], eax
	mov	ecx, DWORD PTR tv418[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
$LN12@NetworkTra:

; 256  : 
; 257  :       //to calculate the error for this neuron we need to iterate through
; 258  :       //all the neurons in the output layer it is connected to and sum
; 259  :       //the error * weights
; 260  :       while(curNrnOut != m_vecLayers[1].m_vecNeurons.end())

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
	add	eax, 4
	mov	ecx, eax
	call	?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::end
	mov	DWORD PTR tv424[ebp], eax
	mov	eax, DWORD PTR tv424[ebp]
	mov	DWORD PTR tv420[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR tv420[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator!=
	mov	BYTE PTR $T4[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T4[ebp]
	test	edx, edx
	je	SHORT $LN13@NetworkTra

; 261  :       {
; 262  :         err += curNrnOut->m_dError * curNrnOut->m_vecWeight[n];

	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	mov	esi, eax
	mov	eax, DWORD PTR _n$18[ebp]
	push	eax
	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR [esi+32]
	mulsd	xmm0, QWORD PTR [eax]
	addsd	xmm0, QWORD PTR _err$17[ebp]
	movsd	QWORD PTR _err$17[ebp], xmm0

; 263  : 
; 264  :         ++curNrnOut;

	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++

; 265  :       }

	jmp	$LN12@NetworkTra
$LN13@NetworkTra:

; 266  : 
; 267  :       //now we can calculate the error
; 268  :       err *= curNrnHid->m_dActivation * (1 - curNrnHid->m_dActivation);     

	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	mov	esi, eax
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	subsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, QWORD PTR [esi+24]
	mulsd	xmm0, QWORD PTR _err$17[ebp]
	movsd	QWORD PTR _err$17[ebp], xmm0

; 269  :       
; 270  :       //for each weight in this neuron calculate the new weight based
; 271  :       //on the error signal and the learning rate
; 272  :       for (int w=0; w<m_iNumInputs; ++w)

	mov	DWORD PTR _w$16[ebp], 0
	jmp	SHORT $LN16@NetworkTra
$LN14@NetworkTra:
	mov	ecx, DWORD PTR _w$16[ebp]
	add	ecx, 1
	mov	DWORD PTR _w$16[ebp], ecx
$LN16@NetworkTra:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _w$16[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN15@NetworkTra

; 273  :       {
; 274  :         //calculate the new weight based on the backprop rules
; 275  :         curNrnHid->m_vecWeight[w] += err * m_dLearningRate * SetIn[vec][w];

	mov	ecx, DWORD PTR _w$16[ebp]
	push	ecx
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	mov	DWORD PTR tv378[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _err$17[ebp]
	mulsd	xmm0, QWORD PTR [edx+16]
	mov	eax, DWORD PTR _w$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _vec$22[ebp]
	push	ecx
	mov	ecx, DWORD PTR _SetIn$[ebp]
	movsd	QWORD PTR tv625[ebp], xmm0
	call	??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	movsd	xmm0, QWORD PTR tv625[ebp]
	mulsd	xmm0, QWORD PTR [eax]
	mov	edx, DWORD PTR tv378[ebp]
	addsd	xmm0, QWORD PTR [edx]
	mov	eax, DWORD PTR tv378[ebp]
	movsd	QWORD PTR [eax], xmm0

; 276  :       }

	jmp	$LN14@NetworkTra
$LN15@NetworkTra:

; 277  : 
; 278  :       //and the bias
; 279  :       curNrnHid->m_vecWeight[m_iNumInputs] += err * m_dLearningRate * BIAS;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QBEPAUSNeuron@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator->
	add	eax, 4
	mov	ecx, eax
	call	??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ; std::vector<double,std::allocator<double> >::operator[]
	mov	DWORD PTR tv390[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _err$17[ebp]
	mulsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, QWORD PTR __real@bff0000000000000
	mov	ecx, DWORD PTR tv390[ebp]
	addsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR tv390[ebp]
	movsd	QWORD PTR [edx], xmm0

; 280  : 
; 281  :       ++curNrnHid;

	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::operator++

; 282  :       ++n;

	mov	eax, DWORD PTR _n$18[ebp]
	add	eax, 1
	mov	DWORD PTR _n$18[ebp], eax

; 283  :     }

	jmp	$LN10@NetworkTra
$LN11@NetworkTra:

; 284  : 
; 285  :   }//next input vector

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _outputs$21[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	jmp	$LN2@NetworkTra
$LN3@NetworkTra:

; 286  :   return true;

	mov	BYTE PTR $T2[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _curWeight$[ebp]
	call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
	mov	al, BYTE PTR $T2[ebp]
$LN1@NetworkTra:

; 287  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@NetworkTra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN38@NetworkTra:
	DD	4
	DD	$LN37@NetworkTra
$LN37@NetworkTra:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN32@NetworkTra
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN33@NetworkTra
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN34@NetworkTra
	DD	-100					; ffffff9cH
	DD	16					; 00000010H
	DD	$LN35@NetworkTra
$LN35@NetworkTra:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN34@NetworkTra:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	72					; 00000048H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN33@NetworkTra:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN32@NetworkTra:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	87					; 00000057H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$0:
	lea	ecx, DWORD PTR _curWeight$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$1:
	lea	ecx, DWORD PTR _curNrnOut$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$2:
	lea	ecx, DWORD PTR _curNrnHid$[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$4:
	lea	ecx, DWORD PTR _outputs$21[ebp]
	jmp	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$7:
	lea	ecx, DWORD PTR $T10[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$8:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$10:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z$12:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-360]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NetworkTrainingEpoch@CNeuralNet@@AAE_NAAV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@0@Z ENDP ; CNeuralNet::NetworkTrainingEpoch
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEXPAUSNeuronLayer@@0@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@CAXXZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@CAXXZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXXZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z ; std::allocator<SNeuronLayer>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXXZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXQAUSNeuronLayer@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXQAUSNeuronLayer@@II@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z ; std::allocator<SNeuronLayer>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

	imul	esi, DWORD PTR __Newsize$[ebp], 20
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

	imul	esi, DWORD PTR __Newcapacity$[ebp], 20
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1907 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXQAUSNeuronLayer@@II@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEII@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABEII@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@USNeuronLayer@@@std@@@std@@YAXPAUSNeuronLayer@@0AAV?$allocator@USNeuronLayer@@@0@@Z ; std::_Destroy_range<std::allocator<SNeuronLayer> >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@0@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00U?$integral_constant@_N$00@2@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@QAU1@0PAU1@AAV?$allocator@USNeuronLayer@@@0@@Z ; std::_Uninitialized_move<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
	add	esp, 16					; 00000010H

; 1834 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXPAUSNeuronLayer@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEPAUSNeuronLayer@@PAU3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEPAUSNeuronLayer@@PAU3@00@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUSNeuronLayer@@PAU1@V?$allocator@USNeuronLayer@@@std@@@std@@YAPAUSNeuronLayer@@QAU1@0PAU1@AAV?$allocator@USNeuronLayer@@@0@@Z ; std::_Uninitialized_move<SNeuronLayer *,SNeuronLayer *,std::allocator<SNeuronLayer> >
	add	esp, 16					; 00000010H

; 1829 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEPAUSNeuronLayer@@PAU3@00@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1LC@INEBDOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	imul	ecx, DWORD PTR __Pos$[ebp], 20
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1737 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEAAUSNeuronLayer@@I@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABE_NXZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1727 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@ABE_NXZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx

; 1716 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAIABV?$allocator@USNeuronLayer@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 20					; 00000014H
	idiv	ecx

; 1705 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QBEIXZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAUSNeuronLayer@@@std@@YA$$QAUSNeuronLayer@@AAU1@@Z ; std::move<SNeuronLayer &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@USNeuronLayer@@@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@$$QAUSNeuronLayer@@@Z ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::emplace_back<SNeuronLayer>

; 938  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAEX$$QAUSNeuronLayer@@@Z ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::~vector<SNeuronLayer,std::allocator<SNeuronLayer> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@AAEXXZ ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::~_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::~vector<SNeuronLayer,std::allocator<SNeuronLayer> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ PROC ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::vector<SNeuronLayer,std::allocator<SNeuronLayer> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >

; 652  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@QAE@XZ ENDP ; std::vector<SNeuronLayer,std::allocator<SNeuronLayer> >::vector<SNeuronLayer,std::allocator<SNeuronLayer> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SNeuronLayer> >::_Vector_val<std::_Simple_types<SNeuronLayer> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SNeuronLayer> >::_Vector_val<std::_Simple_types<SNeuronLayer> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	add	eax, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	add	eax, 8

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	add	eax, 4

; 582  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABQAUSNeuronLayer@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	add	eax, 4

; 577  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAUSNeuronLayer@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second

; 561  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_second

; 556  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$allocator@USNeuronLayer@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Get_first

; 546  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data

; 525  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0USNeuronLayer@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuronLayer@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuronLayer>

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuronLayer@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0USNeuronLayer@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuronLayer@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuronLayer>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuronLayer> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::~_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::~_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuronLayer@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuronLayer@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1>::_Compressed_pair<std::allocator<SNeuronLayer>,std::_Vector_val<std::_Simple_types<SNeuronLayer> >,1><>

; 447  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Alloc_proxy

; 448  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@USNeuronLayer@@V?$allocator@USNeuronLayer@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >::_Vector_alloc<std::_Vec_base_types<SNeuronLayer,std::allocator<SNeuronLayer> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAIABV?$allocator@USNeuronLayer@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAIABV?$allocator@USNeuronLayer@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 214748364				; 0cccccccH

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@USNeuronLayer@@@std@@@std@@SAIABV?$allocator@USNeuronLayer@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SNeuronLayer> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@USNeuronLayer@@@std@@QAEPAUSNeuronLayer@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@USNeuronLayer@@@std@@QAEPAUSNeuronLayer@@I@Z PROC ; std::allocator<SNeuronLayer>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BE@@std@@YAII@Z	; std::_Get_size_of_n<20>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@USNeuronLayer@@@std@@QAEPAUSNeuronLayer@@I@Z ENDP ; std::allocator<SNeuronLayer>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z PROC ; std::allocator<SNeuronLayer>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 20
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@USNeuronLayer@@@std@@QAEXQAUSNeuronLayer@@I@Z ENDP ; std::allocator<SNeuronLayer>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@USNeuronLayer@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@USNeuronLayer@@@std@@QAE@XZ PROC		; std::allocator<SNeuronLayer>::allocator<SNeuronLayer>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@USNeuronLayer@@@std@@QAE@XZ ENDP		; std::allocator<SNeuronLayer>::allocator<SNeuronLayer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GSNeuronLayer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSNeuronLayer@@QAEPAXI@Z PROC			; SNeuronLayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SNeuronLayer@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSNeuronLayer@@QAEPAXI@Z ENDP			; SNeuronLayer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0SNeuronLayer@@QAE@$$QAU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0SNeuronLayer@@QAE@$$QAU0@@Z PROC			; SNeuronLayer::SNeuronLayer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0SNeuronLayer@@QAE@$$QAU0@@Z ENDP			; SNeuronLayer::SNeuronLayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1SNeuronLayer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SNeuronLayer@@QAE@XZ PROC				; SNeuronLayer::~SNeuronLayer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::~vector<SNeuron,std::allocator<SNeuron> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SNeuronLayer@@QAE@XZ ENDP				; SNeuronLayer::~SNeuronLayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
tv83 = -68						; size = 4
tv86 = -64						; size = 4
$T2 = -60						; size = 40
_i$3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_NumNeurons$ = 8					; size = 4
_NumInputsPerNeuron$ = 12				; size = 4
??0SNeuronLayer@@QAE@HH@Z PROC				; SNeuronLayer::SNeuronLayer
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SNeuronLayer@@QAE@HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 30   :                            int NumInputsPerNeuron):	m_iNumNeurons(NumNeurons)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _NumNeurons$[ebp]
	mov	DWORD PTR [eax], ecx

; 31   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 32   : 	for (int i=0; i<NumNeurons; ++i)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@SNeuronLay
$LN2@SNeuronLay:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN4@SNeuronLay:
	mov	eax, DWORD PTR _i$3[ebp]
	cmp	eax, DWORD PTR _NumNeurons$[ebp]
	jge	SHORT $LN1@SNeuronLay

; 33   : 		m_vecNeurons.push_back(SNeuron(NumInputsPerNeuron));

	mov	ecx, DWORD PTR _NumInputsPerNeuron$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0SNeuron@@QAE@H@Z			; SNeuron::SNeuron
	mov	DWORD PTR tv86[ebp], eax
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR tv83[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1SNeuron@@QAE@XZ
	jmp	SHORT $LN2@SNeuronLay
$LN1@SNeuronLay:

; 34   : 
; 35   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SNeuronLayer@@QAE@HH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ; std::vector<SNeuron,std::allocator<SNeuron> >::~vector<SNeuron,std::allocator<SNeuron> >
__unwindfunclet$??0SNeuronLayer@@QAE@HH@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1SNeuron@@QAE@XZ
__ehhandler$??0SNeuronLayer@@QAE@HH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SNeuronLayer@@QAE@HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SNeuronLayer@@QAE@HH@Z ENDP				; SNeuronLayer::SNeuronLayer
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEXPAUSNeuron@@0@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@CAXXZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@CAXXZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXXZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z ; std::allocator<SNeuron>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXXZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXQAUSNeuron@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXQAUSNeuron@@II@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z ; std::allocator<SNeuron>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

	imul	esi, DWORD PTR __Newsize$[ebp], 40
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

	imul	esi, DWORD PTR __Newcapacity$[ebp], 40
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1907 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXQAUSNeuron@@II@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEII@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABEII@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@USNeuron@@@std@@@std@@YAXPAUSNeuron@@0AAV?$allocator@USNeuron@@@0@@Z ; std::_Destroy_range<std::allocator<SNeuron> >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@0@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00U?$integral_constant@_N$00@2@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@QAU1@0PAU1@AAV?$allocator@USNeuron@@@0@@Z ; std::_Uninitialized_move<SNeuron *,SNeuron *,std::allocator<SNeuron> >
	add	esp, 16					; 00000010H

; 1834 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXPAUSNeuron@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEPAUSNeuron@@PAU3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEPAUSNeuron@@PAU3@00@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUSNeuron@@PAU1@V?$allocator@USNeuron@@@std@@@std@@YAPAUSNeuron@@QAU1@0PAU1@AAV?$allocator@USNeuron@@@0@@Z ; std::_Uninitialized_move<SNeuron *,SNeuron *,std::allocator<SNeuron> >
	add	esp, 16					; 00000010H

; 1829 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEPAUSNeuron@@PAU3@00@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1JO@EPEOPKAD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	imul	ecx, DWORD PTR __Pos$[ebp], 40
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1737 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEAAUSNeuron@@I@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABE_NXZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1727 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@ABE_NXZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx

; 1716 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAIABV?$allocator@USNeuron@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SNeuron> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 40					; 00000028H
	idiv	ecx

; 1705 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QBEIXZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::end, COMDAT
; _this$ = ecx

; 1628 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1629 : 		return (iterator(this->_Mylast(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuron> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1630 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::end
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::begin, COMDAT
; _this$ = ecx

; 1618 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1619 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuron> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@QAE@PAUSNeuron@@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<SNeuron> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1620 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@2@XZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::begin
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAUSNeuron@@@std@@YA$$QAUSNeuron@@AAU1@@Z ; std::move<SNeuron &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@USNeuron@@@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAUSNeuron@@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::emplace_back<SNeuron>

; 938  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAEX$$QAUSNeuron@@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::~vector<SNeuron,std::allocator<SNeuron> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEXXZ ; std::vector<SNeuron,std::allocator<SNeuron> >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::~_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::~vector<SNeuron,std::allocator<SNeuron> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >, COMDAT
; _this$ = ecx

; 789  : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		: _Mybase(_STD move(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	call	??$move@AAV?$allocator@USNeuron@@@std@@@std@@YA$$QAV?$allocator@USNeuron@@@0@AAV10@@Z ; std::move<std::allocator<SNeuron> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@USNeuron@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USNeuron@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > ><std::allocator<SNeuron>,void>

; 790  : 		_Move_from(_STD move(_Right), true_type{});

	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@YA$$QAV?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@0@AAV10@@Z ; std::move<std::vector<SNeuron,std::allocator<SNeuron> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<SNeuron,std::allocator<SNeuron> >::_Move_from

; 791  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::_Move_from, COMDAT
; _this$ = ecx

; 762  : 		{	// move from _Right, stealing its contents

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 763  : 		this->_Swap_all(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Swap_all

; 764  : 
; 765  : 		this->_Myfirst() = _Right._Myfirst();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 766  : 		this->_Mylast() = _Right._Mylast();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 767  : 		this->_Myend() = _Right._Myend();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 768  : 
; 769  : 		_Right._Myfirst() = pointer();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 770  : 		_Right._Mylast() = pointer();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 771  : 		_Right._Myend() = pointer();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
	mov	DWORD PTR [eax], 0

; 772  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Move_from@?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::_Move_from
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ PROC ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >

; 652  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@QAE@XZ ENDP ; std::vector<SNeuron,std::allocator<SNeuron> >::vector<SNeuron,std::allocator<SNeuron> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuron@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuron@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuron@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuron@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuron@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SNeuron> >::_Vector_val<std::_Simple_types<SNeuron> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SNeuron> >::_Vector_val<std::_Simple_types<SNeuron> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	add	eax, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	add	eax, 8

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	add	eax, 4

; 582  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABQAUSNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	add	eax, 4

; 577  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAUSNeuron@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second

; 561  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_second

; 556  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$allocator@USNeuron@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$allocator@USNeuron@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QBEABV?$allocator@USNeuron@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$allocator@USNeuron@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Get_first

; 546  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Swap_all, COMDAT
; _this$ = ecx

; 539  : 		{	// swap all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	mov	ecx, eax
	call	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 541  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data

; 525  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0USNeuron@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuron@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuron>

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$allocator@USNeuron@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0USNeuron@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USNeuron@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><SNeuron>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<SNeuron> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::~_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::~_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@USNeuron@@@std@@V?$_Vector_val@U?$_Simple_types@USNeuron@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1>::_Compressed_pair<std::allocator<SNeuron>,std::_Vector_val<std::_Simple_types<SNeuron> >,1><>

; 447  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Alloc_proxy

; 448  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@USNeuron@@V?$allocator@USNeuron@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >::_Vector_alloc<std::_Vec_base_types<SNeuron,std::allocator<SNeuron> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAIABV?$allocator@USNeuron@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAIABV?$allocator@USNeuron@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<SNeuron> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 107374182				; 06666666H

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@USNeuron@@@std@@@std@@SAIABV?$allocator@USNeuron@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SNeuron> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@USNeuron@@@std@@QAEPAUSNeuron@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@USNeuron@@@std@@QAEPAUSNeuron@@I@Z PROC ; std::allocator<SNeuron>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0CI@@std@@YAII@Z	; std::_Get_size_of_n<40>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@USNeuron@@@std@@QAEPAUSNeuron@@I@Z ENDP ; std::allocator<SNeuron>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z PROC ; std::allocator<SNeuron>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 40
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@USNeuron@@@std@@QAEXQAUSNeuron@@I@Z ENDP ; std::allocator<SNeuron>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@USNeuron@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@USNeuron@@@std@@QAE@XZ PROC		; std::allocator<SNeuron>::allocator<SNeuron>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@USNeuron@@@std@@QAE@XZ ENDP		; std::allocator<SNeuron>::allocator<SNeuron>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GSNeuron@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSNeuron@@QAEPAXI@Z PROC				; SNeuron::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SNeuron@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSNeuron@@QAEPAXI@Z ENDP				; SNeuron::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0SNeuron@@QAE@$$QAU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0SNeuron@@QAE@$$QAU0@@Z PROC				; SNeuron::SNeuron, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [edx+24]
	movsd	QWORD PTR [ecx+24], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	movsd	xmm0, QWORD PTR [ecx+32]
	movsd	QWORD PTR [eax+32], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0SNeuron@@QAE@$$QAU0@@Z ENDP				; SNeuron::SNeuron
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1SNeuron@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SNeuron@@QAE@XZ PROC					; SNeuron::~SNeuron, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SNeuron@@QAE@XZ ENDP					; SNeuron::~SNeuron
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
_TEXT	SEGMENT
$T2 = -28						; size = 8
_i$3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_NumInputs$ = 8						; size = 4
??0SNeuron@@QAE@H@Z PROC				; SNeuron::SNeuron
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0SNeuron@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 7    : SNeuron::SNeuron(int NumInputs): m_iNumInputs(NumInputs+1),

	mov	eax, DWORD PTR _NumInputs$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 11   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 8    :                                  m_dActivation(0),

	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+24], xmm0

; 9    :                                  m_dError(0)

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+32], xmm0

; 12   : 	//we need an additional weight for the bias hence the +1
; 13   : 	for (int i=0; i<NumInputs+1; ++i)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@SNeuron
$LN2@SNeuron:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN4@SNeuron:
	mov	edx, DWORD PTR _NumInputs$[ebp]
	add	edx, 1
	cmp	DWORD PTR _i$3[ebp], edx
	jge	SHORT $LN3@SNeuron

; 14   : 	{
; 15   : 		//set up the weights with an initial random value
; 16   : 		m_vecWeight.push_back(RandomClamped());

	call	?RandomClamped@@YANXZ			; RandomClamped
	fstp	QWORD PTR $T2[ebp]
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ; std::vector<double,std::allocator<double> >::push_back

; 17   : 	}

	jmp	SHORT $LN2@SNeuron
$LN3@SNeuron:

; 18   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0SNeuron@@QAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
__ehhandler$??0SNeuron@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0SNeuron@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0SNeuron@@QAE@H@Z ENDP				; SNeuron::SNeuron
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cdata.h
;	COMDAT ?GetOutputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetOutputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ PROC ; CData::GetOutputSet, COMDAT
; _this$ = ecx

; 69   :   vector<vector<double> > GetOutputSet(){return m_vecTargets;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetOutputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ ENDP ; CData::GetOutputSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cdata.h
;	COMDAT ?GetInputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetInputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ PROC ; CData::GetInputSet, COMDAT
; _this$ = ecx

; 68   :   vector<vector<double> > GetInputSet() {return m_vecInputs;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetInputSet@CData@@QAE?AV?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@XZ ENDP ; CData::GetInputSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXPAV?$vector@NV?$allocator@N@std@@@2@0@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEXQAV?$vector@NV?$allocator@N@std@@@2@I@Z ; std::allocator<std::vector<double,std::allocator<double> > >::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAE_NI@Z PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 		this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1874 : 		this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1875 : 		this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
	mov	DWORD PTR [eax], 0

; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

	cmp	DWORD PTR __Newcapacity$[ebp], 0
	jne	SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

	xor	al, al
	jmp	SHORT $LN4@Buy
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::max_size
	cmp	DWORD PTR __Newcapacity$[ebp], eax
	jbe	SHORT $LN3@Buy

; 1883 : 			{
; 1884 : 			_Xlength();

	call	?_Xlength@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Xlength
$LN3@Buy:

; 1885 : 			}
; 1886 : 
; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@I@Z ; std::allocator<std::vector<double,std::allocator<double> > >::allocate
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	DWORD PTR [eax], esi

; 1888 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	esi, DWORD PTR __Newcapacity$[ebp]
	shl	esi, 4
	add	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
	mov	DWORD PTR [eax], esi

; 1890 : 
; 1891 : 		return (true);

	mov	al, 1
$LN4@Buy:

; 1892 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAE_NI@Z ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXPAV?$vector@NV?$allocator@N@std@@@2@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXPAV?$vector@NV?$allocator@N@std@@@2@0@Z PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@YAXPAV?$vector@NV?$allocator@N@std@@@0@0AAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<double,std::allocator<double> > > >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXPAV?$vector@NV?$allocator@N@std@@@2@0@Z ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BEE@BOINOPIE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	ecx, DWORD PTR __Pos$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx

; 1737 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAEAAV?$vector@NV?$allocator@N@std@@@1@I@Z ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 4
	mov	eax, ecx

; 1716 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 4
	mov	eax, ecx

; 1705 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::~_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::~vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -28						; size = 4
$T2 = -21						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-28], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SA?AV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@$$QAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > ><std::allocator<std::vector<double,std::allocator<double> > >,void>
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 735  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QBEIXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAE_NI@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAV?$vector@NV?$allocator@N@std@@@std@@@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEPAV?$vector@NV?$allocator@N@std@@@1@PAV21@00@Z ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Ucopy<std::vector<double,std::allocator<double> > *>
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::_Tidy

; 741  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 742  : 			_CATCH_END

	mov	eax, $LN9@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN1@vector
$LN9@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 743  : 			}
; 744  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::~_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >
__ehhandler$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >::vector<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	add	eax, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	add	eax, 8

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	add	eax, 4

; 582  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABQAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	add	eax, 4

; 577  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAV?$vector@NV?$allocator@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second

; 561  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_second

; 556  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::vector<double,std::allocator<double> > >,std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > >,1>::_Get_first

; 546  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data

; 525  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0V?$vector@NV?$allocator@N@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<double,std::allocator<double> > >

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0V?$vector@NV?$allocator@N@std@@@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::vector<double,std::allocator<double> > >

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@V?$vector@NV?$allocator@N@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<std::vector<double,std::allocator<double> > > > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::~_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@V?$vector@NV?$allocator@N@std@@@std@@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >::~_Vector_alloc<std::_Vec_base_types<std::vector<double,std::allocator<double> >,std::allocator<std::vector<double,std::allocator<double> > > > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SA?AV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SA?AV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 897  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SA?AV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 268435455				; 0fffffffH

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::vector<double,std::allocator<double> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@I@Z PROC ; std::allocator<std::vector<double,std::allocator<double> > >::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BA@@std@@YAII@Z	; std::_Get_size_of_n<16>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEPAV?$vector@NV?$allocator@N@std@@@2@I@Z ENDP ; std::allocator<std::vector<double,std::allocator<double> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEXQAV?$vector@NV?$allocator@N@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEXQAV?$vector@NV?$allocator@N@std@@@2@I@Z PROC ; std::allocator<std::vector<double,std::allocator<double> > >::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@V?$vector@NV?$allocator@N@std@@@std@@@std@@QAEXQAV?$vector@NV?$allocator@N@std@@@2@I@Z ENDP ; std::allocator<std::vector<double,std::allocator<double> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$vector@NV?$allocator@N@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$vector@NV?$allocator@N@std@@@std@@QAEPAXI@Z PROC	; std::vector<double,std::allocator<double> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$vector@NV?$allocator@N@std@@@std@@QAEPAXI@Z ENDP	; std::vector<double,std::allocator<double> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
_TEXT	SEGMENT
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z PROC ; std::vector<double,std::allocator<double> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@NV?$allocator@N@std@@@std@@ABEXPAN0@Z ENDP ; std::vector<double,std::allocator<double> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ PROC ; std::vector<double,std::allocator<double> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ENDP ; std::vector<double,std::allocator<double> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ PROC	; std::vector<double,std::allocator<double> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ENDP	; std::vector<double,std::allocator<double> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z PROC ; std::vector<double,std::allocator<double> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@N@std@@QAEXQANI@Z ; std::allocator<double>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	esi, DWORD PTR [eax+edx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	esi, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1907 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@NV?$allocator@N@std@@@std@@AAEXQANII@Z ENDP ; std::vector<double,std::allocator<double> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@NV?$allocator@N@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@NV?$allocator@N@std@@@std@@AAE_NI@Z PROC	; std::vector<double,std::allocator<double> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 		this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1874 : 		this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1875 : 		this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	DWORD PTR [eax], 0

; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

	cmp	DWORD PTR __Newcapacity$[ebp], 0
	jne	SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

	xor	al, al
	jmp	SHORT $LN4@Buy
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
	cmp	DWORD PTR __Newcapacity$[ebp], eax
	jbe	SHORT $LN3@Buy

; 1883 : 			{
; 1884 : 			_Xlength();

	call	?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ ; std::vector<double,std::allocator<double> >::_Xlength
$LN3@Buy:

; 1885 : 			}
; 1886 : 
; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@N@std@@QAEPANI@Z	; std::allocator<double>::allocate
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	DWORD PTR [eax], esi

; 1888 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Newcapacity$[ebp]
	lea	esi, DWORD PTR [edx+eax*8]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1890 : 
; 1891 : 		return (true);

	mov	al, 1
$LN4@Buy:

; 1892 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@NV?$allocator@N@std@@@std@@AAE_NI@Z ENDP	; std::vector<double,std::allocator<double> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z PROC ; std::vector<double,std::allocator<double> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@NV?$allocator@N@std@@@std@@ABEII@Z ENDP ; std::vector<double,std::allocator<double> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z PROC ; std::vector<double,std::allocator<double> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@N@std@@@std@@YAXPAN0AAV?$allocator@N@0@@Z ; std::_Destroy_range<std::allocator<double> >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ENDP ; std::vector<double,std::allocator<double> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z PROC ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00@Z ENDP ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,double *,std::allocator<double> >
	add	esp, 16					; 00000010H

; 1834 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<double,std::allocator<double> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z PROC ; std::vector<double,std::allocator<double> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PANPANV?$allocator@N@std@@@std@@YAPANQAN0PANAAV?$allocator@N@0@@Z ; std::_Uninitialized_move<double *,double *,std::allocator<double> >
	add	esp, 16					; 00000010H

; 1829 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ENDP ; std::vector<double,std::allocator<double> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z PROC	; std::vector<double,std::allocator<double> >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_0GK@ECBJCIPN@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_1NE@HDFPNDLK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1HO@GLEAPAMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAd?$AAo?$AAu@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [eax+ecx*8]

; 1737 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@NV?$allocator@N@std@@@std@@QAEAANI@Z ENDP	; std::vector<double,std::allocator<double> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@NV?$allocator@N@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@NV?$allocator@N@std@@@std@@ABE_NXZ PROC ; std::vector<double,std::allocator<double> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1727 : 		}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@NV?$allocator@N@std@@@std@@ABE_NXZ ENDP ; std::vector<double,std::allocator<double> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ PROC ; std::vector<double,std::allocator<double> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	eax, ecx

; 1716 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ENDP ; std::vector<double,std::allocator<double> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ PROC ; std::vector<double,std::allocator<double> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z ; std::_Default_allocator_traits<std::allocator<double> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ENDP ; std::vector<double,std::allocator<double> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ PROC	; std::vector<double,std::allocator<double> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	eax, ecx

; 1705 : 		}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ENDP	; std::vector<double,std::allocator<double> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ PROC ; std::vector<double,std::allocator<double> >::end, COMDAT
; _this$ = ecx

; 1628 : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1629 : 		return (iterator(this->_Mylast(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1630 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ENDP ; std::vector<double,std::allocator<double> >::end
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ PROC ; std::vector<double,std::allocator<double> >::begin, COMDAT
; _this$ = ecx

; 1618 : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1619 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@QAE@PANPBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<double> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1620 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$vector@NV?$allocator@N@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@2@XZ ENDP ; std::vector<double,std::allocator<double> >::begin
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ PROC	; std::vector<double,std::allocator<double> >::clear, COMDAT
; _this$ = ecx

; 1589 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1590 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all

; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@NV?$allocator@N@std@@@std@@AAEXPAN0@Z ; std::vector<double,std::allocator<double> >::_Destroy

; 1592 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1593 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@NV?$allocator@N@std@@@std@@QAEXXZ ENDP	; std::vector<double,std::allocator<double> >::clear
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??4?$vector@NV?$allocator@N@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@NV?$allocator@N@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<double,std::allocator<double> >::operator=, COMDAT
; _this$ = ecx

; 1399 : 		{	// assign _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1400 : 		if (this != _STD addressof(_Right))

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@$$CBV?$vector@NV?$allocator@N@std@@@std@@@std@@YAPBV?$vector@NV?$allocator@N@std@@@0@ABV10@@Z ; std::addressof<std::vector<double,std::allocator<double> > const >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	je	SHORT $LN2@operator

; 1401 : 			{	// different, assign it
; 1402 : #pragma warning(push)
; 1403 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1404 : 			if (_Alty_traits::propagate_on_container_copy_assignment::value
; 1405 : 				&& this->_Getal() != _Right._Getal())

	xor	ecx, ecx
	je	SHORT $LN3@operator

; 1406 : 				{	// reload array
; 1407 : 				_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy
$LN3@operator:

; 1408 : 				}
; 1409 : #pragma warning(pop)
; 1410 : 
; 1411 : 			this->_Copy_alloc(_Right._Getal());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXABV?$allocator@N@2@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Copy_alloc

; 1412 : 
; 1413 : 			assign(_Right._Myfirst(), _Right._Mylast());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$assign@PANX@?$vector@NV?$allocator@N@std@@@std@@QAEXPAN0@Z ; std::vector<double,std::allocator<double> >::assign<double *,void>
$LN2@operator:

; 1414 : 			}
; 1415 : 
; 1416 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1417 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@NV?$allocator@N@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<double,std::allocator<double> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z PROC ; std::vector<double,std::allocator<double> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAN@std@@YA$$QANAAN@Z		; std::move<double &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@N@?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAN@Z ; std::vector<double,std::allocator<double> >::emplace_back<double>

; 938  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEX$$QAN@Z ENDP ; std::vector<double,std::allocator<double> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEXABN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEXABN@Z PROC ; std::vector<double,std::allocator<double> >::push_back, COMDAT
; _this$ = ecx

; 931  : 		{	// insert element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 932  : 		emplace_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@ABN@?$vector@NV?$allocator@N@std@@@std@@QAE@ABN@Z ; std::vector<double,std::allocator<double> >::emplace_back<double const &>

; 933  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@NV?$allocator@N@std@@@std@@QAEXABN@Z ENDP ; std::vector<double,std::allocator<double> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::~_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::~vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 789  : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 		: _Mybase(_STD move(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	call	??$move@AAV?$allocator@N@std@@@std@@YA$$QAV?$allocator@N@0@AAV10@@Z ; std::move<std::allocator<double> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@N@std@@X@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@$$QAV?$allocator@N@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > ><std::allocator<double>,void>

; 790  : 		_Move_from(_STD move(_Right), true_type{});

	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAV?$vector@NV?$allocator@N@std@@@std@@@std@@YA$$QAV?$vector@NV?$allocator@N@std@@@0@AAV10@@Z ; std::move<std::vector<double,std::allocator<double> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<double,std::allocator<double> >::_Move_from

; 791  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@NV?$allocator@N@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<double,std::allocator<double> >::_Move_from, COMDAT
; _this$ = ecx

; 762  : 		{	// move from _Right, stealing its contents

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 763  : 		this->_Swap_all(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Swap_all

; 764  : 
; 765  : 		this->_Myfirst() = _Right._Myfirst();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 766  : 		this->_Mylast() = _Right._Mylast();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 767  : 		this->_Myend() = _Right._Myend();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 768  : 
; 769  : 		_Right._Myfirst() = pointer();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 770  : 		_Right._Mylast() = pointer();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 771  : 		_Right._Myend() = pointer();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
	mov	DWORD PTR [eax], 0

; 772  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Move_from@?$vector@NV?$allocator@N@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<double,std::allocator<double> >::_Move_from
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -28						; size = 4
$T2 = -21						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-28], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SA?AV?$allocator@N@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<double> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@N@std@@X@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@$$QAV?$allocator@N@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > ><std::allocator<double>,void>
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 735  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@NV?$allocator@N@std@@@std@@QBEIXZ ; std::vector<double,std::allocator<double> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@NV?$allocator@N@std@@@std@@AAE_NI@Z ; std::vector<double,std::allocator<double> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAN@?$vector@NV?$allocator@N@std@@@std@@AAEPANPAN00@Z ; std::vector<double,std::allocator<double> >::_Ucopy<double *>
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AAEXXZ ; std::vector<double,std::allocator<double> >::_Tidy

; 741  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 742  : 			_CATCH_END

	mov	eax, $LN9@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN1@vector
$LN9@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 743  : 			}
; 744  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::~_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >
__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@NV?$allocator@N@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ PROC	; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >

; 652  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@NV?$allocator@N@std@@@std@@QAE@XZ ENDP	; std::vector<double,std::allocator<double> >::vector<double,std::allocator<double> >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ PROC ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ENDP ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@N@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<double> >::_Vector_val<std::_Simple_types<double> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	add	eax, 8

; 592  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	add	eax, 8

; 587  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	add	eax, 4

; 582  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABQANXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	add	eax, 4

; 577  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPANXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second

; 561  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_second

; 556  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QBEABV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first

; 551  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$allocator@N@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAEAAV?$allocator@N@2@XZ ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Get_first

; 546  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Swap_all, COMDAT
; _this$ = ecx

; 539  : 		{	// swap all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 540  : 		_Get_data()._Swap_all(_Right._Get_data());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	mov	ecx, eax
	call	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 541  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data

; 525  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Proxy_allocator$ = -9					; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0N@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@N@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><double>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@N@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@N@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@N@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<double> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXABV?$allocator@N@2@@Z
_TEXT	SEGMENT
__Reload$ = -5						; size = 1
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXABV?$allocator@N@2@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Copy_alloc, COMDAT
; _this$ = ecx

; 465  : 		{	// replace old allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 		const bool _Reload = _Alty_traits::propagate_on_container_copy_assignment::value
; 467  : 			&& _Getal() != _Al;

	mov	BYTE PTR __Reload$[ebp], 0

; 468  : 
; 469  : 		if (_Reload)

	xor	eax, eax
	je	SHORT $LN2@Copy_alloc

; 470  : 			{
; 471  : 			_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Free_proxy
$LN2@Copy_alloc:

; 472  : 			}
; 473  : 
; 474  : 		_Pocca(_Getal(), _Al);

	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEAAV?$allocator@N@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Getal
	push	eax
	call	??$_Pocca@V?$allocator@N@std@@@std@@YAXAAV?$allocator@N@0@ABV10@@Z ; std::_Pocca<std::allocator<double> >
	add	esp, 8

; 475  : 
; 476  : 		if (_Reload)

	xor	edx, edx
	je	SHORT $LN1@Copy_alloc

; 477  : 			{
; 478  : 			_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Alloc_proxy
$LN1@Copy_alloc:

; 479  : 			}
; 480  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Copy_alloc@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXABV?$allocator@N@2@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::~_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::~_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@N@std@@V?$_Vector_val@U?$_Simple_types@N@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1>::_Compressed_pair<std::allocator<double>,std::_Vector_val<std::_Simple_types<double> >,1><>

; 447  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Alloc_proxy

; 448  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@NV?$allocator@N@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >::_Vector_alloc<std::_Vec_base_types<double,std::allocator<double> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SA?AV?$allocator@N@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SA?AV?$allocator@N@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<double> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 897  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SA?AV?$allocator@N@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<double> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<double> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 536870911				; 1fffffffH

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@N@std@@@std@@SAIABV?$allocator@N@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<double> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@N@std@@QAEPANI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@N@std@@QAEPANI@Z PROC		; std::allocator<double>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@N@std@@QAEPANI@Z ENDP		; std::allocator<double>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@N@std@@QAEXQANI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@N@std@@QAEXQANI@Z PROC		; std::allocator<double>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@N@std@@QAEXQANI@Z ENDP		; std::allocator<double>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@N@std@@QAE@XZ PROC			; std::allocator<double>::allocator<double>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@N@std@@QAE@XZ ENDP			; std::allocator<double>::allocator<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ?RandomClamped@@YANXZ
_TEXT	SEGMENT
tv78 = -32						; size = 8
tv76 = -24						; size = 8
tv81 = -16						; size = 8
tv72 = -8						; size = 8
?RandomClamped@@YANXZ PROC				; RandomClamped, COMDAT

; 107  : inline double RandomClamped()    {return RandFloat() - RandFloat();}

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	call	?RandFloat@@YANXZ			; RandFloat
	fstp	QWORD PTR tv72[ebp]
	movsd	xmm0, QWORD PTR tv72[ebp]
	movsd	QWORD PTR tv81[ebp], xmm0
	call	?RandFloat@@YANXZ			; RandFloat
	fstp	QWORD PTR tv76[ebp]
	movsd	xmm0, QWORD PTR tv81[ebp]
	subsd	xmm0, QWORD PTR tv76[ebp]
	movsd	QWORD PTR tv78[ebp], xmm0
	fld	QWORD PTR tv78[ebp]
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RandomClamped@@YANXZ ENDP				; RandomClamped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ?RandFloat@@YANXZ
_TEXT	SEGMENT
tv70 = -8						; size = 8
?RandFloat@@YANXZ PROC					; RandFloat, COMDAT

; 91   : inline double RandFloat()      {return ((rand())/(RAND_MAX+1.0));}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	call	_rand
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@40e0000000000000
	movsd	QWORD PTR tv70[ebp], xmm0
	fld	QWORD PTR tv70[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RandFloat@@YANXZ ENDP					; RandFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$di	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR ?MinFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$di	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR ?MaxFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$di	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR ?MinDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$di	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR ?MaxDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$di	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR ?MaxInt@@3HB, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 24   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Min_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Min_value
$LN3@Min_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 25   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1203 : 	{	// convert size_t to size_t, unchanged

	push	ebp
	mov	ebp, esp

; 1204 : 	return (_Len);

	mov	eax, DWORD PTR __Len$[ebp]

; 1205 : 	}

	pop	ebp
	ret	0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 115  : 	_Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	122					; 0000007aH
	push	OFFSET ??_C@_0GM@EMOPLGHB@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	122					; 0000007aH
	push	OFFSET ??_C@_1NI@NGGEPBDP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_0GM@EMOPLGHB@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_1NI@NGGEPBDP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 134  : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

	push	ebp
	mov	ebp, esp

; 52   : 		return (::operator new(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 53   : 		}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 191  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 192  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 193  : 		if (_Myproxy != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN13@Orphan_me

; 194  : 			{	// adopted, remove self from list
; 195  : 			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN2@Orphan_me:

; 196  : 			while (*_Pnext != nullptr && *_Pnext != this)

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me

; 197  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx
	jmp	SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 198  : 
; 199  : 			_STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me
	jmp	SHORT $LN4@Orphan_me
$LN9@Orphan_me:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	199					; 000000c7H
	push	OFFSET ??_C@_0GM@FAFCIENC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me
	int	3
$LN14@Orphan_me:
	push	0
	push	199					; 000000c7H
	push	OFFSET ??_C@_1NI@CLIPCEJM@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me
$LN4@Orphan_me:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me

; 200  : 			*_Pnext = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 201  : 			_Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me:

; 202  : 			}
; 203  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 204  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 186  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 188  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 181  : 		{	// get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		return (_Myproxy == nullptr ? nullptr : _Myproxy->_Mycont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 183  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 176  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		_Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 178  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 147  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		if (_Parent == nullptr)

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt

; 149  : 			{	// no future parent, just disown current parent
; 150  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 151  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 152  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 153  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 154  : 			}

	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 155  : 		else

	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 156  : 			{	// have a parent, do adoption
; 157  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 158  : 
; 159  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 160  : 			if (_Myproxy != _Parent_proxy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN5@Adopt

; 161  : 				{	// change parentage
; 162  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 163  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 164  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 165  : 				_Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 166  : 				_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 167  : 				}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Adopt:

; 168  : 
; 169  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 170  : 			_Myproxy = _Parent_proxy;
; 171  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 172  : 			}
; 173  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@Adopt:
	DD	2
	DD	$LN9@Adopt
$LN9@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@Adopt
$LN7@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 139  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 140  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 141  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 142  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 143  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 144  : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Iterator_b:
	DD	1
	DD	$LN5@Iterator_b
$LN5@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 119  : 		{	// assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 		if (_Myproxy != _Right._Myproxy)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@operator

; 121  : 			{
; 122  : 			if (_Right._Myproxy == nullptr)

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator

; 123  : 				{	// becoming invalid, disown current parent
; 124  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 125  : 				_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 126  : 				_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 127  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 128  : 				}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit

; 129  : 			else

	jmp	SHORT $LN2@operator
$LN3@operator:

; 130  : 				{
; 131  : 				_Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN2@operator:

; 132  : 				}
; 133  : 			}
; 134  : 
; 135  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 136  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 114  : 		{	// copy an iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 115  : 		*this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 116  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 109  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 		: _Myproxy(nullptr), _Mynextiter(nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 110  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 229  : 	{	// swap all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 230  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 235  : 	_Myproxy = _Right._Myproxy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 236  : 	_Right._Myproxy = _Temp;

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [edx], eax

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Swap_all

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Swap_all:

; 240  : 	if (_Right._Myproxy != nullptr)

	mov	edx, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Swap_all

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@Swap_all:

; 242  : 	}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Swap_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@Swap_all:
	DD	1
	DD	$LN7@Swap_all
$LN7@Swap_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@Swap_all
$LN5@Swap_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 222  : 			(*_Pnext)->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 224  : 		}

	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 95   : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Myproxy == nullptr ? nullptr : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 81   : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		: _Myproxy(nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 82   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 69   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 70   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 1062 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1063 : 		return (DBL_MAX);

	fld	QWORD PTR __real@7fefffffffffffff

; 1064 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 1057 : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 1058 : 		return (DBL_MIN);

	fld	QWORD PTR __real@0010000000000000

; 1059 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 1003 : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 1004 : 		return (FLT_MAX);

	fld	DWORD PTR __real@7f7fffff

; 1005 : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 998  : 		{	// return minimum value

	push	ebp
	mov	ebp, esp

; 999  : 		return (FLT_MIN);

	fld	DWORD PTR __real@00800000

; 1000 : 		}

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 616  : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 617  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 618  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\professional\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

	push	ebp
	mov	ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 188  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\ntrembla71\desktop\devoir3ai2019\raven_vs2015\vs2015\buckland_chapter7 to 10_raven\cneuralnet.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
