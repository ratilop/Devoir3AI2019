; Listing generated by Microsoft (R) Optimizing Compiler Version 19.21.27702.2 

	TITLE	C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??0Telegram@@QAE@NHHHPAX@Z			; Telegram::Telegram
PUBLIC	??8@YA_NABUTelegram@@0@Z			; operator==
PUBLIC	??M@YA_NABUTelegram@@0@Z			; operator<
PUBLIC	?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
PUBLIC	??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
PUBLIC	??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
PUBLIC	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
PUBLIC	?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Unchecked_begin
PUBLIC	?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
PUBLIC	?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase_unchecked
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
PUBLIC	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node
PUBLIC	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
PUBLIC	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
PUBLIC	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
PUBLIC	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Orphan_ptr
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>
PUBLIC	??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
PUBLIC	??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
PUBLIC	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge
PUBLIC	??0MessageDispatcher@@AAE@XZ			; MessageDispatcher::MessageDispatcher
PUBLIC	?Instance@MessageDispatcher@@SAPAV1@XZ		; MessageDispatcher::Instance
PUBLIC	?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z	; MessageDispatcher::DispatchMsg
PUBLIC	?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ ; MessageDispatcher::DispatchDelayedMessages
PUBLIC	??1MessageDispatcher@@QAE@XZ			; MessageDispatcher::~MessageDispatcher
PUBLIC	?GetCurrentFrame@FrameCounter@@QAEJXZ		; FrameCounter::GetCurrentFrame
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
PUBLIC	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
PUBLIC	?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Unwrapped
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ; std::pointer_traits<Telegram const *>::pointer_to
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator--
PUBLIC	??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator==
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_head<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
PUBLIC	??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ; std::addressof<Telegram const >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$swap@DX@std@@YAXAAD0@Z			; std::swap<char,void>
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::_Tree_node<Telegram,void *>::_Buyheadnode<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>
PUBLIC	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@AA_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@AA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool &,0>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_tree<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
PUBLIC	??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
PUBLIC	??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z ; std::forward<std::less<Telegram> const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$move@AAD@std@@YA$$QADAAD@Z			; std::move<char &>
PUBLIC	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$_Get_size_of_n@$0DA@@std@@YAII@Z		; std::_Get_size_of_n<48>
PUBLIC	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
PUBLIC	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
PUBLIC	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@_NPAU21@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
PUBLIC	??$?0PAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> *,bool,0>
PUBLIC	??$?0AAPAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> * &,bool,0>
PUBLIC	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
PUBLIC	??$forward@AA_N@std@@YAAA_NAA_N@Z		; std::forward<bool &>
PUBLIC	??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
PUBLIC	??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>
PUBLIC	??$forward@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> *>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$_Buynode@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>
PUBLIC	??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z ; std::_Tree_node<Telegram,void *>::_Buynode<std::allocator<std::_Tree_node<Telegram,void *> >,Telegram const &>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
PUBLIC	??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
PUBLIC	??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<Telegram,void *> *,std::nullptr_t>
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0DA@GGPHOHEL@map?1set?5erase?5iterator?5from?5inc@ ; `string'
PUBLIC	??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1GE@FENJBJJO@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_0CE@JAJNKOFK@cannot?5erase?5map?1set?5end?$CI?$CJ?5iter@ ; `string'
PUBLIC	??_C@_1EM@MEAEPHLP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_0GJ@JDFHNMIO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_C@_1NC@BFDNAIP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ ; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_fabs:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Instance@FrameCounter@@SAPAV1@XZ:PROC		; FrameCounter::Instance
EXTRN	?Instance@EntityManager@@SAPAV1@XZ:PROC		; EntityManager::Instance
EXTRN	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z:PROC ; EntityManager::GetEntityFromID
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
_BSS	SEGMENT
?MaxInt@@3HB DD	01H DUP (?)				; MaxInt
	ALIGN	8

?MaxDouble@@3NB DQ 01H DUP (?)				; MaxDouble
?MinDouble@@3NB DQ 01H DUP (?)				; MinDouble
?MaxFloat@@3MB DD 01H DUP (?)				; MaxFloat
?MinFloat@@3MB DD 01H DUP (?)				; MinFloat
_BSS	ENDS
;	COMDAT ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
_BSS	SEGMENT
?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A DB 0cH DUP (?) ; `MessageDispatcher::Instance'::`2'::instance
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',MessageDispatcher::stance,MessageDispatcher * * const volatile,void,int, ?? &>
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
CRT$XCU	SEGMENT
?MaxInt$initializer$@@3P6AXXZA DD FLAT:??__EMaxInt@@YAXXZ ; MaxInt$initializer$
CRT$XCU	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@ DB 'map/set<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
CONST	SEGMENT
??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'D', 00H
	DB	'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, '_', 00H, 'l', 00H, 't'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@BFDNAIP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@BFDNAIP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '1', 00H, '.', 00H, '2', 00H, '7', 00H, '7', 00H
	DB	'0', 00H, '2', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@JDFHNMIO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@JDFHNMIO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.21.27702\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@MEAEPHLP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EM@MEAEPHLP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAm@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JAJNKOFK@cannot?5erase?5map?1set?5end?$CI?$CJ?5iter@
CONST	SEGMENT
??_C@_0CE@JAJNKOFK@cannot?5erase?5map?1set?5end?$CI?$CJ?5iter@ DB 'cannot'
	DB	' erase map/set end() iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@FENJBJJO@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1GE@FENJBJJO@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o'
	DB	00H, 'm', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, '_', 00H, 'T', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ',', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'e', 00H, 's'
	DB	00H, 's', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e'
	DB	00H, 'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, '>', 00H, ',', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g'
	DB	00H, 'r', 00H, 'a', 00H, 'm', 00H, '>', 00H, ',', 00H, '0', 00H
	DB	'>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GGPHOHEL@map?1set?5erase?5iterator?5from?5inc@
CONST	SEGMENT
??_C@_0DA@GGPHOHEL@map?1set?5erase?5iterator?5from?5inc@ DB 'map/set eras'
	DB	'e iterator from incorrect container', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'T', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'T', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, '>', 00H, ' ', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '1', 00H, '.', 00H, '2', 00H, '7', 00H, '7', 00H
	DB	'0', 00H, '2', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.21.27702\include\xtree', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '1', 00H, '.', 00H, '2', 00H, '7', 00H, '7', 00H
	DB	'0', 00H, '2', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.21.27702\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z$0
__ehfuncinfo$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$0
__unwindtable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$2
__ehfuncinfo$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Instance@MessageDispatcher@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Instance@MessageDispatcher@@SAPAV1@XZ$0
__unwindtable$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$2
__ehfuncinfo$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Instance@MessageDispatcher@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Instance@MessageDispatcher@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ$0
__ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$0
__ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MaxDouble$initializer$@@3P6AXXZA DD FLAT:??__EMaxDouble@@YAXXZ ; MaxDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinDouble$initializer$@@3P6AXXZA DD FLAT:??__EMinDouble@@YAXXZ ; MinDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MaxFloat$initializer$@@3P6AXXZA DD FLAT:??__EMaxFloat@@YAXXZ ; MaxFloat$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinFloat$initializer$@@3P6AXXZA DD FLAT:??__EMinFloat@@YAXXZ ; MinFloat$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@D@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@D@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<Telegram,void *> *,std::nullptr_t>, COMDAT

; 525  : inline _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 526  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 527  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 528  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 529  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<Telegram,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	mov	ecx, 8
	mov	esi, eax
	mov	edi, DWORD PTR $T1[ebp]
	rep movsd

; 821  :     }

	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT
; _this$ = ecx

; 1198 :     ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1199 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Alloc_cons

; 1200 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
$LN3@Alloc_cons:

; 1201 :         }
; 1202 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1193 :     void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1194 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1195 :         _Ptr = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1196 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1189 :     _NODISCARD pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1190 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<Telegram,void *> *,std::nullptr_t>
	add	esp, 8

; 1191 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Release
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT
; _this$ = ecx

; 1187 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
__Newnode$ = -24					; size = 8
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z PROC ; std::_Tree_node<Telegram,void *>::_Buynode<std::allocator<std::_Tree_node<Telegram,void *> >,Telegram const &>, COMDAT

; 359  :     static _Nodeptr _Buynode(_Alloc& _Al, _Nodeptr _Myhead, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 360  :         // allocate a node with defaults and set links and value
; 361  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buynode call");
; 362  :         using _Alnode_traits = allocator_traits<_Alloc>;
; 363  :         _Alloc_construct_ptr<_Alloc> _Newnode(_Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 364  :         _Newnode._Allocate();

	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Allocate

; 365  :         _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Newnode$[ebp+4]
	add	edx, 16					; 00000010H
	push	edx
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@UTelegram@@ABU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<Telegram,Telegram const &>
	add	esp, 12					; 0000000cH

; 366  :         // we assume construction of pointers does not throw
; 367  :         _Alnode_traits::construct(_Newnode._Al, _STD addressof(_Newnode._Ptr->_Left), _Myhead);

	lea	ecx, DWORD PTR __Myhead$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newnode$[ebp+4]
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 368  :         _Alnode_traits::construct(_Newnode._Al, _STD addressof(_Newnode._Ptr->_Parent), _Myhead);

	lea	ecx, DWORD PTR __Myhead$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newnode$[ebp+4]
	add	edx, 4
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 369  :         _Alnode_traits::construct(_Newnode._Al, _STD addressof(_Newnode._Ptr->_Right), _Myhead);

	lea	ecx, DWORD PTR __Myhead$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newnode$[ebp+4]
	add	edx, 8
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Newnode$[ebp]
	push	eax
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 370  :         _Newnode._Ptr->_Color = _Red;

	mov	ecx, DWORD PTR __Newnode$[ebp+4]
	mov	BYTE PTR [ecx+12], 0

; 371  :         _Newnode._Ptr->_Isnil = false;

	mov	edx, DWORD PTR __Newnode$[ebp+4]
	mov	BYTE PTR [edx+13], 0

; 372  :         return _Newnode._Release();

	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
	mov	eax, DWORD PTR $T2[ebp]

; 373  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Buynode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Buynode:
	DD	1
	DD	$LN6@Buynode
$LN6@Buynode:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN4@Buynode
$LN4@Buynode:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z$0:
	lea	ecx, DWORD PTR __Newnode$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<Telegram,void *> > >
__ehhandler$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z ENDP ; std::_Tree_node<Telegram,void *>::_Buynode<std::allocator<std::_Tree_node<Telegram,void *> >,Telegram const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Buynode@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Buynode@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>, COMDAT
; _this$ = ecx

; 1866 :     _Nodeptr _Buynode(_Valty&&... _Val) { // allocate a node with defaults and set links and value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1867 :         return _Node::_Buynode(_Getal(), _Get_data()._Myhead, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	??$_Buynode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@ABUTelegram@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@ABUTelegram@@@Z ; std::_Tree_node<Telegram,void *>::_Buynode<std::allocator<std::_Tree_node<Telegram,void *> >,Telegram const &>
	add	esp, 12					; 0000000cH

; 1868 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Buynode@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<Telegram,void *> *>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val$ = 12						; size = 4
??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>, COMDAT
; _this$ = ecx

; 1327 :     _Nodeptr _Buy_if_not_node(_Not_a_node_tag, _Valty&& _Val) { // node doesn't exist, make it

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1328 :         return _Buynode(_STD forward<_Valty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buynode@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buynode<Telegram const &>

; 1329 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<Telegram,void *> * &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>, COMDAT

; 525  : inline _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 526  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 527  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 528  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 529  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@AA_N@std@@YAAA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AA_N@std@@YAAA_NAA_N@Z PROC			; std::forward<bool &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@AA_N@std@@YAAA_NAA_N@Z ENDP			; std::forward<bool &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$?0AAPAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> * &,bool,0>, COMDAT
; _this$ = ecx

; 123  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> * &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 123  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@_NPAU21@ABUTelegram@@U_Not_a_node_tag@1@@Z
_TEXT	SEGMENT
__Pnode$1 = -16						; size = 4
__Newnode$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Addleft$ = 8						; size = 1
__Wherenode$ = 12					; size = 4
__Val$ = 16						; size = 4
__Node$ = 20						; size = 1
??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@_NPAU21@ABUTelegram@@U_Not_a_node_tag@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>, COMDAT
; _this$ = ecx

; 1465 :     _Nodeptr _Insert_at(bool _Addleft, _Nodeptr _Wherenode, _Valty&& _Val, _Nodety _Node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1466 :         // add node with value next to _Wherenode, to left if _Addleft
; 1467 :         auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1468 :         if (max_size() - 1 <= _My_data._Mysize) { // tree would get too big, fail

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
	sub	eax, 1
	mov	ecx, DWORD PTR __My_data$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	ja	SHORT $LN5@Insert_at

; 1469 :             _Destroy_if_node(_Node);

	movzx	edx, BYTE PTR __Node$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node

; 1470 :             _Xlength_error("map/set<T> too long");

	push	OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN5@Insert_at:

; 1471 :         }
; 1472 : 
; 1473 :         _Nodeptr _Newnode = _Buy_if_not_node(_Node, _STD forward<_Valty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR __Node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Buy_if_not_node@ABUTelegram@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@U_Not_a_node_tag@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Buy_if_not_node<Telegram const &>
	mov	DWORD PTR __Newnode$[ebp], eax

; 1474 : 
; 1475 :         ++_My_data._Mysize;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1476 :         _Newnode->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1477 : 
; 1478 :         if (_Wherenode == _My_data._Myhead) { // first node in tree, just set head values

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN6@Insert_at

; 1479 :             _My_data._Root()  = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1480 :             _My_data._Lmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx

; 1481 :             _My_data._Rmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@Insert_at
$LN6@Insert_at:

; 1482 :         } else if (_Addleft) { // add to left of _Wherenode

	movzx	edx, BYTE PTR __Addleft$[ebp]
	test	edx, edx
	je	SHORT $LN8@Insert_at

; 1483 :             _Wherenode->_Left = _Newnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 1484 :             if (_Wherenode == _My_data._Lmost()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN10@Insert_at

; 1485 :                 _My_data._Lmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN10@Insert_at:

; 1486 :             }
; 1487 :         } else { // add to right of _Wherenode

	jmp	SHORT $LN7@Insert_at
$LN8@Insert_at:

; 1488 :             _Wherenode->_Right = _Newnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1489 :             if (_Wherenode == _My_data._Rmost()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN7@Insert_at

; 1490 :                 _My_data._Rmost() = _Newnode;

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	edx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], edx
$LN7@Insert_at:

; 1491 :             }
; 1492 :         }
; 1493 : 
; 1494 :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$1[ebp], eax
$LN4@Insert_at:
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movsx	eax, BYTE PTR [edx+12]
	test	eax, eax
	jne	$LN3@Insert_at

; 1495 :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax]
	jne	$LN12@Insert_at

; 1496 :                 _Wherenode = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Wherenode$[ebp], eax

; 1497 :                 if (_Wherenode->_Color == _Red) { // parent has two red children, blacken both

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN14@Insert_at

; 1498 :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 1499 :                     _Wherenode->_Color               = _Black;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 1500 :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 1501 :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$1[ebp], edx

; 1502 :                 } else { // parent has red and black children

	jmp	SHORT $LN15@Insert_at
$LN14@Insert_at:

; 1503 :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN16@Insert_at

; 1504 :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$1[ebp], ecx

; 1505 :                         _My_data._Lrotate(_Pnode);

	mov	edx, DWORD PTR __Pnode$1[ebp]
	push	edx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
$LN16@Insert_at:

; 1506 :                     }
; 1507 : 
; 1508 :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 1509 :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 1510 :                     _My_data._Rrotate(_Pnode->_Parent->_Parent);

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
$LN15@Insert_at:

; 1511 :                 }
; 1512 :             } else { // fixup red-red in right subtree

	jmp	$LN13@Insert_at
$LN12@Insert_at:

; 1513 :                 _Wherenode = _Pnode->_Parent->_Parent->_Left;

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Wherenode$[ebp], edx

; 1514 :                 if (_Wherenode->_Color == _Red) { // parent has two red children, blacken both

	mov	eax, DWORD PTR __Wherenode$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN17@Insert_at

; 1515 :                     _Pnode->_Parent->_Color          = _Black;

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 1516 :                     _Wherenode->_Color               = _Black;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	BYTE PTR [ecx+12], 1

; 1517 :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 1518 :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$1[ebp], ecx

; 1519 :                 } else { // parent has red and black children

	jmp	SHORT $LN13@Insert_at
$LN17@Insert_at:

; 1520 :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN19@Insert_at

; 1521 :                         _Pnode = _Pnode->_Parent;

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$1[ebp], eax

; 1522 :                         _My_data._Rrotate(_Pnode);

	mov	ecx, DWORD PTR __Pnode$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
$LN19@Insert_at:

; 1523 :                     }
; 1524 : 
; 1525 :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 1

; 1526 :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+12], 0

; 1527 :                     _My_data._Lrotate(_Pnode->_Parent->_Parent);

	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
$LN13@Insert_at:

; 1528 :                 }
; 1529 :             }
; 1530 :         }

	jmp	$LN4@Insert_at
$LN3@Insert_at:

; 1531 : 
; 1532 :         _My_data._Root()->_Color = _Black; // root is always black

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+12], 1

; 1533 :         return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
$LN20@Insert_at:

; 1534 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@_NPAU21@ABUTelegram@@U_Not_a_node_tag@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z PROC ; std::forward<Telegram const &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ENDP ; std::forward<Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z
_TEXT	SEGMENT
__Result$ = -1						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z PROC ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>, COMDAT

; 626  :     && noexcept(_Pred(_Right, _Left))) { // test if _Pred(_Left, _Right) and _Pred is strict weak ordering

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 627  :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
	mov	BYTE PTR __Result$[ebp], al

; 628  :     if (_Result) {

	movzx	edx, BYTE PTR __Result$[ebp]
	test	edx, edx
	je	SHORT $LN8@Debug_lt_p
$LN4@Debug_lt_p:

; 629  :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ; std::less<Telegram>::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN7@Debug_lt_p:
	push	OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	629					; 00000275H
	push	OFFSET ??_C@_0GJ@JDFHNMIO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Debug_lt_p
	int	3
$LN12@Debug_lt_p:
	push	0
	push	629					; 00000275H
	push	OFFSET ??_C@_1NC@BFDNAIP@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1CI@JONCLBEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAD?$AAe?$AAb?$AAu?$AAg?$AA_?$AAl?$AAt?$AA_@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Debug_lt_p
$LN2@Debug_lt_p:
	xor	edx, edx
	jne	SHORT $LN4@Debug_lt_p
$LN8@Debug_lt_p:

; 630  :     }
; 631  : 
; 632  :     return _Result;

	mov	al, BYTE PTR __Result$[ebp]

; 633  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z ENDP ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 266  : __PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 1534 : __PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0DA@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0DA@@std@@YAII@Z PROC		; std::_Get_size_of_n<48>, COMDAT

; 24   :     const size_t _Count) noexcept { // gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 25   :     constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 89478485 ; 05555555H

; 26   :     size_t _Result                 = _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 48
	mov	DWORD PTR __Result$[ebp], eax

; 27   :     if (_Max_possible < _Count) { // multiply overflow, try allocating all of memory and assume the

	cmp	DWORD PTR __Count$[ebp], 89478485	; 05555555H
	jbe	SHORT $LN2@Get_size_o

; 28   :                                   // allocation function will throw bad_alloc
; 29   :         _Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   :     }
; 31   : 
; 32   :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0DA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<48>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAAAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<Telegram,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<Telegram,void *> *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<Telegram,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT

; 1313 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1314 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1315 : }

	pop	ebp
	ret	0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 87   :     const size_t _Bytes) { // allocate _Bytes manually aligned to at least _Big_allocation_alignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 88   :     size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 89   :     if (_Block_size <= _Bytes) { // add overflow, try allocating all of memory and assume the

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 90   :                                  // allocation function will throw bad_alloc
; 91   :         _Block_size = static_cast<size_t>(-1);

	mov	DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 92   :     }
; 93   : 
; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	95					; 0000005fH
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	95					; 0000005fH
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 98   : 
; 99   : #ifdef _DEBUG
; 100  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 101  : #endif // _DEBUG
; 102  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 103  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z PROC ; std::forward<std::less<Telegram> const &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z ENDP ; std::forward<std::less<Telegram> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z PROC ; std::addressof<Telegram>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ENDP ; std::addressof<Telegram>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT

; 376  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 377  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 378  :         using _Alnode_traits = allocator_traits<_Alloc>;
; 379  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Left));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 380  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Parent));

	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 381  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Right));

	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 8
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$destroy@PAU?$_Tree_node@UTelegram@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<std::_Tree_node<Telegram,void *> *>
	add	esp, 8

; 382  :         _Alnode_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 383  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_tree<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT
; _this$ = ecx

; 669  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 670  :         // delete a _Tree subtree
; 671  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	eax, DWORD PTR __Rootnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN4@Erase_tree

; 672  :             _Erase_tree(_Al, _Rootnode->_Right);

	mov	edx, DWORD PTR __Rootnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_tree<std::allocator<std::_Tree_node<Telegram,void *> > >

; 673  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

	mov	edx, DWORD PTR __Rootnode$[ebp]
	push	edx
	lea	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	call	??$exchange@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 674  :         }

	jmp	SHORT $LN2@Erase_tree
$LN4@Erase_tree:

; 675  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_tree<std::allocator<std::_Tree_node<Telegram,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1144 :     _Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept { // deallocate a plain pointer using an allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1145 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1146 :     if constexpr (is_same_v<typename _Alloc_traits::pointer, typename _Alloc::value_type*>) {
; 1147 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1148 :     } else {
; 1149 :         using _Ptr_traits = pointer_traits<typename _Alloc_traits::pointer>;
; 1150 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1151 :     }
; 1152 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@AA_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@AA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@AA_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@AA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool &,0>, COMDAT
; _this$ = ecx

; 123  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	call	??$forward@AA_N@std@@YAAA_NAA_N@Z	; std::forward<bool &>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+12], al
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@AA_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@AA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
_TEXT	SEGMENT
tv209 = -128						; size = 4
tv208 = -121						; size = 1
tv207 = -120						; size = 4
tv206 = -116						; size = 4
tv205 = -112						; size = 4
tv204 = -105						; size = 1
tv137 = -104						; size = 4
tv203 = -97						; size = 1
tv202 = -96						; size = 4
tv201 = -92						; size = 4
tv87 = -88						; size = 4
tv200 = -81						; size = 1
tv199 = -80						; size = 4
tv198 = -76						; size = 4
$T2 = -69						; size = 1
$T3 = -68						; size = 4
$T4 = -61						; size = 1
$T5 = -60						; size = 4
$T6 = -53						; size = 1
$T7 = -52						; size = 4
__Where$8 = -44						; size = 4
__Addleft$9 = -33					; size = 1
__Trynode$10 = -32					; size = 4
__Wherenode$11 = -28					; size = 4
__My_data$ = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 1
??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>, COMDAT
; _this$ = ecx

; 1417 :     pair<_Nodeptr, bool> _Insert_nohint(bool _Leftish, _Valty&& _Val, _Nodety _Newnode) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 112				; 00000070H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1418 :         // try to insert node, on left if _Leftish
; 1419 :         auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1420 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1421 :         _Nodeptr _Wherenode = _My_data._Myhead;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Wherenode$11[ebp], ecx

; 1422 :         _Nodeptr _Trynode   = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Wherenode$11[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Trynode$10[ebp], eax

; 1423 :         bool _Addleft       = true; // add to left of head if tree empty

	mov	BYTE PTR __Addleft$9[ebp], 1
$LN2@Insert_noh:

; 1424 : 
; 1425 :         while (!_Trynode->_Isnil) { // look for leaf to insert before (_Addleft) or after

	mov	ecx, DWORD PTR __Trynode$10[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	$LN3@Insert_noh

; 1426 :             _Wherenode = _Trynode;

	mov	eax, DWORD PTR __Trynode$10[ebp]
	mov	DWORD PTR __Wherenode$11[ebp], eax

; 1427 :             if (_Leftish) {

	movzx	ecx, BYTE PTR __Leftish$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@Insert_noh

; 1428 :                 _Addleft = !_DEBUG_LT_PRED(_Getcomp(), _Key(_Trynode),

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv198[ebp], eax
	mov	eax, DWORD PTR __Trynode$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv199[ebp], eax
	mov	ecx, DWORD PTR tv198[ebp]
	push	ecx
	mov	edx, DWORD PTR tv199[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
	add	esp, 12					; 0000000cH
	mov	BYTE PTR tv200[ebp], al
	movzx	eax, BYTE PTR tv200[ebp]
	test	eax, eax
	jne	SHORT $LN14@Insert_noh
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN15@Insert_noh
$LN14@Insert_noh:
	mov	DWORD PTR tv87[ebp], 0
$LN15@Insert_noh:
	mov	cl, BYTE PTR tv87[ebp]
	mov	BYTE PTR __Addleft$9[ebp], cl

; 1429 :                     _Kfn(_Val)); // favor left end
; 1430 :             } else {

	jmp	SHORT $LN6@Insert_noh
$LN5@Insert_noh:

; 1431 :                 _Addleft = _DEBUG_LT_PRED(_Getcomp(), _Kfn(_Val),

	mov	edx, DWORD PTR __Trynode$10[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv201[ebp], eax
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR tv201[ebp]
	push	ecx
	mov	edx, DWORD PTR tv202[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
	add	esp, 12					; 0000000cH
	mov	BYTE PTR tv203[ebp], al
	mov	al, BYTE PTR tv203[ebp]
	mov	BYTE PTR __Addleft$9[ebp], al
$LN6@Insert_noh:

; 1432 :                     _Key(_Trynode)); // favor right end
; 1433 :             }
; 1434 : 
; 1435 :             _Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;

	movzx	ecx, BYTE PTR __Addleft$9[ebp]
	test	ecx, ecx
	je	SHORT $LN16@Insert_noh
	mov	edx, DWORD PTR __Trynode$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN17@Insert_noh
$LN16@Insert_noh:
	mov	ecx, DWORD PTR __Trynode$10[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv137[ebp], edx
$LN17@Insert_noh:
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR __Trynode$10[ebp], eax

; 1436 :         }

	jmp	$LN2@Insert_noh
$LN3@Insert_noh:

; 1437 : 
; 1438 :         if
; 1439 :             _CONSTEXPR_IF(_Multi) {
; 1440 :                 return {_Insert_at(_Addleft, _Wherenode, _STD forward<_Valty>(_Val), _Newnode), true};
; 1441 :             }
; 1442 :         else { // insert only if unique
; 1443 :             _Unchecked_iterator _Where(_Wherenode, nullptr);

	push	0
	mov	ecx, DWORD PTR __Wherenode$11[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Where$8[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>

; 1444 :             if (!_Addleft) { // need to test if insert after is okay

	movzx	edx, BYTE PTR __Addleft$9[ebp]
	test	edx, edx
	jne	SHORT $LN7@Insert_noh
	jmp	SHORT $LN8@Insert_noh
$LN7@Insert_noh:

; 1445 :             } else if (_Where == _Unchecked_begin()) {

	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Unchecked_begin
	push	eax
	lea	ecx, DWORD PTR __Where$8[ebp]
	call	??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator==
	mov	BYTE PTR tv204[ebp], al
	movzx	ecx, BYTE PTR tv204[ebp]
	test	ecx, ecx
	je	SHORT $LN9@Insert_noh

; 1446 :                 return {_Insert_at(true, _Where._Ptr, _STD forward<_Valty>(_Val), _Newnode), true};

	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Where$8[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@_NPAU21@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR $T5[ebp], edx
	mov	BYTE PTR $T6[ebp], 1
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> *,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN13@Insert_noh

; 1447 :             } else {

	jmp	SHORT $LN8@Insert_noh
$LN9@Insert_noh:

; 1448 :                 --_Where; // need to test if insert before is okay

	lea	ecx, DWORD PTR __Where$8[ebp]
	call	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator--
$LN8@Insert_noh:

; 1449 :             }
; 1450 : 
; 1451 :             if (_DEBUG_LT_PRED(_Getcomp(), _Key(_Where._Ptr), _Kfn(_Val))) {

	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
	mov	DWORD PTR tv206[ebp], eax
	mov	eax, DWORD PTR __Where$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
	mov	DWORD PTR tv207[ebp], eax
	mov	ecx, DWORD PTR tv206[ebp]
	push	ecx
	mov	edx, DWORD PTR tv207[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@AAU?$less@UTelegram@@@std@@ABUTelegram@@ABU3@@std@@YA_NAAU?$less@UTelegram@@@0@ABUTelegram@@1@Z ; std::_Debug_lt_pred<std::less<Telegram> &,Telegram const &,Telegram const &>
	add	esp, 12					; 0000000cH
	mov	BYTE PTR tv208[ebp], al
	movzx	eax, BYTE PTR tv208[ebp]
	test	eax, eax
	je	SHORT $LN11@Insert_noh

; 1452 :                 return {_Insert_at(_Addleft, _Wherenode, _STD forward<_Valty>(_Val), _Newnode), true};

	movzx	ecx, BYTE PTR __Newnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$forward@ABUTelegram@@@std@@YAABUTelegram@@ABU1@@Z ; std::forward<Telegram const &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Wherenode$11[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Addleft$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_at@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@UTelegram@@PAX@1@_NPAU21@ABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_at<Telegram const &,std::_Not_a_node_tag>
	mov	DWORD PTR tv209[ebp], eax
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	BYTE PTR $T4[ebp], 1
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> *,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN13@Insert_noh

; 1453 :             } else { // duplicate, don't insert

	jmp	SHORT $LN12@Insert_noh
$LN11@Insert_noh:

; 1454 :                 _Destroy_if_node(_Newnode);

	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node

; 1455 :                 return {_Where._Ptr, false};

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$8[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0AAPAU?$_Tree_node@UTelegram@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@UTelegram@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<Telegram,void *> *,bool>::pair<std::_Tree_node<Telegram,void *> *,bool><std::_Tree_node<Telegram,void *> * &,bool,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN13@Insert_noh
$LN12@Insert_noh:
	jmp	SHORT $LN18@Insert_noh
__catch$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z$0:

; 1456 :             }
; 1457 :         }
; 1458 :         _CATCH_ALL
; 1459 :         _Destroy_if_node(_Newnode);

	movzx	edx, BYTE PTR __Newnode$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node

; 1460 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 1461 :         _CATCH_END

	mov	eax, $LN21@Insert_noh
	ret	0
$LN18@Insert_noh:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN13@Insert_noh
$LN21@Insert_noh:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN13@Insert_noh:

; 1462 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@Insert_noh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN25@Insert_noh:
	DD	1
	DD	$LN24@Insert_noh
$LN24@Insert_noh:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN22@Insert_noh
$LN22@Insert_noh:
	DB	95					; 0000005fH
	DB	87					; 00000057H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Buyheadnode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z PROC ; std::_Tree_node<Telegram,void *>::_Buyheadnode<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT

; 345  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 346  :         // allocate a head node, assumes construction of pointer does not throw
; 347  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buyheadnode call");
; 348  :         using _Alnode_traits = allocator_traits<_Alloc>;
; 349  :         auto _Pnode          = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 350  :         _Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 351  :         _Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 352  :         _Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 8
	push	ecx
	call	??$addressof@PAU?$_Tree_node@UTelegram@@PAX@std@@@std@@YAPAPAU?$_Tree_node@UTelegram@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<Telegram,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_Tree_node@UTelegram@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAPAU?$_Tree_node@UTelegram@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::construct<std::_Tree_node<Telegram,void *> *,std::_Tree_node<Telegram,void *> * &>
	add	esp, 12					; 0000000cH

; 353  :         _Pnode->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 1

; 354  :         _Pnode->_Isnil = true;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+13], 1

; 355  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 356  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Buyheadnod:
	DD	1
	DD	$LN4@Buyheadnod
$LN4@Buyheadnod:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Buyheadnod
$LN3@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<Telegram,void *>::_Buyheadnode<std::allocator<std::_Tree_node<Telegram,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$swap@DX@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Tmp$ = -5						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@DX@std@@YAXAAD0@Z PROC				; std::swap<char,void>, COMDAT

; 53   :         is_nothrow_move_assignable_v<_Ty>) { // exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 54   :     _Ty _Tmp = _STD move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$move@AAD@std@@YA$$QADAAD@Z		; std::move<char &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR __Tmp$[ebp], cl

; 55   :     _Left    = _STD move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAD@std@@YA$$QADAAD@Z		; std::move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 56   :     _Right   = _STD move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$move@AAD@std@@YA$$QADAAD@Z		; std::move<char &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx], dl

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@DX@std@@YAXAAD0@Z ENDP				; std::swap<char,void>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   :     const size_t _Count) noexcept { // gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 25   :     constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 26   :     size_t _Result                 = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __Result$[ebp], eax

; 27   :     if (_Max_possible < _Count) { // multiply overflow, try allocating all of memory and assume the

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 28   :                                   // allocation function will throw bad_alloc
; 29   :         _Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   :     }
; 31   : 
; 32   :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 188  :     void* _Ptr, size_t _Bytes) noexcept { // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 189  :                                           // <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 190  : #if defined(_M_IX86) || defined(_M_X64)
; 191  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 192  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 193  :     }
; 194  : #endif // defined(_M_IX86) || defined(_M_X64)
; 195  : 
; 196  :     ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 197  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 172  :     const size_t _Bytes) { // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 173  : #if defined(_M_IX86) || defined(_M_X64)
; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 175  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 176  :     }
; 177  : #endif // defined(_M_IX86) || defined(_M_X64)
; 178  : 
; 179  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 180  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 181  :     }
; 182  : 
; 183  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 184  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 1517 :           _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1516 :         : _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABU?$less@UTelegram@@@std@@@std@@YAABU?$less@UTelegram@@@0@ABU10@@Z ; std::forward<std::less<Telegram> const &>
	add	esp, 4

; 1517 :           _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	mov	ecx, DWORD PTR _<_Val2_0>$[ebp]
	push	ecx
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
	add	esp, 4
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>

; 1518 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<Telegram,void *>::_Freenode<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT

; 386  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 387  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 388  :         using _Alnode_traits = allocator_traits<_Alloc>;
; 389  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Myval));

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@UTelegram@@@std@@YAPAUTelegram@@AAU1@@Z ; std::addressof<Telegram>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@UTelegram@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@QAUTelegram@@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::destroy<Telegram>
	add	esp, 8

; 390  :         _Freenode0(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 391  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<Telegram,void *>::_Freenode<std::allocator<std::_Tree_node<Telegram,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 813  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) { // deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 814  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 815  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 816  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 294  : inline _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 295  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 296  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z PROC ; std::addressof<Telegram const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ENDP ; std::addressof<Telegram const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >, COMDAT
; _this$ = ecx

; 921  :     constexpr allocator(const allocator<_Other>&) noexcept { // construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 922  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_head<std::allocator<std::_Tree_node<Telegram,void *> > >, COMDAT
; _this$ = ecx

; 678  :     void _Erase_head(_Alnode& _Al) noexcept { // delete a _Tree head node and subtree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 679  :         this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 680  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU?$_Tree_node@UTelegram@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_tree<std::allocator<std::_Tree_node<Telegram,void *> > >

; 681  :         _Alnode::value_type::_Freenode0(_Al, _Myhead);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode0<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 682  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Erase_head@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_head<std::allocator<std::_Tree_node<Telegram,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 94   :     _NODISCARD bool operator==(const _Tree_unchecked_const_iterator& _Right) const { // test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 95   :         return _Ptr == _Right._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]

; 96   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 69   :     _Tree_unchecked_const_iterator& operator--() { // predecrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :         if (_Ptr->_Isnil) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN4@operator

; 71   :             _Ptr = _Ptr->_Right; // end() ==> rightmost

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@operator
$LN4@operator:

; 72   :         } else if (_Ptr->_Left->_Isnil) { // climb looking for left subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN6@operator
$LN2@operator:

; 73   :             _Nodeptr _Pnode;
; 74   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$1[ebp], ecx
	mov	edx, DWORD PTR __Pnode$1[ebp]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@operator

; 75   :                 _Ptr = _Pnode; // ==> parent while left subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [ecx], edx

; 76   :             }

	jmp	SHORT $LN2@operator
$LN3@operator:

; 77   : 
; 78   :             if (!_Ptr->_Isnil) { // decrement non-begin()

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN8@operator

; 79   :                 _Ptr = _Pnode; // ==> parent if not head

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax], ecx
$LN8@operator:

; 80   :             }
; 81   :         } else {

	jmp	SHORT $LN5@operator
$LN6@operator:

; 82   :             _Ptr = _Mytree::_Max(_Ptr->_Left); // ==> largest of left subtree

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
$LN5@operator:

; 83   :         }
; 84   : 
; 85   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 86   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 48   :     _Tree_unchecked_const_iterator& operator++() { // preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 49   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN4@operator
$LN2@operator:

; 50   :             _Nodeptr _Pnode;
; 51   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Pnode$1[ebp], eax
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator

; 52   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax], ecx

; 53   :             }

	jmp	SHORT $LN2@operator
$LN3@operator:

; 54   : 
; 55   :             _Ptr = _Pnode; // ==> parent (head if end())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [edx], eax

; 56   :         } else {

	jmp	SHORT $LN5@operator
$LN4@operator:

; 57   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@operator:

; 58   :         }
; 59   : 
; 60   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 61   :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 35   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 36   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 37   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 38   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z PROC ; std::pointer_traits<Telegram const *>::pointer_to, COMDAT

; 309  :     _NODISCARD static pointer pointer_to(_Reftype _Val) noexcept { // convert raw reference to pointer

	push	ebp
	mov	ebp, esp

; 310  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@$$CBUTelegram@@@std@@YAPBUTelegram@@ABU1@@Z ; std::addressof<Telegram const >
	add	esp, 4

; 311  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ENDP ; std::pointer_traits<Telegram const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1477 :     ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1478 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Container_

; 1479 :             _Delete_plain(_Al, _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN3@Container_:

; 1480 :         }
; 1481 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1463 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1464 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1465 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1466 :         allocator_traits<_Alloc>::construct(_Al, _Ptr, _STD addressof(_Mycont)); // assumed to be non-throwing

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 12					; 0000000cH

; 1467 :         _Mycont._Myproxy = _Ptr;

	mov	eax, DWORD PTR __Mycont$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1468 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1175 :     _Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept { // destroy and deallocate _Ptr using _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1176 :     allocator_traits<_Alloc>::destroy(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 1177 :     _Deallocate_plain(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1178 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 930  :         _CRT_GUARDOVERFLOW const size_t _Count) { // allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 931  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 932  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::~pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 246  :     _NODISCARD _Tree_unchecked_const_iterator<_Mytree> _Unwrapped() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 247  :         return _Tree_unchecked_const_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 248  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->, COMDAT
; _this$ = ecx

; 187  :     _NODISCARD pointer operator->() const { // return pointer to class object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 188  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PBUTelegram@@@std@@SAPBUTelegram@@ABU3@@Z ; std::pointer_traits<Telegram const *>::pointer_to
	add	esp, 4

; 189  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*, COMDAT
; _this$ = ecx

; 177  :     _NODISCARD reference operator*() const { // return designated value

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 178  : #if _ITERATOR_DEBUG_LEVEL != 0
; 179  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 180  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	180					; 000000b4H
	push	OFFSET ??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	180					; 000000b4H
	push	OFFSET ??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 181  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	181					; 000000b5H
	push	OFFSET ??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	181					; 000000b5H
	push	OFFSET ??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NO@FBLHDHCP@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 182  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 183  : 
; 184  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H

; 185  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >, COMDAT
; _this$ = ecx

; 173  :     _Tree_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 174  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>

; 175  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 35   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 36   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 37   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 38   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z
_TEXT	SEGMENT
tv85 = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -36						; size = 12
$T3 = -21						; size = 1
__Result$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1048 :     _Pairib insert(const value_type& _Val) { // try to insert node with value _Val, favoring right side

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 1049 :         auto _Result = _Insert_nohint(false, _Val, _Not_a_node_tag());

	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR __Result$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert_nohint@ABUTelegram@@U_Not_a_node_tag@std@@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@UTelegram@@PAX@std@@_N@1@_NABUTelegram@@U_Not_a_node_tag@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Insert_nohint<Telegram const &,std::_Not_a_node_tag>

; 1050 :         return {iterator(_Result.first, _STD addressof(_Get_data())), _Result.second};

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Result$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	DWORD PTR tv85[ebp], eax
	lea	ecx, DWORD PTR __Result$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR tv85[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@AA_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@1@AA_N@Z ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >,bool &,0>
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1051 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@insert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN8@insert:
	DD	1
	DD	$LN7@insert
$LN7@insert:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN6@insert
$LN6@insert:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ
text$yd	SEGMENT
??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ PROC ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
	call	??1MessageDispatcher@@QAE@XZ
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ ENDP ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\FrameCounter.h
;	COMDAT ?GetCurrentFrame@FrameCounter@@QAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCurrentFrame@FrameCounter@@QAEJXZ PROC		; FrameCounter::GetCurrentFrame, COMDAT
; _this$ = ecx

; 27   :   long GetCurrentFrame(){return m_lCount;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentFrame@FrameCounter@@QAEJXZ ENDP		; FrameCounter::GetCurrentFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$di	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR ?MinFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$di	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR ?MaxFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$di	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR ?MinDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$di	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR ?MaxDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$di	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR ?MaxInt@@3HB, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1MessageDispatcher@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MessageDispatcher@@QAE@XZ PROC			; MessageDispatcher::~MessageDispatcher, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1MessageDispatcher@@QAE@XZ ENDP			; MessageDispatcher::~MessageDispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
_TEXT	SEGMENT
tv207 = -124						; size = 4
tv204 = -120						; size = 4
tv211 = -116						; size = 4
tv137 = -112						; size = 4
tv198 = -108						; size = 4
tv210 = -104						; size = 4
tv193 = -100						; size = 4
tv209 = -96						; size = 4
$T2 = -92						; size = 4
$T3 = -88						; size = 12
$T4 = -76						; size = 4
$T5 = -72						; size = 12
$T6 = -60						; size = 12
$T7 = -48						; size = 12
$T8 = -33						; size = 1
_pReceiver$9 = -32					; size = 4
_telegram$10 = -28					; size = 4
_CurrentTime$ = -24					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ PROC	; MessageDispatcher::DispatchDelayedMessages
; _this$ = ecx

; 104  : { 

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 105  :   //first get current time
; 106  :   double CurrentTime = TickCounter->GetCurrentFrame(); 

	call	?Instance@FrameCounter@@SAPAV1@XZ	; FrameCounter::Instance
	mov	ecx, eax
	call	?GetCurrentFrame@FrameCounter@@QAEJXZ	; FrameCounter::GetCurrentFrame
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _CurrentTime$[ebp], xmm0
$LN2@DispatchDe:

; 107  : 
; 108  :   //now peek at the queue to see if any telegrams need dispatching.
; 109  :   //remove all telegrams from the front of the queue that have gone
; 110  :   //past their sell by date
; 111  :   while( !PriorityQ.empty() &&
; 112  : 	     (PriorityQ.begin()->DispatchTime < CurrentTime) && 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@DispatchDe
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv209[ebp], eax
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR tv193[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv193[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
	movsd	xmm0, QWORD PTR _CurrentTime$[ebp]
	comisd	xmm0, QWORD PTR [eax+16]
	jbe	SHORT $LN5@DispatchDe
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv210[ebp], eax
	mov	edx, DWORD PTR tv210[ebp]
	mov	DWORD PTR tv198[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 2
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR tv198[ebp]
	call	??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEPBUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator->
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@DispatchDe
	mov	DWORD PTR tv137[ebp], 1
	jmp	SHORT $LN6@DispatchDe
$LN5@DispatchDe:
	mov	DWORD PTR tv137[ebp], 0
$LN6@DispatchDe:
	mov	cl, BYTE PTR tv137[ebp]
	mov	BYTE PTR $T8[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T2[ebp]
	and	edx, 2
	je	SHORT $LN11@DispatchDe
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN11@DispatchDe:
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	SHORT $LN12@DispatchDe
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN12@DispatchDe:
	movzx	ecx, BYTE PTR $T8[ebp]
	test	ecx, ecx
	je	$LN3@DispatchDe

; 113  :          (PriorityQ.begin()->DispatchTime > 0) )
; 114  :   {
; 115  :     //read the telegram from the front of the queue
; 116  :     const Telegram& telegram = *PriorityQ.begin();

	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	mov	DWORD PTR tv211[ebp], eax
	mov	eax, DWORD PTR tv211[ebp]
	mov	DWORD PTR tv204[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv204[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBEABUTelegram@@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::operator*
	mov	DWORD PTR _telegram$10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 117  : 
; 118  :     //find the recipient
; 119  :     BaseGameEntity* pReceiver = EntityMgr->GetEntityFromID(telegram.Receiver);

	mov	ecx, DWORD PTR _telegram$10[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?Instance@EntityManager@@SAPAV1@XZ	; EntityManager::Instance
	mov	ecx, eax
	call	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z ; EntityManager::GetEntityFromID
	mov	DWORD PTR _pReceiver$9[ebp], eax

; 120  : 
; 121  :     #ifdef SHOW_MESSAGING_INFO
; 122  :     debug_con << "\nQueued telegram ready for dispatch: Sent to " 
; 123  :          << pReceiver->ID() << ". Msg is "<< telegram.Msg << "";
; 124  :     #endif
; 125  : 
; 126  :     //send the telegram to the recipient
; 127  :     Discharge(pReceiver, telegram);

	mov	eax, DWORD PTR _telegram$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceiver$9[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge

; 128  : 
; 129  : 	//remove it from the queue
; 130  :     PriorityQ.erase(PriorityQ.begin());

	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T4[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
	mov	DWORD PTR tv207[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ

; 131  :   }

	jmp	$LN2@DispatchDe
$LN3@DispatchDe:

; 132  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$0:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN8@DispatchDe
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN8@DispatchDe:
	ret	0
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 2
	je	$LN10@DispatchDe
	and	DWORD PTR $T2[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
$LN10@DispatchDe:
	ret	0
__unwindfunclet$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-120]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?DispatchDelayedMessages@MessageDispatcher@@QAEXXZ ENDP	; MessageDispatcher::DispatchDelayedMessages
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 16
_CurrentTime$2 = -56					; size = 8
_telegram$ = -44					; size = 32
_pReceiver$ = -8					; size = 4
_this$ = -4						; size = 4
_delay$ = 8						; size = 8
_sender$ = 16						; size = 4
_receiver$ = 20						; size = 4
_msg$ = 24						; size = 4
_AdditionalInfo$ = 28					; size = 4
?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z PROC	; MessageDispatcher::DispatchMsg
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 
; 51   :   //get a pointer to the receiver
; 52   :   BaseGameEntity* pReceiver = EntityMgr->GetEntityFromID(receiver);

	mov	eax, DWORD PTR _receiver$[ebp]
	push	eax
	call	?Instance@EntityManager@@SAPAV1@XZ	; EntityManager::Instance
	mov	ecx, eax
	call	?GetEntityFromID@EntityManager@@QBEPAVBaseGameEntity@@H@Z ; EntityManager::GetEntityFromID
	mov	DWORD PTR _pReceiver$[ebp], eax

; 53   : 
; 54   :   //make sure the receiver is valid
; 55   :   if (pReceiver == NULL)

	cmp	DWORD PTR _pReceiver$[ebp], 0
	jne	SHORT $LN2@DispatchMs

; 56   :   {
; 57   :     #ifdef SHOW_MESSAGING_INFO
; 58   :     debug_con << "\nWarning! No Receiver with ID of " << receiver << " found" << "";
; 59   :     #endif
; 60   : 
; 61   :     return;

	jmp	SHORT $LN1@DispatchMs
$LN2@DispatchMs:

; 62   :   }
; 63   :   
; 64   :   //create the telegram
; 65   :   Telegram telegram(0, sender, receiver, msg, AdditionalInfo);

	mov	ecx, DWORD PTR _AdditionalInfo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	mov	eax, DWORD PTR _receiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sender$[ebp]
	push	ecx
	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _telegram$[ebp]
	call	??0Telegram@@QAE@NHHHPAX@Z		; Telegram::Telegram

; 66   :   
; 67   :   //if there is no delay, route telegram immediately                       
; 68   :   if (delay <= 0.0)                                                        

	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _delay$[ebp]
	jb	SHORT $LN3@DispatchMs

; 69   :   {
; 70   :     #ifdef SHOW_MESSAGING_INFO
; 71   :     debug_con << "\nTelegram dispatched at time: " << TickCounter->GetCurrentFrame()
; 72   :          << " by " << sender << " for " << receiver 
; 73   :          << ". Msg is " << msg << "";
; 74   :     #endif
; 75   : 
; 76   :     //send the telegram to the recipient
; 77   :     Discharge(pReceiver, telegram);

	lea	edx, DWORD PTR _telegram$[ebp]
	push	edx
	mov	eax, DWORD PTR _pReceiver$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ; MessageDispatcher::Discharge

; 78   :   }
; 79   : 
; 80   :   //else calculate the time when the telegram should be dispatched
; 81   :   else

	jmp	SHORT $LN4@DispatchMs
$LN3@DispatchMs:

; 82   :   {
; 83   :     double CurrentTime = TickCounter->GetCurrentFrame(); 

	call	?Instance@FrameCounter@@SAPAV1@XZ	; FrameCounter::Instance
	mov	ecx, eax
	call	?GetCurrentFrame@FrameCounter@@QAEJXZ	; FrameCounter::GetCurrentFrame
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _CurrentTime$2[ebp], xmm0

; 84   : 
; 85   :     telegram.DispatchTime = CurrentTime + delay;

	movsd	xmm0, QWORD PTR _CurrentTime$2[ebp]
	addsd	xmm0, QWORD PTR _delay$[ebp]
	movsd	QWORD PTR _telegram$[ebp+16], xmm0

; 86   : 
; 87   :     //and put it in the queue
; 88   :     PriorityQ.insert(telegram);   

	lea	ecx, DWORD PTR _telegram$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@1@ABUTelegram@@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::insert<0,0>
	lea	ecx, DWORD PTR $T1[ebp]
	call	??1?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@_N@std@@QAE@XZ
$LN4@DispatchMs:
$LN1@DispatchMs:

; 89   : 
; 90   :     #ifdef SHOW_MESSAGING_INFO
; 91   :     debug_con << "\nDelayed telegram from " << sender << " recorded at time " 
; 92   :             << TickCounter->GetCurrentFrame() << " for " << receiver
; 93   :             << ". Msg is " << msg << "";
; 94   :     #endif
; 95   :   }
; 96   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@DispatchMs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN9@DispatchMs:
	DD	1
	DD	$LN8@DispatchMs
$LN8@DispatchMs:
	DD	-44					; ffffffd4H
	DD	32					; 00000020H
	DD	$LN7@DispatchMs
$LN7@DispatchMs:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
?DispatchMsg@MessageDispatcher@@QAEXNHHHPAX@Z ENDP	; MessageDispatcher::DispatchMsg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Instance@MessageDispatcher@@SAPAV1@XZ PROC		; MessageDispatcher::Instance

; 17   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Instance@MessageDispatcher@@SAPAV1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 18   :   static MessageDispatcher instance; 

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@Instance
	push	OFFSET ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA, -1
	jne	SHORT $LN2@Instance
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A
	call	??0MessageDispatcher@@AAE@XZ		; MessageDispatcher::MessageDispatcher
	push	OFFSET ??__Finstance@?1??Instance@MessageDispatcher@@SAPAV1@XZ@YAXXZ ; `MessageDispatcher::Instance'::`2'::`dynamic atexit destructor for 'instance''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	call	__Init_thread_footer
	add	esp, 4
$LN2@Instance:

; 19   :   
; 20   :   return &instance;

	mov	eax, OFFSET ?instance@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4V2@A

; 21   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Instance@MessageDispatcher@@SAPAV1@XZ$0:
	push	OFFSET ?$TSS0@?1??Instance@MessageDispatcher@@SAPAV2@XZ@4HA
	call	__Init_thread_abort
	pop	ecx
	ret	0
__ehhandler$?Instance@MessageDispatcher@@SAPAV1@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Instance@MessageDispatcher@@SAPAV1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Instance@MessageDispatcher@@SAPAV1@XZ ENDP		; MessageDispatcher::Instance
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.h
;	COMDAT ??0MessageDispatcher@@AAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MessageDispatcher@@AAE@XZ PROC			; MessageDispatcher::MessageDispatcher, COMDAT
; _this$ = ecx

; 47   :   MessageDispatcher(){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0MessageDispatcher@@AAE@XZ ENDP			; MessageDispatcher::MessageDispatcher
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pReceiver$ = 8						; size = 4
_telegram$ = 12						; size = 4
?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z PROC ; MessageDispatcher::Discharge
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 29   :   if (!pReceiver->HandleMessage(telegram))

	mov	esi, esp
	mov	eax, DWORD PTR _telegram$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pReceiver$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pReceiver$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   :   {
; 31   :     //telegram could not be handled
; 32   :     #ifdef SHOW_MESSAGING_INFO
; 33   :     debug_con << "Message not handled" << "";
; 34   :     #endif
; 35   :   }
; 36   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Discharge@MessageDispatcher@@AAEXPAVBaseGameEntity@@ABUTelegram@@@Z ENDP ; MessageDispatcher::Discharge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::~set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\set
;	COMDAT ??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ PROC ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >, COMDAT
; _this$ = ecx

; 75   :     set() : _Mybase(key_compare()) { // construct empty set from defaults

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >

; 76   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$set@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@@std@@QAE@XZ ENDP ; std::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >::set<Telegram,std::less<Telegram>,std::allocator<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>, COMDAT
; _this$ = ecx

; 1511 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >

; 1512 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ PROC ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1520 :     _Ty1& _Get_first() noexcept { // return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1521 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1522 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ ENDP ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1524 :     const _Ty1& _Get_first() const noexcept { // return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1525 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1526 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1520 :     _Ty1& _Get_first() noexcept { // return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1521 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1522 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnextptr$1 = -24					; size = 4
__Pnext$ = -20						; size = 4
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 639  :     void _Orphan_ptr(const _Nodeptr _Ptr) { // orphan iterators with specified node pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 640  : #if _ITERATOR_DEBUG_LEVEL == 2
; 641  :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 642  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ptr:

; 643  :         while (*_Pnext != nullptr) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Orphan_ptr

; 644  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$1[ebp], edx

; 645  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnextptr$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN6@Orphan_ptr
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN4@Orphan_ptr
	mov	edx, DWORD PTR __Pnextptr$1[ebp]
	cmp	edx, DWORD PTR __Ptr$[ebp]
	je	SHORT $LN4@Orphan_ptr
$LN6@Orphan_ptr:

; 646  :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 647  :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ptr
$LN4@Orphan_ptr:

; 648  :                 (*_Pnext)->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0

; 649  :                 *_Pnext             = (*_Pnext)->_Mynextiter;

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx
$LN5@Orphan_ptr:

; 650  :             }
; 651  :         }

	jmp	SHORT $LN2@Orphan_ptr
$LN3@Orphan_ptr:

; 652  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 653  :         (void) _Ptr;
; 654  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 655  :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ptr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN11@Orphan_ptr:
	DD	1
	DD	$LN10@Orphan_ptr
$LN10@Orphan_ptr:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@Orphan_ptr
$LN9@Orphan_ptr:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv144 = -28						; size = 4
tv133 = -24						; size = 4
__Pnode$ = -20						; size = 4
__Fixnodeparent$ = -16					; size = 4
__Fixnode$ = -12					; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract, COMDAT
; _this$ = ecx

; 497  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) { // extract node at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 498  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Erasednode$[ebp], eax

; 499  :         ++_Where; // save successor iterator for return

	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator++

; 500  : 
; 501  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 502  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 503  :         _Nodeptr _Pnode = _Erasednode;

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 504  : 
; 505  :         if (_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN5@Extract

; 506  :             _Fixnode = _Pnode->_Right; // stitch up right subtree

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Fixnode$[ebp], eax
	jmp	SHORT $LN6@Extract
$LN5@Extract:

; 507  :         } else if (_Pnode->_Right->_Isnil) {

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN7@Extract

; 508  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 509  :         } else { // two subtrees, must lift successor node to replace erased

	jmp	SHORT $LN6@Extract
$LN7@Extract:

; 510  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 511  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Fixnode$[ebp], edx
$LN6@Extract:

; 512  :         }
; 513  : 
; 514  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

	mov	eax, DWORD PTR __Pnode$[ebp]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	$LN9@Extract

; 515  :             _Fixnodeparent = _Erasednode->_Parent;

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 516  :             if (!_Fixnode->_Isnil) {

	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN11@Extract

; 517  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN11@Extract:

; 518  :             }
; 519  : 
; 520  :             if (_Root() == _Erasednode) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN12@Extract

; 521  :                 _Root() = _Fixnode; // link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN13@Extract
$LN12@Extract:

; 522  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN14@Extract

; 523  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [edx], eax

; 524  :             } else {

	jmp	SHORT $LN13@Extract
$LN14@Extract:

; 525  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN13@Extract:

; 526  :             }
; 527  : 
; 528  :             if (_Lmost() == _Erasednode) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN16@Extract

; 529  :                 _Lmost() = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN42@Extract
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN43@Extract
$LN42@Extract:
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
	add	esp, 4
	mov	DWORD PTR tv133[ebp], eax
$LN43@Extract:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR [eax], edx
$LN16@Extract:

; 530  :                                             : _Min(_Fixnode); // smallest in relinked subtree
; 531  :             }
; 532  : 
; 533  :             if (_Rmost() == _Erasednode) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN17@Extract

; 534  :                 _Rmost() = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN44@Extract
	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN45@Extract
$LN44@Extract:
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	push	ecx
	call	?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
	add	esp, 4
	mov	DWORD PTR tv144[ebp], eax
$LN45@Extract:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
	mov	edx, DWORD PTR tv144[ebp]
	mov	DWORD PTR [eax], edx
$LN17@Extract:

; 535  :                                             : _Max(_Fixnode); // largest in relinked subtree
; 536  :             }
; 537  :         } else { // erased has two subtrees, _Pnode is successor to erased

	jmp	$LN10@Extract
$LN9@Extract:

; 538  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 539  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Erasednode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 540  : 
; 541  :             if (_Pnode == _Erasednode->_Right) {

	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN18@Extract

; 542  :                 _Fixnodeparent = _Pnode; // successor is next to erased

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR __Fixnodeparent$[ebp], edx

; 543  :             } else { // successor further down, link in place of erased

	jmp	SHORT $LN19@Extract
$LN18@Extract:

; 544  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx

; 545  :                 if (!_Fixnode->_Isnil) {

	mov	edx, DWORD PTR __Fixnode$[ebp]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	jne	SHORT $LN20@Extract

; 546  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN20@Extract:

; 547  :                 }
; 548  : 
; 549  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 550  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx

; 551  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN19@Extract:

; 552  :             }
; 553  : 
; 554  :             if (_Root() == _Erasednode) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN21@Extract

; 555  :                 _Root() = _Pnode; // link down from root

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN22@Extract
$LN21@Extract:

; 556  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Erasednode$[ebp]
	jne	SHORT $LN23@Extract

; 557  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 558  :             } else {

	jmp	SHORT $LN22@Extract
$LN23@Extract:

; 559  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

	mov	edx, DWORD PTR __Erasednode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN22@Extract:

; 560  :             }
; 561  : 
; 562  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Erasednode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 563  :             _STD swap(_Pnode->_Color, _Erasednode->_Color); // recolor it

	mov	edx, DWORD PTR __Erasednode$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$swap@DX@std@@YAXAAD0@Z		; std::swap<char,void>
	add	esp, 8
$LN10@Extract:

; 564  :         }
; 565  : 
; 566  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

	mov	ecx, DWORD PTR __Erasednode$[ebp]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	$LN25@Extract

; 567  :             for (; _Fixnode != _Root() && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

	jmp	SHORT $LN4@Extract
$LN2@Extract:
	mov	eax, DWORD PTR __Fixnode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Fixnodeparent$[ebp], ecx
$LN4@Extract:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
	mov	edx, DWORD PTR __Fixnode$[ebp]
	cmp	edx, DWORD PTR [eax]
	je	$LN3@Extract
	mov	eax, DWORD PTR __Fixnode$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	cmp	ecx, 1
	jne	$LN3@Extract

; 568  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR __Fixnode$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	$LN26@Extract

; 569  :                     _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnode$[ebp], edx

; 570  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN28@Extract

; 571  :                         _Pnode->_Color         = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 572  :                         _Fixnodeparent->_Color = _Red;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [eax+12], 0

; 573  :                         _Lrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate

; 574  :                         _Pnode = _Fixnodeparent->_Right;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Pnode$[ebp], eax
$LN28@Extract:

; 575  :                     }
; 576  : 
; 577  :                     if (_Pnode->_Isnil) {

	mov	ecx, DWORD PTR __Pnode$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN29@Extract

; 578  :                         _Fixnode = _Fixnodeparent; // shouldn't happen

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 579  :                     } else if (_Pnode->_Left->_Color == _Black

	jmp	$LN30@Extract
$LN29@Extract:

; 580  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	SHORT $LN31@Extract
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	SHORT $LN31@Extract

; 581  :                         _Pnode->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 0

; 582  :                         _Fixnode       = _Fixnodeparent;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 583  :                     } else { // must rearrange right subtree

	jmp	SHORT $LN30@Extract
$LN31@Extract:

; 584  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	SHORT $LN33@Extract

; 585  :                             _Pnode->_Left->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+12], 1

; 586  :                             _Pnode->_Color        = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+12], 0

; 587  :                             _Rrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate

; 588  :                             _Pnode = _Fixnodeparent->_Right;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN33@Extract:

; 589  :                         }
; 590  : 
; 591  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+12], dl

; 592  :                         _Fixnodeparent->_Color = _Black;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [eax+12], 1

; 593  :                         _Pnode->_Right->_Color = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	BYTE PTR [edx+12], 1

; 594  :                         _Lrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate

; 595  :                         break; // tree now recolored/rebalanced

	jmp	$LN3@Extract
$LN30@Extract:

; 596  :                     }
; 597  :                 } else { // fixup right subtree

	jmp	$LN27@Extract
$LN26@Extract:

; 598  :                     _Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Pnode$[ebp], edx

; 599  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN34@Extract

; 600  :                         _Pnode->_Color         = _Black;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+12], 1

; 601  :                         _Fixnodeparent->_Color = _Red;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [eax+12], 0

; 602  :                         _Rrotate(_Fixnodeparent);

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate

; 603  :                         _Pnode = _Fixnodeparent->_Left;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax
$LN34@Extract:

; 604  :                     }
; 605  : 
; 606  :                     if (_Pnode->_Isnil) {

	mov	ecx, DWORD PTR __Pnode$[ebp]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	je	SHORT $LN35@Extract

; 607  :                         _Fixnode = _Fixnodeparent; // shouldn't happen

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], eax

; 608  :                     } else if (_Pnode->_Right->_Color == _Black

	jmp	$LN27@Extract
$LN35@Extract:

; 609  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	SHORT $LN37@Extract
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+12]
	cmp	eax, 1
	jne	SHORT $LN37@Extract

; 610  :                         _Pnode->_Color = _Red;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [ecx+12], 0

; 611  :                         _Fixnode       = _Fixnodeparent;

	mov	edx, DWORD PTR __Fixnodeparent$[ebp]
	mov	DWORD PTR __Fixnode$[ebp], edx

; 612  :                     } else { // must rearrange left subtree

	jmp	SHORT $LN27@Extract
$LN37@Extract:

; 613  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+12]
	cmp	edx, 1
	jne	SHORT $LN39@Extract

; 614  :                             _Pnode->_Right->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx+12], 1

; 615  :                             _Pnode->_Color         = _Red;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [edx+12], 0

; 616  :                             _Lrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate

; 617  :                             _Pnode = _Fixnodeparent->_Left;

	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR __Pnode$[ebp], edx
$LN39@Extract:

; 618  :                         }
; 619  : 
; 620  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Fixnodeparent$[ebp]
	mov	dl, BYTE PTR [ecx+12]
	mov	BYTE PTR [eax+12], dl

; 621  :                         _Fixnodeparent->_Color = _Black;

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	mov	BYTE PTR [eax+12], 1

; 622  :                         _Pnode->_Left->_Color  = _Black;

	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+12], 1

; 623  :                         _Rrotate(_Fixnodeparent);

	mov	eax, DWORD PTR __Fixnodeparent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate

; 624  :                         break; // tree now recolored/rebalanced

	jmp	SHORT $LN3@Extract
$LN27@Extract:

; 625  :                     }
; 626  :                 }
; 627  :             }

	jmp	$LN2@Extract
$LN3@Extract:

; 628  : 
; 629  :             _Fixnode->_Color = _Black; // stopping node is black

	mov	ecx, DWORD PTR __Fixnode$[ebp]
	mov	BYTE PTR [ecx+12], 1
$LN25@Extract:

; 630  :         }
; 631  : 
; 632  :         if (0 < _Mysize) {

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jbe	SHORT $LN40@Extract

; 633  :             --_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN40@Extract:

; 634  :         }
; 635  : 
; 636  :         return _Erasednode;

	mov	eax, DWORD PTR __Erasednode$[ebp]

; 637  :     }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate, COMDAT
; _this$ = ecx

; 475  :     void _Rrotate(_Nodeptr _Wherenode) { // promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 476  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 477  :         _Wherenode->_Left = _Pnode->_Right;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx], ecx

; 478  : 
; 479  :         if (!_Pnode->_Right->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Rrotate

; 480  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 481  :         }
; 482  : 
; 483  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 484  : 
; 485  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Rrotate

; 486  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Rrotate
$LN3@Rrotate:

; 487  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN5@Rrotate

; 488  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 489  :         } else {

	jmp	SHORT $LN4@Rrotate
$LN5@Rrotate:

; 490  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN4@Rrotate:

; 491  :         }
; 492  : 
; 493  :         _Pnode->_Right      = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx+8], eax

; 494  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 495  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate, COMDAT
; _this$ = ecx

; 453  :     void _Lrotate(_Nodeptr _Wherenode) { // promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 454  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 455  :         _Wherenode->_Right = _Pnode->_Left;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx

; 456  : 
; 457  :         if (!_Pnode->_Left->_Isnil) {

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN2@Lrotate

; 458  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 459  :         }
; 460  : 
; 461  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 462  : 
; 463  :         if (_Wherenode == _Myhead->_Parent) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@Lrotate

; 464  :             _Myhead->_Parent = _Pnode;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx
	jmp	SHORT $LN4@Lrotate
$LN3@Lrotate:

; 465  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN5@Lrotate

; 466  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 467  :         } else {

	jmp	SHORT $LN4@Lrotate
$LN5@Lrotate:

; 468  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 469  :         }
; 470  : 
; 471  :         _Pnode->_Left       = _Wherenode;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [edx], eax

; 472  :         _Wherenode->_Parent = _Pnode;

	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 473  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXPAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost, COMDAT
; _this$ = ecx

; 449  :     _Nodeptr& _Rmost() const { // return rightmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 450  :         return _Myhead->_Right;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 8

; 451  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost, COMDAT
; _this$ = ecx

; 445  :     _Nodeptr& _Lmost() const { // return leftmost node in nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 446  :         return _Myhead->_Left;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 447  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root, COMDAT
; _this$ = ecx

; 441  :     _Nodeptr& _Root() const { // return root of nonmutable tree

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 442  :         return _Myhead->_Parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 4

; 443  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Root@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Root
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min, COMDAT

; 433  :     static _Nodeptr _Min(_Nodeptr _Pnode) { // return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Min:

; 434  :         while (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Min

; 435  :             _Pnode = _Pnode->_Left;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 436  :         }

	jmp	SHORT $LN2@Min
$LN3@Min:

; 437  : 
; 438  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 439  :     }

	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max, COMDAT

; 425  :     static _Nodeptr _Max(_Nodeptr _Pnode) { // return rightmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
$LN2@Max:

; 426  :         while (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Max

; 427  :             _Pnode = _Pnode->_Right;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 428  :         }

	jmp	SHORT $LN2@Max
$LN3@Max:

; 429  : 
; 430  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 431  :     }

	pop	ebp
	ret	0
?_Max@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@SAPAU?$_Tree_node@UTelegram@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >, COMDAT
; _this$ = ecx

; 417  :     _Tree_val() : _Myhead(), _Mysize(0) { // initialize data

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 418  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Tree_val<std::_Tree_simple_types<Telegram> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z PROC	; std::less<Telegram>::operator(), COMDAT
; _this$ = ecx

; 123  :     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const { // apply operator< to operands

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 124  :         return _Left < _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??M@YA_NABUTelegram@@0@Z		; operator<
	add	esp, 8

; 125  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@UTelegram@@@std@@QBE_NABUTelegram@@0@Z ENDP	; std::less<Telegram>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1890 :     const _Scary_val& _Get_data() const noexcept { // return const reference to _Scary_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1891 :         return _Mypair._Myval2._Myval2;

	mov	eax, DWORD PTR _this$[ebp]

; 1892 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1886 :     _Scary_val& _Get_data() noexcept { // return reference to _Scary_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1887 :         return _Mypair._Myval2._Myval2;

	mov	eax, DWORD PTR _this$[ebp]

; 1888 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal, COMDAT
; _this$ = ecx

; 1882 :     const _Alnode& _Getal() const noexcept { // return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1883 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first

; 1884 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal, COMDAT
; _this$ = ecx

; 1878 :     _Alnode& _Getal() noexcept { // return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1879 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>::_Get_first

; 1880 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1870 :     key_compare& _Getcomp() noexcept { // return reference to ordering predicate

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1871 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@UTelegram@@@2@XZ ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Get_first

; 1872 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAU?$less@UTelegram@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Proxy$ = -48						; size = 8
_$S17$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1857 :     void _Alloc_sentinel_and_proxy() { // construct head node, proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1858 :         auto& _My_data  = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1859 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S17$[ebp]
	call	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
	lea	eax, DWORD PTR _$S17$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1860 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, _My_data);

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1861 :         _My_data._Myhead = _Node::_Buyheadnode(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	??$_Buyheadnode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::_Tree_node<Telegram,void *>::_Buyheadnode<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 4
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1862 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 1863 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Alloc_sent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@Alloc_sent:
	DD	2
	DD	$LN7@Alloc_sent
$LN7@Alloc_sent:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Alloc_sent
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN5@Alloc_sent
$LN5@Alloc_sent:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN4@Alloc_sent:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	55					; 00000037H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_sentinel_and_proxy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key, COMDAT
; _this$ = ecx

; 1673 :     const key_type& _Key(_Nodeptr _Pnode) const { // return reference to key in node

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1674 :         return _Kfn(_Pnode->_Myval);

	mov	eax, DWORD PTR __Pnode$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn

; 1675 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Key@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@PAU?$_Tree_node@UTelegram@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn, COMDAT
; _this$ = ecx

; 1669 :     const key_type& _Kfn(const value_type& _Val) const { // get key from value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1670 :         return _Traits::_Kfn(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
	add	esp, 4

; 1671 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Kfn@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABUTelegram@@ABU3@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node, COMDAT
; _this$ = ecx

; 1335 :     void _Destroy_if_node(_Not_a_node_tag) { // node doesn't exist, do nothing

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1336 :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Destroy_if_node@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXU_Not_a_node_tag@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Destroy_if_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__My_data_ptr$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase, COMDAT
; _this$ = ecx

; 1139 :     iterator erase(const_iterator _Where) { // erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1140 :         const auto _My_data_ptr = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	mov	DWORD PTR __My_data_ptr$[ebp], eax
$LN4@erase:

; 1141 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1142 :         _STL_VERIFY(_Where._Getcont() == _My_data_ptr, "map/set erase iterator from incorrect container");

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	eax, DWORD PTR __My_data_ptr$[ebp]
	jne	SHORT $LN7@erase
	jmp	SHORT $LN2@erase
$LN7@erase:
	push	OFFSET ??_C@_0DA@GGPHOHEL@map?1set?5erase?5iterator?5from?5inc@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1142					; 00000476H
	push	OFFSET ??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@erase
	int	3
$LN19@erase:
	push	0
	push	1142					; 00000476H
	push	OFFSET ??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1GE@FENJBJJO@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@erase
$LN2@erase:
	xor	edx, edx
	jne	SHORT $LN4@erase
$LN10@erase:

; 1143 :         _STL_VERIFY(!_Where._Ptr->_Isnil, "cannot erase map/set end() iterator");

	mov	eax, DWORD PTR __Where$[ebp+8]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN13@erase
	jmp	SHORT $LN8@erase
$LN13@erase:
	push	OFFSET ??_C@_0CE@JAJNKOFK@cannot?5erase?5map?1set?5end?$CI?$CJ?5iter@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1143					; 00000477H
	push	OFFSET ??_C@_0GG@HMMHJGND@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@erase
	int	3
$LN20@erase:
	push	0
	push	1143					; 00000477H
	push	OFFSET ??_C@_1MM@PBENPNFD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAO@LAKEHICC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAT?$AAr?$AAe?$AAe?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1EM@MEAEPHLP@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAm@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@erase
$LN8@erase:
	xor	ecx, ecx
	jne	SHORT $LN10@erase

; 1144 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1145 :         return iterator(_Erase_unchecked(_Where._Unwrapped()), _My_data_ptr);

	mov	edx, DWORD PTR __My_data_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Unwrapped
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Erase_unchecked@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase_unchecked
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1146 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@V32@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::erase
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Erasednode$ = -24					; size = 4
__Successor$ = -16					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1102 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1103 :         auto& _My_data                       = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1104 :         _Unchecked_const_iterator _Successor = _Where;

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Successor$[ebp], eax

; 1105 :         ++_Successor; // save successor iterator for return

	lea	ecx, DWORD PTR __Successor$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::operator++

; 1106 :         _Nodeptr _Erasednode = _My_data._Extract(_Where); // node to erase

	mov	ecx, DWORD PTR __Where$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Extract@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Extract
	mov	DWORD PTR __Erasednode$[ebp], eax

; 1107 :         _My_data._Orphan_ptr(_Erasednode);

	mov	edx, DWORD PTR __Erasednode$[ebp]
	push	edx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Orphan_ptr

; 1108 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node

	mov	eax, DWORD PTR __Erasednode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	??$_Freenode@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_node@UTelegram@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<Telegram,void *>::_Freenode<std::allocator<std::_Tree_node<Telegram,void *> > >
	add	esp, 8

; 1109 :         return _Successor._Ptr; // return successor nodeptr

	mov	eax, DWORD PTR __Successor$[ebp]

; 1110 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Erase_unch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@Erase_unch:
	DD	1
	DD	$LN4@Erase_unch
$LN4@Erase_unch:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN3@Erase_unch
$LN3@Erase_unch:
	DB	95					; 0000005fH
	DB	83					; 00000053H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?_Erase_unchecked@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@UTelegram@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty, COMDAT
; _this$ = ecx

; 1031 :     _NODISCARD bool empty() const noexcept { // return true only if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1032 :         return size() == 0;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
	test	eax, eax
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv67[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv67[ebp]

; 1033 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size, COMDAT
; _this$ = ecx

; 1027 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1028 :         return _Alnode_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
	add	esp, 4

; 1029 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size, COMDAT
; _this$ = ecx

; 1023 :     _NODISCARD size_type size() const noexcept { // return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1024 :         return _Get_data()._Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IBEABV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	eax, DWORD PTR [eax+8]

; 1025 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 970  :     _Unchecked_iterator _Unchecked_begin() noexcept { // return unchecked iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 971  :         return _Unchecked_iterator(_Get_data()._Lmost(), nullptr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	ecx, eax
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> >,std::_Iterator_base0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 972  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Unchecked_begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Unchecked_begin
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin, COMDAT
; _this$ = ecx

; 950  :     _NODISCARD iterator begin() noexcept { // return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 951  :         auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 952  :         return iterator(_My_data._Lmost(), _STD addressof(_My_data));

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QBEAAPAU?$_Tree_node@UTelegram@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Lmost
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@UTelegram@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Telegram> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 953  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::begin
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_$S4$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 904  :     ~_Tree() noexcept { // destroy tree

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 905  :         _Get_data()._Erase_head(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	ecx, eax
	call	??$_Erase_head@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<Telegram> >::_Erase_head<std::allocator<std::_Tree_node<Telegram,void *> > >

; 906  : #if _ITERATOR_DEBUG_LEVEL != 0
; 907  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S4$[ebp]
	call	??$?0U?$_Tree_node@UTelegram@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<Telegram,void *> >
	lea	eax, DWORD PTR _$S4$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 908  :         _Delete_plain(_Alproxy, _Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEAAV?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@XZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Get_data
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 909  : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 910  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Tree
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Tree:
	DD	1
	DD	$LN4@Tree
$LN4@Tree:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@Tree
$LN3@Tree:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	52					; 00000034H
	DB	0
??1?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::~_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z
_TEXT	SEGMENT
$T1 = -6						; size = 1
$T2 = -5						; size = 1
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z PROC ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >, COMDAT
; _this$ = ecx

; 768  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t(), _Parg, _Zero_then_variadic_args_t()) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABU?$less@UTelegram@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@UTelegram@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UTelegram@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@UTelegram@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1>::_Compressed_pair<std::less<Telegram>,std::_Compressed_pair<std::allocator<std::_Tree_node<Telegram,void *> >,std::_Tree_val<std::_Tree_simple_types<Telegram> >,1>,1><std::less<Telegram> const &,std::_Zero_then_variadic_args_t>

; 769  :         // construct empty tree from comparator
; 770  :         _Alloc_sentinel_and_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Alloc_sentinel_and_proxy

; 771  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@@std@@QAE@ABU?$less@UTelegram@@@1@@Z ENDP ; std::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >::_Tree<std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size, COMDAT

; 828  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept { // get maximum size

	push	ebp
	mov	ebp, esp

; 829  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 89478485				; 05555555H

; 830  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate, COMDAT

; 813  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) { // deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 814  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 815  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 48
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 816  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@2@QAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<Telegram,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate, COMDAT
; _this$ = ecx

; 930  :         _CRT_GUARDOVERFLOW const size_t _Count) { // allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 931  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0DA@@std@@YAII@Z	; std::_Get_size_of_n<48>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 932  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEPAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate, COMDAT
; _this$ = ecx

; 924  :     void deallocate(_Ty* const _Ptr, const size_t _Count) { // deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 925  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 926  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 48
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 927  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAEXQAU?$_Tree_node@UTelegram@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >, COMDAT
; _this$ = ecx

; 916  :     constexpr allocator() noexcept { // construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@UTelegram@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<Telegram,void *> >::allocator<std::_Tree_node<Telegram,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\set
;	COMDAT ?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z PROC ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn, COMDAT

; 39   :     static const _Kty& _Kfn(const value_type& _Val) { // extract key from element value

	push	ebp
	mov	ebp, esp

; 40   :         return _Val;

	mov	eax, DWORD PTR __Val$[ebp]

; 41   :     }

	pop	ebp
	ret	0
?_Kfn@?$_Tset_traits@UTelegram@@U?$less@UTelegram@@@std@@V?$allocator@UTelegram@@@3@$0A@@std@@SAABUTelegram@@ABU3@@Z ENDP ; std::_Tset_traits<Telegram,std::less<Telegram>,std::allocator<Telegram>,0>::_Kfn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\Telegram.h
;	COMDAT ??M@YA_NABUTelegram@@0@Z
_TEXT	SEGMENT
tv72 = -4						; size = 4
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??M@YA_NABUTelegram@@0@Z PROC				; operator<, COMDAT

; 76   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 77   :   if (t1 == t2)

	mov	eax, DWORD PTR _t2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t1$[ebp]
	push	ecx
	call	??8@YA_NABUTelegram@@0@Z		; operator==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@operator

; 78   :   {
; 79   :     return false;

	xor	al, al
	jmp	SHORT $LN3@operator

; 80   :   }
; 81   : 
; 82   :   else

	jmp	SHORT $LN3@operator
$LN2@operator:

; 83   :   {
; 84   :     return  (t1.DispatchTime < t2.DispatchTime);

	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR _t1$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jbe	SHORT $LN5@operator
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	DWORD PTR tv72[ebp], 0
$LN6@operator:
	mov	al, BYTE PTR tv72[ebp]
$LN3@operator:

; 85   :   }
; 86   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??M@YA_NABUTelegram@@0@Z ENDP				; operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\Telegram.h
;	COMDAT ??8@YA_NABUTelegram@@0@Z
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv88 = -8						; size = 8
_t1$ = 8						; size = 4
_t2$ = 12						; size = 4
??8@YA_NABUTelegram@@0@Z PROC				; operator==, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 69   :   return ( fabs(t1.DispatchTime-t2.DispatchTime) < SmallestDelay) &&

	mov	eax, DWORD PTR _t1$[ebp]
	mov	ecx, DWORD PTR _t2$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	subsd	xmm0, QWORD PTR [ecx+16]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv88[ebp]
	movsd	xmm0, QWORD PTR __real@3fd0000000000000
	comisd	xmm0, QWORD PTR tv88[ebp]
	jbe	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN3@operator
	mov	edx, DWORD PTR _t1$[ebp]
	mov	eax, DWORD PTR _t2$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv79[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv79[ebp]

; 70   :           (t1.Sender == t2.Sender)        &&
; 71   :           (t1.Receiver == t2.Receiver)    &&
; 72   :           (t1.Msg == t2.Msg);
; 73   : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??8@YA_NABUTelegram@@0@Z ENDP				; operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\Telegram.h
;	COMDAT ??0Telegram@@QAE@NHHHPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
_sender$ = 16						; size = 4
_receiver$ = 20						; size = 4
_msg$ = 24						; size = 4
_info$ = 28						; size = 4
??0Telegram@@QAE@NHHHPAX@Z PROC				; Telegram::Telegram, COMDAT
; _this$ = ecx

; 55   :   {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :                                Sender(sender),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sender$[ebp]
	mov	DWORD PTR [eax], ecx

; 52   :                                Receiver(receiver),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _receiver$[ebp]
	mov	DWORD PTR [edx+4], eax

; 53   :                                Msg(msg),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _msg$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 50   :            void*  info = NULL): DispatchTime(time),

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _time$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 54   :                                ExtraInfo(info)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 55   :   {}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0Telegram@@QAE@NHHHPAX@Z ENDP				; Telegram::Telegram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 95   :         __CLR_OR_THIS_CALL id(size_t _Val = 0) : _Id(_Val) { // construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 96   :         }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1443 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1444 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1445 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 1359 :     void _Orphan_me() noexcept { // cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1360 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1361 :         if (_Myproxy != nullptr) { // adopted, remove self from list

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN13@Orphan_me

; 1362 :             _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN2@Orphan_me:

; 1363 :             while (*_Pnext != nullptr && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me

; 1364 :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx

; 1365 :             }

	jmp	SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 1366 : 
; 1367 :             _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me
	jmp	SHORT $LN4@Orphan_me
$LN9@Orphan_me:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1367					; 00000557H
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me
	int	3
$LN14@Orphan_me:
	push	0
	push	1367					; 00000557H
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me
$LN4@Orphan_me:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me

; 1368 :             *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1369 :             _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me:

; 1370 :         }
; 1371 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1372 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1355 :     const _Container_base12* _Getcont() const noexcept { // get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1356 :         return _Myproxy == nullptr ? nullptr : _Myproxy->_Mycont;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1357 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1331 :     void _Adopt(const _Container_base12* _Parent) noexcept { // adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1332 :         if (_Parent == nullptr) { // no future parent, just disown current parent

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt

; 1333 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1334 :             _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1335 :             _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1336 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1337 :         } else { // have a parent, do adoption

	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 1338 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 1339 : 
; 1340 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 :             if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN5@Adopt

; 1342 :                 _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1343 :                 _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1344 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 1345 :                 _Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1346 :                 _Myproxy                    = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 1347 :             }

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Adopt:

; 1348 : 
; 1349 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1350 :             _Myproxy = _Parent_proxy;
; 1351 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1352 :         }
; 1353 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@Adopt:
	DD	2
	DD	$LN9@Adopt
$LN9@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@Adopt
$LN7@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1324 :     ~_Iterator_base12() noexcept { // destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1325 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1326 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1327 :         _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1328 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1329 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Iterator_b:
	DD	1
	DD	$LN5@Iterator_b
$LN5@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1309 :     _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept { // assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1310 :         if (_Myproxy != _Right._Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@operator

; 1311 :             if (_Right._Myproxy == nullptr) { // becoming invalid, disown current parent

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator

; 1312 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1313 :                 _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1314 :                 _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1315 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1316 :             } else {

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	jmp	SHORT $LN2@operator
$LN3@operator:

; 1317 :                 _Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN2@operator:

; 1318 :             }
; 1319 :         }
; 1320 : 
; 1321 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1322 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1304 :     _Iterator_base12(const _Iterator_base12& _Right) noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1305 :         : _Myproxy(nullptr), _Mynextiter(nullptr) { // copy an iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1306 :         *this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 1307 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1301 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) { // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1302 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1381 : inline void _Container_base12::_Orphan_all() noexcept { // orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1382 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1383 :     if (_Myproxy != nullptr) { // proxy allocated, drain it

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 1384 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1385 : 
; 1386 :         for (_Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter; *_Pnext != nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 1387 :              *_Pnext                   = (*_Pnext)->_Mynextiter) {

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:

; 1385 : 
; 1386 :         for (_Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter; *_Pnext != nullptr;

	mov	ecx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 1388 :             (*_Pnext)->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0

; 1389 :         }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1390 : 
; 1391 :         _Myproxy->_Myfirstiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 1392 :     }

	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 1393 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1394 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1270 :     _Container_base12() : _Myproxy(nullptr) { // construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1271 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1262 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 1248 :     void _Adopt(const void*) noexcept { // adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1249 :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 107  :     size_t& _Bytes) { // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 108  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 109  : 
; 110  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	115					; 00000073H
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	115					; 00000073H
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	125					; 0000007dH
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	125					; 0000007dH
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 127  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 49   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 50   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 51   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 873  :     _NODISCARD static constexpr double(max)() noexcept { // return maximum value

	push	ebp
	mov	ebp, esp

; 874  :         return DBL_MAX;

	fld	QWORD PTR __real@7fefffffffffffff

; 875  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 869  :     _NODISCARD static constexpr double(min)() noexcept { // return minimum value

	push	ebp
	mov	ebp, esp

; 870  :         return DBL_MIN;

	fld	QWORD PTR __real@0010000000000000

; 871  :     }

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 824  :     _NODISCARD static constexpr float(max)() noexcept { // return maximum value

	push	ebp
	mov	ebp, esp

; 825  :         return FLT_MAX;

	fld	DWORD PTR __real@7f7fffff

; 826  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 820  :     _NODISCARD static constexpr float(min)() noexcept { // return minimum value

	push	ebp
	mov	ebp, esp

; 821  :         return FLT_MIN;

	fld	DWORD PTR __real@00800000

; 822  :     }

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 507  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

	push	ebp
	mov	ebp, esp

; 508  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 509  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\Messaging\MessageDispatcher.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
