; Listing generated by Microsoft (R) Optimizing Compiler Version 19.21.27702.2 

	TITLE	C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?colors@@3QBKB DD 0ffH					; colors
	DD	0ff0000H
	DD	0ff00H
	DD	00H
	DD	0c8c8ffH
	DD	0c8c8c8H
	DD	0ffffH
	DD	0aaffH
	DD	0aa00ffH
	DD	05a85H
	DD	0ffffffH
	DD	06400H
	DD	0ffff00H
	DD	0c8c8c8H
	DD	0e6e6ffH
$SG153406 DB	'RIP', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?min@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::min
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	?min@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::min
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??0_Iterator_base12@std@@QAE@ABU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Orphan_me@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Orphan_me
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Orphan_all@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Orphan_all
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
PUBLIC	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??0Vector2D@@QAE@NN@Z				; Vector2D::Vector2D
PUBLIC	?Perp@Vector2D@@QBE?AU1@XZ			; Vector2D::Perp
PUBLIC	?GetTickCount@CrudeTimer@@QAENXZ		; CrudeTimer::GetTickCount
PUBLIC	??0GraveRecord@GraveMarkers@@QAE@UVector2D@@@Z	; GraveMarkers::GraveRecord::GraveRecord
PUBLIC	??0?$allocator@UVector2D@@@std@@QAE@XZ		; std::allocator<Vector2D>::allocator<Vector2D>
PUBLIC	?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z ; std::allocator<Vector2D>::deallocate
PUBLIC	?allocate@?$allocator@UVector2D@@@std@@QAEPAUVector2D@@I@Z ; std::allocator<Vector2D>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAIABV?$allocator@UVector2D@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SA?AV?$allocator@UVector2D@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::select_on_container_copy_construction
PUBLIC	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
PUBLIC	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
PUBLIC	?_Take_contents@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Take_contents
PUBLIC	?_Move_construct@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_construct
PUBLIC	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
PUBLIC	?_Move_assign@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_assign
PUBLIC	??4?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator=
PUBLIC	??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >
PUBLIC	?push_back@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXABUVector2D@@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::push_back
PUBLIC	?size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::size
PUBLIC	?max_size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::max_size
PUBLIC	?capacity@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::capacity
PUBLIC	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
PUBLIC	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
PUBLIC	?_Umove@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU3@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00U?$integral_constant@_N$00@2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEII@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXI@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Buy_raw
PUBLIC	?_Change_array@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXQAUVector2D@@II@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Change_array
PUBLIC	?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Tidy
PUBLIC	?_Xlength@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@CAXXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEXPAUVector2D@@0@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Orphan_range
PUBLIC	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
PUBLIC	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEABV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Vector2D> >::_Vector_val<std::_Simple_types<Vector2D> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAEAAV?$allocator@UVector2D@@@2@XZ ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QBEABV?$allocator@UVector2D@@@2@XZ ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first
PUBLIC	??0?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEXQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@QAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::max_size
PUBLIC	??0?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >
PUBLIC	?push_back@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEX$$QAUGraveRecord@GraveMarkers@@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::push_back
PUBLIC	??1?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::~list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >
PUBLIC	?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::begin
PUBLIC	?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::end
PUBLIC	?_Unchecked_end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unchecked_end
PUBLIC	?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Make_iter
PUBLIC	?max_size@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBEIXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::max_size
PUBLIC	?_Unlinknode@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unlinknode
PUBLIC	?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::erase
PUBLIC	?_Tidy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Tidy
PUBLIC	?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Orphan_ptr2
PUBLIC	?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
PUBLIC	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
PUBLIC	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
PUBLIC	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
PUBLIC	?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead
PUBLIC	?_Mysize@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAIXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Mysize
PUBLIC	??0?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first
PUBLIC	??0GraveMarkers@@QAE@N@Z			; GraveMarkers::GraveMarkers
PUBLIC	?Update@GraveMarkers@@QAEXXZ			; GraveMarkers::Update
PUBLIC	?Render@GraveMarkers@@QAEXXZ			; GraveMarkers::Render
PUBLIC	?AddGrave@GraveMarkers@@QAEXUVector2D@@@Z	; GraveMarkers::AddGrave
PUBLIC	?BrownPen@Cgdi@@QAEXXZ				; Cgdi::BrownPen
PUBLIC	?TextAtPos@Cgdi@@QAEXNNABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Cgdi::TextAtPos
PUBLIC	?TextColor@Cgdi@@QAEXHHH@Z			; Cgdi::TextColor
PUBLIC	?ClosedShape@Cgdi@@QAEXABV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z ; Cgdi::ClosedShape
PUBLIC	??0Matrix@C2DMatrix@@QAE@XZ			; C2DMatrix::Matrix::Matrix
PUBLIC	?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z	; C2DMatrix::MatrixMultiply
PUBLIC	??0C2DMatrix@@QAE@XZ				; C2DMatrix::C2DMatrix
PUBLIC	?Identity@C2DMatrix@@QAEXXZ			; C2DMatrix::Identity
PUBLIC	?Translate@C2DMatrix@@QAEXNN@Z			; C2DMatrix::Translate
PUBLIC	?Scale@C2DMatrix@@QAEXNN@Z			; C2DMatrix::Scale
PUBLIC	?Rotate@C2DMatrix@@QAEXABUVector2D@@0@Z		; C2DMatrix::Rotate
PUBLIC	?TransformVector2Ds@C2DMatrix@@QAEXAAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z ; C2DMatrix::TransformVector2Ds
PUBLIC	?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z ; WorldTransform
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
PUBLIC	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
PUBLIC	??4?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::operator=
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEABUGraveRecord@GraveMarkers@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator==
PUBLIC	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator!=
PUBLIC	?_Unwrapped@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_Unwrapped
PUBLIC	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??4?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator=
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEAAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*
PUBLIC	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->
PUBLIC	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
PUBLIC	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::~_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??4?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator=
PUBLIC	?pointer_to@?$pointer_traits@PAUGraveRecord@GraveMarkers@@@std@@SAPAUGraveRecord@GraveMarkers@@AAU34@@Z ; std::pointer_traits<GraveMarkers::GraveRecord *>::pointer_to
PUBLIC	??$move@AAUVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ; std::move<Vector2D &>
PUBLIC	??$forward@UVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ; std::forward<Vector2D>
PUBLIC	??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z ; std::_Unfancy<Vector2D>
PUBLIC	??$construct@UVector2D@@U1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D>
PUBLIC	??$emplace_back@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABUVector2D@@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::emplace_back<Vector2D const &>
PUBLIC	??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ; std::forward<Vector2D const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAE@ABUVector2D@@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_back_with_unused_capacity<Vector2D const &>
PUBLIC	??$construct@UVector2D@@ABU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D const &>
PUBLIC	??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_reallocate<Vector2D const &>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@YAPAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@0@AAV10@@Z ; std::addressof<std::vector<Vector2D,std::allocator<Vector2D> > >
PUBLIC	??$move@AAV?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ; std::move<std::allocator<Vector2D> &>
PUBLIC	??$?0V?$allocator@UVector2D@@@std@@$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UVector2D@@@1@@Z ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><std::allocator<Vector2D> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Tidy_guard@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >::~_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >
PUBLIC	??$_Ucopy@PAUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU2@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Ucopy<Vector2D *>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><>
PUBLIC	??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>
PUBLIC	??$_Get_unwrapped@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@$0A@@std@@YA@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >,0>
PUBLIC	??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
PUBLIC	??$?0U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<GraveMarkers::GraveRecord,void *> >
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
PUBLIC	??$move@AAUGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::move<GraveMarkers::GraveRecord &>
PUBLIC	??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Insert<GraveMarkers::GraveRecord>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1><>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::addressof<GraveMarkers::GraveRecord>
PUBLIC	??$_Pocma@V?$allocator@UVector2D@@@std@@@std@@YAXAAV?$allocator@UVector2D@@@0@0@Z ; std::_Pocma<std::allocator<Vector2D> >
PUBLIC	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
PUBLIC	??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * &>
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Free_non_head<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode0<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
PUBLIC	??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@ABV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > const >
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Get_size_of_n@$0CA@@std@@YAII@Z		; std::_Get_size_of_n<32>
PUBLIC	??$_Destroy_range@V?$allocator@UVector2D@@@std@@@std@@YAXPAUVector2D@@0AAV?$allocator@UVector2D@@@0@@Z ; std::_Destroy_range<std::allocator<Vector2D> >
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YAII@Z		; std::_Get_size_of_n<16>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ; std::forward<std::allocator<Vector2D> >
PUBLIC	??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ; std::_Uninitialized_copy<Vector2D *,Vector2D *,std::allocator<Vector2D> >
PUBLIC	??$destroy@UGraveRecord@GraveMarkers@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<GraveMarkers::GraveRecord>
PUBLIC	??0?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
PUBLIC	??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::~_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
PUBLIC	?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Transfer_before
PUBLIC	??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::forward<GraveMarkers::GraveRecord>
PUBLIC	??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Allocate<GraveMarkers::GraveRecord>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$forward@AAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * &>
PUBLIC	??$destroy@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<std::_List_node<GraveMarkers::GraveRecord,void *> *>
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@ABQAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
PUBLIC	??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@PAU12@@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QAPAU10@@Z ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> *>
PUBLIC	??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ; std::_Uninitialized_move<Vector2D *,Vector2D *,std::allocator<Vector2D> >
PUBLIC	??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z ; std::_Get_unwrapped<Vector2D>
PUBLIC	??$_Idl_distance@PAUVector2D@@PAU1@@std@@YA@ABQAUVector2D@@0@Z ; std::_Idl_distance<Vector2D *,Vector2D *>
PUBLIC	??$_Get_unwrapped_n@UVector2D@@H$0A@@std@@YAPAUVector2D@@QAU1@H@Z ; std::_Get_unwrapped_n<Vector2D,int,0>
PUBLIC	??0?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@PAUVector2D@@AAV?$allocator@UVector2D@@@1@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
PUBLIC	??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Release
PUBLIC	??$_Emplace_back@AAUVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXAAUVector2D@@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D &>
PUBLIC	??$_Seek_wrapped@UVector2D@@@std@@YAXAAPAUVector2D@@QAU1@@Z ; std::_Seek_wrapped<Vector2D>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
PUBLIC	??$construct@UGraveRecord@GraveMarkers@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@$$QAU34@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<GraveMarkers::GraveRecord,GraveMarkers::GraveRecord>
PUBLIC	??$forward@ABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@ABQAU10@@Z ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
PUBLIC	??$_Emplace_back@UVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEX$$QAUVector2D@@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D>
PUBLIC	??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@$$T@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::nullptr_t>
PUBLIC	??$forward@AAUVector2D@@@std@@YAAAUVector2D@@AAU1@@Z ; std::forward<Vector2D &>
PUBLIC	??$construct@UVector2D@@AAU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@AAU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D &>
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GH@CCKIPOPB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@BGGMBFHK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1KC@ILGGEGM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@ ; `string'
PUBLIC	??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1NG@LDJHJLCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ ; `string'
PUBLIC	??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_1BAC@GABKONCL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@ ; `string'
PUBLIC	??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_1BAC@MAOHAEOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@ ; `string'
PUBLIC	??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1BAA@MOJEOHPG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ ; `string'
PUBLIC	??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@ ; `string'
PUBLIC	??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	__real@0010000000000000
PUBLIC	__real@00800000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4014000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fefffffffffffff
PUBLIC	__real@bff0000000000000
PUBLIC	__real@c008000000000000
PUBLIC	__real@c010000000000000
PUBLIC	__real@c014000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__LineTo@12:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__MoveToEx@16:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	?Instance@CrudeTimer@@SAPAV1@XZ:PROC		; CrudeTimer::Instance
EXTRN	?Instance@Cgdi@@SAPAV1@XZ:PROC			; Cgdi::Instance
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?MaxInt@@3HB DD	01H DUP (?)				; MaxInt
	ALIGN	8

?MaxDouble@@3NB DQ 01H DUP (?)				; MaxDouble
?MinDouble@@3NB DQ 01H DUP (?)				; MinDouble
?MaxFloat@@3MB DD 01H DUP (?)				; MaxFloat
?MinFloat@@3MB DD 01H DUP (?)				; MinFloat
_BSS	ENDS
CRT$XCU	SEGMENT
?MaxInt$initializer$@@3P6AXXZA DD FLAT:??__EMaxInt@@YAXXZ ; MaxInt$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c014000000000000
CONST	SEGMENT
__real@c014000000000000 DQ 0c014000000000000r	; -5
CONST	ENDS
;	COMDAT __real@c010000000000000
CONST	SEGMENT
__real@c010000000000000 DQ 0c010000000000000r	; -4
CONST	ENDS
;	COMDAT __real@c008000000000000
CONST	SEGMENT
__real@c008000000000000 DQ 0c008000000000000r	; -3
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0010000000000000
CONST	SEGMENT
__real@0010000000000000 DQ 00010000000000000r	; 2.22507e-308
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@
CONST	SEGMENT
??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@ DB 'cannot derefe'
	DB	'rence end list iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAA@MOJEOHPG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BAA@MOJEOHPG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'M', 00H, 'a'
	DB	00H, 'r', 00H, 'k', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	':', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '*', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized list iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@
CONST	SEGMENT
??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@ DB 'cannot increme'
	DB	'nt end list iterator', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAC@MAOHAEOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BAC@MAOHAEOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'M', 00H, 'a'
	DB	00H, 'r', 00H, 'k', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	':', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '+', 00H, '+', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized list iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
CONST	SEGMENT
??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAC@GABKONCL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
CONST	SEGMENT
??_C@_1BAC@GABKONCL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H
	DB	't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H, 'i'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'_', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 's', 00H, '<', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'M', 00H, 'a'
	DB	00H, 'r', 00H, 'k', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	':', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H, '>', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o'
	DB	00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '=', 00H, '=', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@ DB 'list iterators inco'
	DB	'mpatible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@
CONST	SEGMENT
??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@ DB '"'
	DB	00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, ' ', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H
	DB	'e', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1NG@LDJHJLCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
CONST	SEGMENT
??_C@_1NG@LDJHJLCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'G', 00H, 'r', 00H, 'a', 00H
	DB	'v', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'r', 00H, 'k', 00H, 'e'
	DB	00H, 'r', 00H, 's', 00H, ':', 00H, ':', 00H, 'G', 00H, 'r', 00H
	DB	'a', 00H, 'v', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'd', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':'
	DB	00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'G', 00H
	DB	'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'r'
	DB	00H, 'k', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H, ':', 00H
	DB	'G', 00H, 'r', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 'R', 00H, 'e'
	DB	00H, 'c', 00H, 'o', 00H, 'r', 00H, 'd', 00H, '>', 00H, ' ', 00H
	DB	'>', 00H, ':', 00H, ':', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '1', 00H, '.', 00H, '2', 00H, '7', 00H, '7', 00H
	DB	'0', 00H, '2', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	's', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.21.27702\include\list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@
CONST	SEGMENT
??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@ DB 'list erase it'
	DB	'erator outside range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KC@ILGGEGM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
CONST	SEGMENT
??_C@_1KC@ILGGEGM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '2', 00H, 'D'
	DB	00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 'V', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '2', 00H, 'D', 00H, '>', 00H, ' '
	DB	00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '['
	DB	00H, ']', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@BGGMBFHK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@BGGMBFHK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '1', 00H, '.', 00H, '2', 00H, '7', 00H, '7', 00H
	DB	'0', 00H, '2', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@CCKIPOPB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@CCKIPOPB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.21.27702\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
CONST	SEGMENT
??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'I', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '1', 00H
	DB	'2', 00H, ':', 00H, ':', 00H, '_', 00H, 'O', 00H, 'r', 00H, 'p'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, '_', 00H, 'm', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '1', 00H, '.', 00H, '2', 00H, '7', 00H, '7', 00H
	DB	'0', 00H, '2', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.21.27702\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z$0
__ehfuncinfo$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z$0
__ehfuncinfo$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z$0
__ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z$0
__ehfuncinfo$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Update@GraveMarkers@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Update@GraveMarkers@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Update@GraveMarkers@@QAEXXZ$1
__unwindtable$?Render@GraveMarkers@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@GraveMarkers@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Render@GraveMarkers@@QAEXXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Render@GraveMarkers@@QAEXXZ$3
__unwindtable$??0GraveMarkers@@QAE@N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0GraveMarkers@@QAE@N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0GraveMarkers@@QAE@N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0GraveMarkers@@QAE@N@Z$2
__ehfuncinfo$?Render@GraveMarkers@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Render@GraveMarkers@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Update@GraveMarkers@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Update@GraveMarkers@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0GraveMarkers@@QAE@N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0GraveMarkers@@QAE@N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ$0
__ehfuncinfo$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z$1
__ehfuncinfo$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MaxDouble$initializer$@@3P6AXXZA DD FLAT:??__EMaxDouble@@YAXXZ ; MaxDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinDouble$initializer$@@3P6AXXZA DD FLAT:??__EMinDouble@@YAXXZ ; MinDouble$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MaxFloat$initializer$@@3P6AXXZA DD FLAT:??__EMaxFloat@@YAXXZ ; MaxFloat$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?MinFloat$initializer$@@3P6AXXZA DD FLAT:??__EMinFloat@@YAXXZ ; MinFloat$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@UVector2D@@AAU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@AAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UVector2D@@AAU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@AAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAUVector2D@@@std@@YAAAUVector2D@@AAU1@@Z ; std::forward<Vector2D &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UVector2D@@AAU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@AAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@AAUVector2D@@@std@@YAAAUVector2D@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUVector2D@@@std@@YAAAUVector2D@@AAU1@@Z PROC ; std::forward<Vector2D &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@AAUVector2D@@@std@@YAAAUVector2D@@AAU1@@Z ENDP ; std::forward<Vector2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@$$T@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@$$T@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::nullptr_t>, COMDAT

; 525  : inline _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 526  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 527  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 528  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 529  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@$$T@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ??$_Emplace_back@UVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEX$$QAUVector2D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@UVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEX$$QAUVector2D@@@Z PROC ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D>, COMDAT
; _this$ = ecx

; 141  :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 142  :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@UVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ; std::forward<Vector2D>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z ; std::_Unfancy<Vector2D>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@UVector2D@@U1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D>
	add	esp, 12					; 0000000cH

; 143  :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 144  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@UVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEX$$QAUVector2D@@@Z ENDP ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@ABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * const &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@ABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@UGraveRecord@GraveMarkers@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@$$QAU34@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UGraveRecord@GraveMarkers@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@$$QAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<GraveMarkers::GraveRecord,GraveMarkers::GraveRecord>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::forward<GraveMarkers::GraveRecord>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UGraveRecord@GraveMarkers@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@$$QAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<GraveMarkers::GraveRecord,GraveMarkers::GraveRecord>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >, COMDAT
; _this$ = ecx

; 1198 :     ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1199 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@Alloc_cons

; 1200 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?deallocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEXQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::deallocate
$LN3@Alloc_cons:

; 1201 :         }
; 1202 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1193 :     void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1194 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1195 :         _Ptr = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?allocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1196 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1189 :     _NODISCARD pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1190 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@$$T@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::nullptr_t>
	add	esp, 8

; 1191 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Release
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >, COMDAT
; _this$ = ecx

; 1187 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??$_Seek_wrapped@UVector2D@@@std@@YAXAAPAUVector2D@@QAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@UVector2D@@@std@@YAXAAPAUVector2D@@QAU1@@Z PROC ; std::_Seek_wrapped<Vector2D>, COMDAT

; 434  : constexpr void _Seek_wrapped(_Ty*& _It, _Ty* const _UIt) {

	push	ebp
	mov	ebp, esp

; 435  :     _It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 436  : }

	pop	ebp
	ret	0
??$_Seek_wrapped@UVector2D@@@std@@YAXAAPAUVector2D@@QAU1@@Z ENDP ; std::_Seek_wrapped<Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ??$_Emplace_back@AAUVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXAAUVector2D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAUVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXAAUVector2D@@@Z PROC ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D &>, COMDAT
; _this$ = ecx

; 141  :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 142  :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@AAUVector2D@@@std@@YAAAUVector2D@@AAU1@@Z ; std::forward<Vector2D &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z ; std::_Unfancy<Vector2D>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@UVector2D@@AAU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@AAU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D &>
	add	esp, 12					; 0000000cH

; 143  :         ++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 144  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@AAUVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXAAUVector2D@@@Z ENDP ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@XZ PROC ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Release, COMDAT
; _this$ = ecx

; 146  :     _NoThrowFwdIt _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 147  :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 148  :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 149  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@XZ ENDP ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 136  :     ~_Uninitialized_backout_al() { // destroy all elements guarded by this instance

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 137  :         _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@UVector2D@@@std@@@std@@YAXPAUVector2D@@0AAV?$allocator@UVector2D@@@0@@Z ; std::_Destroy_range<std::allocator<Vector2D> >
	add	esp, 12					; 0000000cH

; 138  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@PAUVector2D@@AAV?$allocator@UVector2D@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@PAUVector2D@@AAV?$allocator@UVector2D@@@1@@Z PROC ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 131  :     _Uninitialized_backout_al(_NoThrowFwdIt _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@PAUVector2D@@AAV?$allocator@UVector2D@@@1@@Z ENDP ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??$_Get_unwrapped_n@UVector2D@@H$0A@@std@@YAPAUVector2D@@QAU1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@UVector2D@@H$0A@@std@@YAPAUVector2D@@QAU1@H@Z PROC ; std::_Get_unwrapped_n<Vector2D,int,0>, COMDAT

; 394  : _NODISCARD constexpr _Ty* _Get_unwrapped_n(_Ty* const _Src, _Diff) {

	push	ebp
	mov	ebp, esp

; 395  :     return _Src;

	mov	eax, DWORD PTR __Src$[ebp]

; 396  : }

	pop	ebp
	ret	0
??$_Get_unwrapped_n@UVector2D@@H$0A@@std@@YAPAUVector2D@@QAU1@H@Z ENDP ; std::_Get_unwrapped_n<Vector2D,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??$_Idl_distance@PAUVector2D@@PAU1@@std@@YA@ABQAUVector2D@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAUVector2D@@PAU1@@std@@YA@ABQAUVector2D@@0@Z PROC ; std::_Idl_distance<Vector2D *,Vector2D *>, COMDAT

; 483  :     const _Iter& _Last) { // tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp

; 484  :     if constexpr (_Is_random_iter_v<_Iter>) {
; 485  :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4

; 486  :     } else {
; 487  :         (void) _First; // TRANSITION, VSO#486357
; 488  :         (void) _Last; // TRANSITION, VSO#486357
; 489  :         return _Distance_unknown{};
; 490  :     }
; 491  : }

	pop	ebp
	ret	0
??$_Idl_distance@PAUVector2D@@PAU1@@std@@YA@ABQAUVector2D@@0@Z ENDP ; std::_Idl_distance<Vector2D *,Vector2D *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z PROC ; std::_Get_unwrapped<Vector2D>, COMDAT

; 274  : _NODISCARD constexpr _Ty* _Get_unwrapped(_Ty* const _Ptr) { // special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 275  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 276  : }

	pop	ebp
	ret	0
??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z ENDP ; std::_Get_unwrapped<Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -56					; size = 12
__UDest$ = -40						; size = 4
__ULast$ = -32						; size = 4
__UFirst$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z PROC ; std::_Uninitialized_move<Vector2D *,Vector2D *,std::allocator<Vector2D> >, COMDAT

; 221  :     _Alloc& _Al) { // move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 222  :                    // note: only called internally from elsewhere in the STL
; 223  :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z ; std::_Get_unwrapped<Vector2D>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 224  :     const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z ; std::_Get_unwrapped<Vector2D>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 225  :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUVector2D@@PAU1@@std@@YA@ABQAUVector2D@@0@Z ; std::_Idl_distance<Vector2D *,Vector2D *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@UVector2D@@H$0A@@std@@YAPAUVector2D@@QAU1@H@Z ; std::_Get_unwrapped_n<Vector2D,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 226  :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial>,
; 227  :                       _Uses_default_construct<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>>) {
; 228  :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);
; 229  :         (void) _Al;
; 230  :     } else {
; 231  :         _Uninitialized_backout_al<decltype(_UDest), _Alloc> _Backout{_UDest, _Al};

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	??0?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@PAUVector2D@@AAV?$allocator@UVector2D@@@1@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 232  :         for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
	mov	edx, DWORD PTR __UFirst$[ebp]
	cmp	edx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 233  :             _Backout._Emplace_back(_STD move(*_UFirst));

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$move@AAUVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ; std::move<Vector2D &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	??$_Emplace_back@UVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEX$$QAUVector2D@@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D>

; 234  :         }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 235  : 
; 236  :         _UDest = _Backout._Release();

	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Release
	mov	DWORD PTR __UDest$[ebp], eax

; 237  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >

; 238  : 
; 239  :     _Seek_wrapped(_Dest, _UDest);

	mov	ecx, DWORD PTR __UDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@UVector2D@@@std@@YAXAAPAUVector2D@@QAU1@@Z ; std::_Seek_wrapped<Vector2D>
	add	esp, 8

; 240  :     return _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]

; 241  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@Uninitiali:
	DD	3
	DD	$LN11@Uninitiali
$LN11@Uninitiali:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@Uninitiali
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN8@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$2[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
__ehhandler$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ENDP ; std::_Uninitialized_move<Vector2D *,Vector2D *,std::allocator<Vector2D> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@PAU12@@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QAPAU10@@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@PAU12@@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QAPAU10@@Z PROC ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> *>, COMDAT

; 525  : inline _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 526  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 527  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 528  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 529  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@PAU12@@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QAPAU10@@Z ENDP ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@ABQAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@ABQAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * const &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAABQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@ABQAU10@@Z ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@ABQAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 87   :     const size_t _Bytes) { // allocate _Bytes manually aligned to at least _Big_allocation_alignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 88   :     size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 89   :     if (_Block_size <= _Bytes) { // add overflow, try allocating all of memory and assume the

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 90   :                                  // allocation function will throw bad_alloc
; 91   :         _Block_size = static_cast<size_t>(-1);

	mov	DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 92   :     }
; 93   : 
; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	95					; 0000005fH
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	95					; 0000005fH
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 98   : 
; 99   : #ifdef _DEBUG
; 100  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 101  : #endif // _DEBUG
; 102  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 103  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<std::_List_node<GraveMarkers::GraveRecord,void *> *>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<std::_List_node<GraveMarkers::GraveRecord,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@AAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z
_TEXT	SEGMENT
$T2 = -36						; size = 4
__Newnode$ = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_<_Val_0>$ = 8						; size = 4
??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z PROC ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Allocate<GraveMarkers::GraveRecord>, COMDAT
; _this$ = ecx

; 401  :     typename value_type::value_type& _Allocate(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 402  :         _STL_INTERNAL_CHECK(!_To_insert);
; 403  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 404  :         _Newnode._Allocate(); // throws

	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Allocate

; 405  :         _Alnode_traits::construct(_Newnode._Al, _STD addressof(_Newnode._Ptr->_Myval), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::forward<GraveMarkers::GraveRecord>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Newnode$[ebp+4]
	add	eax, 8
	push	eax
	call	??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::addressof<GraveMarkers::GraveRecord>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Newnode$[ebp]
	push	ecx
	call	??$construct@UGraveRecord@GraveMarkers@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@$$QAU34@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<GraveMarkers::GraveRecord,GraveMarkers::GraveRecord>
	add	esp, 12					; 0000000cH

; 406  :         _To_insert = _Newnode._Release();

	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::_Release
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 407  :         return _To_insert->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Newnode$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	mov	eax, DWORD PTR $T2[ebp]

; 408  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Allocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@Allocate:
	DD	1
	DD	$LN6@Allocate
$LN6@Allocate:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN4@Allocate
$LN4@Allocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z$0:
	lea	ecx, DWORD PTR __Newnode$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
__ehhandler$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z ENDP ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Allocate<GraveMarkers::GraveRecord>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z PROC ; std::forward<GraveMarkers::GraveRecord>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ENDP ; std::forward<GraveMarkers::GraveRecord>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
__Leftnode$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Rightnode$ = 8					; size = 4
?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z PROC ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Transfer_before, COMDAT
; _this$ = ecx

; 427  :     pointer _Transfer_before(const pointer _Rightnode) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 428  :         _STL_INTERNAL_CHECK(_To_insert != pointer());
; 429  :         const pointer _Leftnode = _Rightnode->_Prev;

	mov	eax, DWORD PTR __Rightnode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Leftnode$[ebp], ecx

; 430  :         _Alnode_traits::construct(_Al, _STD addressof(_To_insert->_Next), _Rightnode);

	lea	edx, DWORD PTR __Rightnode$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@ABQAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
	add	esp, 12					; 0000000cH

; 431  :         _Alnode_traits::construct(_Al, _STD addressof(_To_insert->_Prev), _Leftnode);

	lea	ecx, DWORD PTR __Leftnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	push	eax
	call	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@ABQAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * const &>
	add	esp, 12					; 0000000cH

; 432  :         _Rightnode->_Prev = _To_insert;

	mov	eax, DWORD PTR __Rightnode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 433  :         _Leftnode->_Next  = _To_insert;

	mov	eax, DWORD PTR __Leftnode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 434  :         return _STD exchange(_To_insert, pointer());

	mov	DWORD PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@PAU12@@std@@YAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@$$QAPAU10@@Z ; std::exchange<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 8

; 435  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Transfer_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN6@Transfer_b:
	DD	1
	DD	$LN5@Transfer_b
$LN5@Transfer_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Transfer_b
$LN3@Transfer_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z ENDP ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Transfer_before
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ PROC ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::~_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>, COMDAT
; _this$ = ecx

; 390  :     ~_List_node_emplace_op() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 391  :         if (_To_insert) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@List_node_

; 392  :             _Alnode_traits::destroy(_Al, _STD addressof(_To_insert->_Myval));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 8
	push	edx
	call	??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::addressof<GraveMarkers::GraveRecord>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$destroy@UGraveRecord@GraveMarkers@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<GraveMarkers::GraveRecord>
	add	esp, 8

; 393  :             _Al.deallocate(_To_insert, 1);

	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?deallocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEXQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::deallocate
$LN3@List_node_:

; 394  :         }
; 395  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ ENDP ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::~_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
??0?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z PROC ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>, COMDAT
; _this$ = ecx

; 388  :     explicit _List_node_emplace_op(_Alnode& _Al_) : _Al(_Al_), _To_insert() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ENDP ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@UGraveRecord@GraveMarkers@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UGraveRecord@GraveMarkers@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<GraveMarkers::GraveRecord>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@UGraveRecord@GraveMarkers@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<GraveMarkers::GraveRecord>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -56					; size = 12
__UDest$ = -40						; size = 4
__ULast$ = -32						; size = 4
__UFirst$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z PROC ; std::_Uninitialized_copy<Vector2D *,Vector2D *,std::allocator<Vector2D> >, COMDAT

; 161  :     _Alloc& _Al) { // copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 162  :                    // note: only called internally from elsewhere in the STL
; 163  :     auto _UFirst      = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z ; std::_Get_unwrapped<Vector2D>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 164  :     const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@UVector2D@@@std@@YAPAUVector2D@@QAU1@@Z ; std::_Get_unwrapped<Vector2D>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 165  :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUVector2D@@PAU1@@std@@YA@ABQAUVector2D@@0@Z ; std::_Idl_distance<Vector2D *,Vector2D *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@UVector2D@@H$0A@@std@@YAPAUVector2D@@QAU1@H@Z ; std::_Get_unwrapped_n<Vector2D,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 166  :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial>,
; 167  :                       _Uses_default_construct<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>>) {
; 168  :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);
; 169  :         (void) _Al;
; 170  :     } else {
; 171  :         _Uninitialized_backout_al<decltype(_UDest), _Alloc> _Backout{_UDest, _Al};

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	??0?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@PAUVector2D@@AAV?$allocator@UVector2D@@@1@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 172  :         for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	ecx, DWORD PTR __UFirst$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR __UFirst$[ebp], ecx
$LN4@Uninitiali:
	mov	edx, DWORD PTR __UFirst$[ebp]
	cmp	edx, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 173  :             _Backout._Emplace_back(*_UFirst);

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	??$_Emplace_back@AAUVector2D@@@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXAAUVector2D@@@Z ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Emplace_back<Vector2D &>

; 174  :         }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 175  : 
; 176  :         _UDest = _Backout._Release();

	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::_Release
	mov	DWORD PTR __UDest$[ebp], eax

; 177  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$2[ebp]
	call	??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >

; 178  : 
; 179  :     _Seek_wrapped(_Dest, _UDest);

	mov	ecx, DWORD PTR __UDest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@UVector2D@@@std@@YAXAAPAUVector2D@@QAU1@@Z ; std::_Seek_wrapped<Vector2D>
	add	esp, 8

; 180  :     return _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]

; 181  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@Uninitiali:
	DD	3
	DD	$LN11@Uninitiali
$LN11@Uninitiali:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@Uninitiali
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@Uninitiali
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN8@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	85					; 00000055H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$2[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAUVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >::~_Uninitialized_backout_al<Vector2D *,std::allocator<Vector2D> >
__ehhandler$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ENDP ; std::_Uninitialized_copy<Vector2D *,Vector2D *,std::allocator<Vector2D> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@V?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z PROC ; std::forward<std::allocator<Vector2D> >, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@V?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1144 :     _Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept { // deallocate a plain pointer using an allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1145 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1146 :     if constexpr (is_same_v<typename _Alloc_traits::pointer, typename _Alloc::value_type*>) {
; 1147 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1148 :     } else {
; 1149 :         using _Ptr_traits = pointer_traits<typename _Alloc_traits::pointer>;
; 1150 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1151 :     }
; 1152 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BA@@std@@YAII@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 24   :     const size_t _Count) noexcept { // gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 25   :     constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 268435455 ; 0fffffffH

; 26   :     size_t _Result                 = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 27   :     if (_Max_possible < _Count) { // multiply overflow, try allocating all of memory and assume the

	cmp	DWORD PTR __Count$[ebp], 268435455	; 0fffffffH
	jbe	SHORT $LN2@Get_size_o

; 28   :                                   // allocation function will throw bad_alloc
; 29   :         _Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   :     }
; 31   : 
; 32   :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UVector2D@@@std@@@std@@YAXPAUVector2D@@0AAV?$allocator@UVector2D@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UVector2D@@@std@@@std@@YAXPAUVector2D@@0AAV?$allocator@UVector2D@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Vector2D> >, COMDAT

; 1087 :     _Alloc& _Al) noexcept { // destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp

; 1088 :                             // note that this is an optimization for debug mode codegen;
; 1089 :                             // in release mode the BE removes all of this
; 1090 :     using _Val = typename _Alloc::value_type;
; 1091 :     if
; 1092 :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Val>, _Uses_default_destroy<_Alloc, _Val*>>) {
; 1093 :             (void) _First;
; 1094 :             (void) _Last;
; 1095 :             (void) _Al;
; 1096 :         }
; 1097 :     else {
; 1098 :         for (; _First != _Last; ++_First) {
; 1099 :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1100 :         }
; 1101 :     }
; 1102 : }

	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UVector2D@@@std@@@std@@YAXPAUVector2D@@0AAV?$allocator@UVector2D@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0CA@@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0CA@@std@@YAII@Z PROC		; std::_Get_size_of_n<32>, COMDAT

; 24   :     const size_t _Count) noexcept { // gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 25   :     constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 134217727 ; 07ffffffH

; 26   :     size_t _Result                 = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	mov	DWORD PTR __Result$[ebp], eax

; 27   :     if (_Max_possible < _Count) { // multiply overflow, try allocating all of memory and assume the

	cmp	DWORD PTR __Count$[ebp], 134217727	; 07ffffffH
	jbe	SHORT $LN2@Get_size_o

; 28   :                                   // allocation function will throw bad_alloc
; 29   :         _Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   :     }
; 31   : 
; 32   :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0CA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<32>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__Max_possible$ = -4					; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 24   :     const size_t _Count) noexcept { // gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 25   :     constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 26   :     size_t _Result                 = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __Result$[ebp], eax

; 27   :     if (_Max_possible < _Count) { // multiply overflow, try allocating all of memory and assume the

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 28   :                                   // allocation function will throw bad_alloc
; 29   :         _Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   :     }
; 31   : 
; 32   :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 188  :     void* _Ptr, size_t _Bytes) noexcept { // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 189  :                                           // <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 190  : #if defined(_M_IX86) || defined(_M_X64)
; 191  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 192  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 193  :     }
; 194  : #endif // defined(_M_IX86) || defined(_M_X64)
; 195  : 
; 196  :     ::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 197  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 172  :     const size_t _Bytes) { // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 173  : #if defined(_M_IX86) || defined(_M_X64)
; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 175  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 176  :     }
; 177  : #endif // defined(_M_IX86) || defined(_M_X64)
; 178  : 
; 179  :     if (_Bytes != 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 180  :         return _Traits::_Allocate(_Bytes);

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 181  :     }
; 182  : 
; 183  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 184  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAD@std@@YAABQADABQAD@Z	; std::forward<char * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -28					; size = 4
__Al$ = -20						; size = 4
__New_capacity$ = -16					; size = 4
__Old_capacity$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3860 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3861 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 3862 :         // _Fn(_New_ptr, _New_size, _Args...)
; 3863 :         if (_New_size > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __New_size$[ebp], eax
	jbe	SHORT $LN2@Reallocate

; 3864 :             _Xlen(); // result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3865 :         }
; 3866 : 
; 3867 :         auto& _My_data                = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3868 :         const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 3869 :         const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 3870 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 3871 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 3872 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3873 :         _My_data._Mysize = _New_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3874 :         _My_data._Myres  = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3875 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	edx, DWORD PTR _<_Args_0>$[ebp]
	push	edx
	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 3876 :         if (_BUF_SIZE <= _Old_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 3877 :             _Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3878 :             _My_data._Bx._Ptr = _New_ptr;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 3879 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3880 :             _Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH
$LN4@Reallocate:

; 3881 :         }
; 3882 : 
; 3883 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3884 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN8@Reallocate:
	DD	1
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN6@Reallocate
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2736 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2737 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2738 :                 _Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2739 :             },

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 27   :     _NOEXCEPT_COND(noexcept(_Left < _Right)) { // return larger of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 28   :     return _Left < _Right ? _Right : _Left;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Max_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Max_value
$LN3@Max_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 29   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 824  :     static void destroy(_Alloc&, _Uty* const _Ptr) { // destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 825  :         _Ptr->~_Uty();
; 826  :     }

	pop	ebp
	ret	0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > const >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode0<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >, COMDAT

; 323  :         _Alnode& _Al, _Nodeptr _Ptr) noexcept { // destroy pointer members in _Ptr and deallocate with _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 324  :         static_assert(is_same_v<typename _Alnode::value_type, _List_node>, "Bad _Freenode0 call");
; 325  :         using _Alnode_traits = allocator_traits<_Alnode>;
; 326  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Next));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 8

; 327  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Prev));

	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$destroy@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 8

; 328  :         _Alnode_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@QAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 329  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode0<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
__Pnode$ = -4						; size = 4
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Free_non_head<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >, COMDAT

; 340  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 341  :         _Head->_Prev->_Next = nullptr;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 0

; 342  : 
; 343  :         auto _Pnode = _Head->_Next;

	mov	edx, DWORD PTR __Head$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnode$[ebp], eax

; 344  :         for (_Nodeptr _Pnext; _Pnode != nullptr; _Pnode = _Pnext) {

	jmp	SHORT $LN4@Free_non_h
$LN2@Free_non_h:
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	DWORD PTR __Pnode$[ebp], ecx
$LN4@Free_non_h:
	cmp	DWORD PTR __Pnode$[ebp], 0
	je	SHORT $LN5@Free_non_h

; 345  :             _Pnext = _Pnode->_Next;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Pnext$1[ebp], eax

; 346  :             _Freenode(_Al, _Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	add	esp, 8

; 347  :         }

	jmp	SHORT $LN2@Free_non_h
$LN5@Free_non_h:

; 348  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Free_non_head@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Free_non_head<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<GraveMarkers::GraveRecord,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@UVector2D@@@std@@@std@@YAXAAV?$allocator@UVector2D@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@UVector2D@@@std@@@std@@YAXAAV?$allocator@UVector2D@@@0@0@Z PROC ; std::_Pocma<std::allocator<Vector2D> >, COMDAT

; 1025 : inline void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

	push	ebp
	mov	ebp, esp

; 1026 :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 1027 :         _Left = _STD move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$move@AAV?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ; std::move<std::allocator<Vector2D> &>
	add	esp, 4

; 1028 :     } else {
; 1029 :         (void) _Left; // TRANSITION, VSO#486357
; 1030 :         (void) _Right; // TRANSITION, VSO#486357
; 1031 :     }
; 1032 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Pocma@V?$allocator@UVector2D@@@std@@@std@@YAXAAV?$allocator@UVector2D@@@0@0@Z ENDP ; std::_Pocma<std::allocator<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z PROC ; std::addressof<GraveMarkers::GraveRecord>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z ENDP ; std::addressof<GraveMarkers::GraveRecord>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 813  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) { // deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 814  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 815  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 816  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 294  : inline _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 295  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 296  : }

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1511 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 1512 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 921  :     constexpr allocator(const allocator<_Other>&) noexcept { // construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 922  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 294  : inline _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 295  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 296  : }

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1><>, COMDAT
; _this$ = ecx

; 1511 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >

; 1512 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z
_TEXT	SEGMENT
__Op$ = -32						; size = 8
__Mysize$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Insert<GraveMarkers::GraveRecord>, COMDAT
; _this$ = ecx

; 812  :     void _Insert(_Unchecked_const_iterator _Where, _Valty&&... _Val) { // insert element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 813  :         size_type& _Mysize = _Get_data()._Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	add	eax, 8
	mov	DWORD PTR __Mysize$[ebp], eax

; 814  :         if (_Mysize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBEIXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::max_size
	mov	ecx, DWORD PTR __Mysize$[ebp]
	cmp	DWORD PTR [ecx], eax
	jne	SHORT $LN2@Insert

; 815  :             _Xlength_error("list<T> too long");

	push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Insert:

; 816  :         }
; 817  : 
; 818  :         _List_node_emplace_op<_Alnode, _Allocation_strategy::_Preallocated> _Op{_Getal()};

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Op$[ebp]
	call	??0?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@AAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 819  :         _Op._Allocate(_STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@UGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::forward<GraveMarkers::GraveRecord>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Op$[ebp]
	call	??$_Allocate@UGraveRecord@GraveMarkers@@@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEAAUGraveRecord@GraveMarkers@@$$QAU23@@Z ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Allocate<GraveMarkers::GraveRecord>

; 820  :         _Op._Transfer_before(_Where._Ptr);

	mov	eax, DWORD PTR __Where$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Op$[ebp]
	call	?_Transfer_before@?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@QAU32@@Z ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::_Transfer_before

; 821  :         ++_Mysize;

	mov	ecx, DWORD PTR __Mysize$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR __Mysize$[ebp]
	mov	DWORD PTR [eax], edx

; 822  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Op$[ebp]
	call	??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::~_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
$LN3@Insert:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Insert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN8@Insert:
	DD	1
	DD	$LN7@Insert
$LN7@Insert:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN5@Insert
$LN5@Insert:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z$0:
	lea	ecx, DWORD PTR __Op$[ebp]
	jmp	??1?$_List_node_emplace_op@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@$0A@@std@@QAE@XZ ; std::_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>::~_List_node_emplace_op<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,0>
__ehhandler$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Insert<GraveMarkers::GraveRecord>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$move@AAUGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z PROC ; std::move<GraveMarkers::GraveRecord &>, COMDAT

; 1313 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1314 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1315 : }

	pop	ebp
	ret	0
??$move@AAUGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ENDP ; std::move<GraveMarkers::GraveRecord &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx

; 98   :     _List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 99   :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>

; 100  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<GraveMarkers::GraveRecord,void *> >, COMDAT
; _this$ = ecx

; 921  :     constexpr allocator(const allocator<_Other>&) noexcept { // construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 922  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<GraveMarkers::GraveRecord,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >, COMDAT

; 332  :     static void _Freenode(_Alnode& _Al, _Nodeptr _Ptr) noexcept { // destroy all members in _Ptr and deallocate with _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 333  :         using _Alnode_traits = allocator_traits<_Alnode>;
; 334  :         _Alnode_traits::destroy(_Al, _STD addressof(_Ptr->_Myval));

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 8
	push	eax
	call	??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::addressof<GraveMarkers::GraveRecord>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@UGraveRecord@GraveMarkers@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAUGraveRecord@GraveMarkers@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::destroy<GraveMarkers::GraveRecord>
	add	esp, 8

; 335  :         _Freenode0(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode0<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	add	esp, 8

; 336  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@$0A@@std@@YA@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__It$ = 12						; size = 4
??$_Get_unwrapped@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@$0A@@std@@YA@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@0@@Z PROC ; std::_Get_unwrapped<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >,0>, COMDAT

; 257  :     const _Iter& _It) { // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated

	push	ebp
	mov	ebp, esp

; 258  :     return _It._Unwrapped();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	call	?_Unwrapped@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_Unwrapped
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 259  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Get_unwrapped@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@$0A@@std@@YA@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@0@@Z ENDP ; std::_Get_unwrapped<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 36   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 37   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 38   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 39   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><>, COMDAT
; _this$ = ecx

; 1511 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UVector2D@@@std@@QAE@XZ	; std::allocator<Vector2D>::allocator<Vector2D>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Vector2D> >::_Vector_val<std::_Simple_types<Vector2D> >

; 1512 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??$_Ucopy@PAUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU2@00@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Ucopy<Vector2D *>, COMDAT
; _this$ = ecx

; 1557 :     pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) { // copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1558 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ; std::_Uninitialized_copy<Vector2D *,Vector2D *,std::allocator<Vector2D> >
	add	esp, 16					; 00000010H

; 1559 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU2@00@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Ucopy<Vector2D *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >::~_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >, COMDAT
; _this$ = ecx

; 3511 :     ~_Tidy_guard() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3512 :         if (_Target) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Tidy_guard

; 3513 :             _Target->_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Tidy
$LN3@Tidy_guard:

; 3514 :         }
; 3515 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tidy_guard@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >::~_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1477 :     ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1478 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Container_

; 1479 :             _Delete_plain(_Al, _Ptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN3@Container_:

; 1480 :         }
; 1481 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1463 :     _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1464 :         : _Al(_Al_) { // create a new _Container_proxy pointing at _Mycont

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1465 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1466 :         allocator_traits<_Alloc>::construct(_Al, _Ptr, _STD addressof(_Mycont)); // assumed to be non-throwing

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 12					; 0000000cH

; 1467 :         _Mycont._Myproxy = _Ptr;

	mov	eax, DWORD PTR __Mycont$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1468 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__New_proxy$ = -8					; size = 4
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1280 :     void _Alloc_proxy(_Alloc&& _Al) { // allocate a proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1281 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1282 :         allocator_traits<remove_reference_t<_Alloc>>::construct(_Al, _New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@U_Container_proxy@std@@PAU_Container_base12@2@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAPAU_Container_base12@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 12					; 0000000cH

; 1283 :         _Myproxy            = _New_proxy;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [ecx], edx

; 1284 :         _New_proxy->_Mycont = this;

	mov	eax, DWORD PTR __New_proxy$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 1285 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0V?$allocator@UVector2D@@@std@@$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UVector2D@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@UVector2D@@@std@@$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UVector2D@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 1517 :           _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1516 :         : _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ; std::forward<std::allocator<Vector2D> >
	add	esp, 4

; 1517 :           _Myval2(_STD forward<_Other2>(_Val2)...) { // construct from forwarded values

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<Vector2D> >::_Vector_val<std::_Simple_types<Vector2D> >

; 1518 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@UVector2D@@@std@@$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UVector2D@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><std::allocator<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$move@AAV?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z PROC ; std::move<std::allocator<Vector2D> &>, COMDAT

; 1313 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1314 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1315 : }

	pop	ebp
	ret	0
??$move@AAV?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ENDP ; std::move<std::allocator<Vector2D> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$addressof@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@YAPAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@YAPAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::vector<Vector2D,std::allocator<Vector2D> > >, COMDAT

; 280  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept { // return address of _Val

	push	ebp
	mov	ebp, esp

; 281  :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 282  : }

	pop	ebp
	ret	0
??$addressof@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@YAPAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::vector<Vector2D,std::allocator<Vector2D> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1175 :     _Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept { // destroy and deallocate _Ptr using _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1176 :     allocator_traits<_Alloc>::destroy(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 1177 :     _Deallocate_plain(_Al, _Ptr);

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1178 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -4						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 525  : inline _Ty exchange(_Ty& _Val, _Other&& _New_val) { // assign _New_val to _Val, return previous _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 526  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 527  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __New_val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 528  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 529  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>, COMDAT
; _this$ = ecx

; 921  :     constexpr allocator(const allocator<_Other>&) noexcept { // construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 922  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 930  :         _CRT_GUARDOVERFLOW const size_t _Count) { // allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 931  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 932  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z
_TEXT	SEGMENT
tv164 = -68						; size = 4
__Constructed_first$ = -64				; size = 4
__Constructed_last$ = -60				; size = 4
__Newvec$ = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Newsize$ = -48					; size = 4
__Oldsize$ = -44					; size = 4
__Whereoff$ = -40					; size = 4
__Mylast$ = -36						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -28					; size = 4
__Al$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_reallocate<Vector2D const &>, COMDAT
; _this$ = ecx

; 682  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 52					; 00000034H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 683  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 684  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 685  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 686  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 687  :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 688  : 
; 689  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 690  : 
; 691  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 4
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 692  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 4
	mov	DWORD PTR __Oldsize$[ebp], ecx

; 693  : 
; 694  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 695  :             _Xlength();

	call	?_Xlength@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@CAXXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Xlength
$LN2@Emplace_re:

; 696  :         }
; 697  : 
; 698  :         const size_type _Newsize     = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 699  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEII@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 700  : 
; 701  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@UVector2D@@@std@@QAEPAUVector2D@@I@Z ; std::allocator<Vector2D>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 702  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 703  :         pointer _Constructed_first      = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 704  : 
; 705  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 706  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	call	??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z ; std::_Unfancy<Vector2D>
	add	esp, 4
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ; std::forward<Vector2D const &>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR tv164[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@UVector2D@@ABU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D const &>
	add	esp, 12					; 0000000cH

; 707  :         _Constructed_first = _Newvec + _Whereoff;

	mov	ecx, DWORD PTR __Whereoff$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 708  : 
; 709  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __Whereptr$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN4@Emplace_re

; 710  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept

; 711  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 712  :             _Umove(_Myfirst, _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU3@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove

; 713  :             _Constructed_first = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 714  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

	mov	edx, DWORD PTR __Whereoff$[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU3@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z$0:

; 715  :         }
; 716  :         _CATCH_ALL
; 717  :         _Destroy(_Constructed_first, _Constructed_last);

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Destroy

; 718  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z ; std::allocator<Vector2D>::deallocate

; 719  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 720  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z$1:

; 721  : 
; 722  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXQAUVector2D@@II@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Change_array

; 723  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$[ebp]
$LN6@Emplace_re:

; 724  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_reallocate<Vector2D const &>
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@UVector2D@@ABU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@ABU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UVector2D@@ABU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D const &>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ; std::forward<Vector2D const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UVector2D@@ABU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAE@ABUVector2D@@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAE@ABUVector2D@@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_back_with_unused_capacity<Vector2D const &>, COMDAT
; _this$ = ecx

; 639  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 640  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 641  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 642  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 643  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 644  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ; std::forward<Vector2D const &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z ; std::_Unfancy<Vector2D>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	call	??$construct@UVector2D@@ABU1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D const &>
	add	esp, 12					; 0000000cH

; 645  :         _Orphan_range(_Mylast, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEXPAUVector2D@@0@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Orphan_range

; 646  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 647  :         ++_Mylast;

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 648  : #if _HAS_CXX17
; 649  :         return _Result;
; 650  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 651  :         (void) _Result;
; 652  : #endif // _HAS_CXX17
; 653  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAE@ABUVector2D@@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_back_with_unused_capacity<Vector2D const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z PROC ; std::forward<Vector2D const &>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ENDP ; std::forward<Vector2D const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??$emplace_back@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABUVector2D@@@Z
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABUVector2D@@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::emplace_back<Vector2D const &>, COMDAT
; _this$ = ecx

; 657  :     decltype(auto) emplace_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 658  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 659  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 660  :         pointer& _Mylast = _My_data._Mylast;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 8
	mov	DWORD PTR __Mylast$[ebp], ecx

; 661  :         if (_Mylast != _My_data._Myend) {

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN2@emplace_ba

; 662  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ; std::forward<Vector2D const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAE@ABUVector2D@@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_back_with_unused_capacity<Vector2D const &>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 663  :         }
; 664  : 
; 665  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABUVector2D@@@std@@YAABUVector2D@@ABU1@@Z ; std::forward<Vector2D const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEPAUVector2D@@QAU2@ABU2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Emplace_reallocate<Vector2D const &>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 666  : #if _HAS_CXX17
; 667  :         return _Result;
; 668  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 669  :         (void) _Result;
; 670  : #endif // _HAS_CXX17
; 671  :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABUVector2D@@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::emplace_back<Vector2D const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$construct@UVector2D@@U1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@$$QAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UVector2D@@U1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D>, COMDAT

; 819  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) { // construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 820  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@UVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ; std::forward<Vector2D>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 821  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UVector2D@@U1@@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAXAAV?$allocator@UVector2D@@@1@QAUVector2D@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Vector2D> >::construct<Vector2D,Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstddef
;	COMDAT ??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z PROC ; std::_Unfancy<Vector2D>, COMDAT

; 294  : inline _Ty* _Unfancy(_Ty* _Ptr) { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 295  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 296  : }

	pop	ebp
	ret	0
??$_Unfancy@UVector2D@@@std@@YAPAUVector2D@@PAU1@@Z ENDP ; std::_Unfancy<Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$forward@UVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z PROC ; std::forward<Vector2D>, COMDAT

; 1301 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1302 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1303 : }

	pop	ebp
	ret	0
??$forward@UVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ENDP ; std::forward<Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\type_traits
;	COMDAT ??$move@AAUVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z PROC ; std::move<Vector2D &>, COMDAT

; 1313 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1314 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1315 : }

	pop	ebp
	ret	0
??$move@AAUVector2D@@@std@@YA$$QAUVector2D@@AAU1@@Z ENDP ; std::move<Vector2D &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAUGraveRecord@GraveMarkers@@@std@@SAPAUGraveRecord@GraveMarkers@@AAU34@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAUGraveRecord@GraveMarkers@@@std@@SAPAUGraveRecord@GraveMarkers@@AAU34@@Z PROC ; std::pointer_traits<GraveMarkers::GraveRecord *>::pointer_to, COMDAT

; 309  :     _NODISCARD static pointer pointer_to(_Reftype _Val) noexcept { // convert raw reference to pointer

	push	ebp
	mov	ebp, esp

; 310  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@UGraveRecord@GraveMarkers@@@std@@YAPAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::addressof<GraveMarkers::GraveRecord>
	add	esp, 4

; 311  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAUGraveRecord@GraveMarkers@@@std@@SAPAUGraveRecord@GraveMarkers@@AAU34@@Z ENDP ; std::pointer_traits<GraveMarkers::GraveRecord *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::~_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::~_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++, COMDAT
; _this$ = ecx

; 260  :     _List_iterator& operator++() { // preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 261  :         ++(*(_Mybase*) this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++

; 262  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 263  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->, COMDAT
; _this$ = ecx

; 256  :     _NODISCARD pointer operator->() const { // return pointer to class object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 257  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEAAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PAUGraveRecord@GraveMarkers@@@std@@SAPAUGraveRecord@GraveMarkers@@AAU34@@Z ; std::pointer_traits<GraveMarkers::GraveRecord *>::pointer_to
	add	esp, 4

; 258  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEAAUGraveRecord@GraveMarkers@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEAAUGraveRecord@GraveMarkers@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*, COMDAT
; _this$ = ecx

; 252  :     _NODISCARD reference operator*() const { // return designated value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  :         return (reference) * *(_Mybase*) this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEABUGraveRecord@GraveMarkers@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*

; 254  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEAAUGraveRecord@GraveMarkers@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx

; 248  :     _List_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 249  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >

; 250  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::~_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Unwrapped@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unwrapped@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_Unwrapped, COMDAT
; _this$ = ecx

; 223  :     _NODISCARD _List_unchecked_const_iterator<_Mylist> _Unwrapped() const {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 224  :         return _List_unchecked_const_iterator<_Mylist>(this->_Ptr, static_cast<const _Mylist*>(this->_Getcont()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 225  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Unwrapped@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator!=, COMDAT
; _this$ = ecx

; 211  :     _NODISCARD bool operator!=(const _List_const_iterator& _Right) const { // test for iterator inequality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 212  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 213  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv136 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator==, COMDAT
; _this$ = ecx

; 203  :     _NODISCARD bool operator==(const _List_const_iterator& _Right) const { // test for iterator equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 204  : #if _ITERATOR_DEBUG_LEVEL != 0
; 205  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "list iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BM@BALDKKHE@list?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	205					; 000000cdH
	push	OFFSET ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	205					; 000000cdH
	push	OFFSET ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAC@GABKONCL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1DM@KDLJAKOP@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 206  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 207  : 
; 208  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN12@operator
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN13@operator
$LN12@operator:
	mov	DWORD PTR tv136[ebp], 0
$LN13@operator:
	mov	al, BYTE PTR tv136[ebp]

; 209  :     }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Tmp$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++, COMDAT
; _this$ = ecx

; 179  :     _List_const_iterator operator++(int) { // postincrement

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 180  :         _List_const_iterator _Tmp = *this;

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 181  :         ++*this;

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++

; 182  :         return _Tmp;

	lea	ecx, DWORD PTR __Tmp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@$$QAV01@@Z
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Tmp$[ebp]
	call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 183  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z$0:
	lea	ecx, DWORD PTR __Tmp$[ebp]
	jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++, COMDAT
; _this$ = ecx

; 168  :     _List_const_iterator& operator++() { // preincrement

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 169  : #if _ITERATOR_DEBUG_LEVEL != 0
; 170  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 171  :         _STL_ASSERT(_Mycont, "cannot increment value-initialized list iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DB@ENBCPNKO@cannot?5increment?5value?9initiali@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	171					; 000000abH
	push	OFFSET ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	171					; 000000abH
	push	OFFSET ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAC@MAOHAEOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1GG@JLMAGPNK@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 172  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot increment end list iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CD@PMFMCEG@cannot?5increment?5end?5list?5itera@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	172					; 000000acH
	push	OFFSET ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	172					; 000000acH
	push	OFFSET ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAC@MAOHAEOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1EK@OKKCFDJN@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 173  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 174  : 
; 175  :         this->_Ptr = this->_Ptr->_Next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+8], eax

; 176  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 177  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEABUGraveRecord@GraveMarkers@@XZ
_TEXT	SEGMENT
__Mycont$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEABUGraveRecord@GraveMarkers@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*, COMDAT
; _this$ = ecx

; 154  :     _NODISCARD reference operator*() const { // return designated value

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 155  : #if _ITERATOR_DEBUG_LEVEL != 0
; 156  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 157  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized list iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0DD@MBIHGLJE@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	157					; 0000009dH
	push	OFFSET ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	push	0
	push	157					; 0000009dH
	push	OFFSET ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAA@MOJEOHPG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1GK@NKIMOCIG@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator
$LN10@operator:

; 158  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end list iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN13@operator
	jmp	SHORT $LN8@operator
$LN13@operator:
	push	OFFSET ??_C@_0CF@JCBFHMPL@cannot?5dereference?5end?5list?5ite@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	158					; 0000009eH
	push	OFFSET ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	push	0
	push	158					; 0000009eH
	push	OFFSET ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1BAA@MOJEOHPG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs@
	push	OFFSET ??_C@_1EO@CNEFBDCF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN13@operator
$LN8@operator:
	xor	edx, edx
	jne	SHORT $LN10@operator

; 159  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 160  : 
; 161  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 8

; 162  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEABUGraveRecord@GraveMarkers@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >, COMDAT
; _this$ = ecx

; 150  :     _List_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 151  :         : _Mybase(_Pnode, _Plist) { // construct with node pointer _Pnode

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>

; 152  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@$$QAV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@ABU01@@Z	; std::_Iterator_base12::_Iterator_base12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::~_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 36   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 37   :         : _Ptr(_Pnode) { // construct with node pointer _Pnode

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 38   :         this->_Adopt(_Plist);

	mov	edx, DWORD PTR __Plist$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt

; 39   :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\Transformations.h
;	COMDAT ?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z
_TEXT	SEGMENT
$T2 = -120						; size = 4
_matTransform$ = -112					; size = 72
_TranVector2Ds$ = -32					; size = 16
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_points$ = 12						; size = 4
_pos$ = 16						; size = 4
_forward$ = 20						; size = 4
_side$ = 24						; size = 4
_scale$ = 28						; size = 4
?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z PROC ; WorldTransform, COMDAT

; 34   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T2[ebp], 0

; 35   : 	//copy the original vertices into the buffer about to be transformed
; 36   :   std::vector<Vector2D> TranVector2Ds = points;

	mov	eax, DWORD PTR _points$[ebp]
	push	eax
	lea	ecx, DWORD PTR _TranVector2Ds$[ebp]
	call	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 37   :   
; 38   :   //create a transformation matrix
; 39   : 	C2DMatrix matTransform;

	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	??0C2DMatrix@@QAE@XZ			; C2DMatrix::C2DMatrix

; 40   : 	
; 41   : 	//scale
; 42   :   if ( (scale.x != 1.0) || (scale.y != 1.0) )

	mov	ecx, DWORD PTR _scale$[ebp]
	movsd	xmm0, QWORD PTR [ecx]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@WorldTrans
	mov	edx, DWORD PTR _scale$[ebp]
	movsd	xmm0, QWORD PTR [edx+8]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@WorldTrans
$LN3@WorldTrans:

; 43   :   {
; 44   : 	  matTransform.Scale(scale.x, scale.y);

	mov	eax, DWORD PTR _scale$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _scale$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	?Scale@C2DMatrix@@QAEXNN@Z		; C2DMatrix::Scale
$LN2@WorldTrans:

; 45   :   }
; 46   : 
; 47   : 	//rotate
; 48   : 	matTransform.Rotate(forward, side);

	mov	edx, DWORD PTR _side$[ebp]
	push	edx
	mov	eax, DWORD PTR _forward$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	?Rotate@C2DMatrix@@QAEXABUVector2D@@0@Z	; C2DMatrix::Rotate

; 49   : 
; 50   : 	//and translate
; 51   : 	matTransform.Translate(pos.x, pos.y);

	mov	ecx, DWORD PTR _pos$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pos$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx]
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	?Translate@C2DMatrix@@QAEXNN@Z		; C2DMatrix::Translate

; 52   : 	
; 53   :   //now transform the object's vertices
; 54   :   matTransform.TransformVector2Ds(TranVector2Ds);

	lea	eax, DWORD PTR _TranVector2Ds$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matTransform$[ebp]
	call	?TransformVector2Ds@C2DMatrix@@QAEXAAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z ; C2DMatrix::TransformVector2Ds

; 55   : 
; 56   :   return TranVector2Ds;

	lea	ecx, DWORD PTR _TranVector2Ds$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
	mov	edx, DWORD PTR $T2[ebp]
	or	edx, 1
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _TranVector2Ds$[ebp]
	call	??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@WorldTrans
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@WorldTrans:
	DD	2
	DD	$LN11@WorldTrans
$LN11@WorldTrans:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN8@WorldTrans
	DD	-112					; ffffff90H
	DD	72					; 00000048H
	DD	$LN9@WorldTrans
$LN9@WorldTrans:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN8@WorldTrans:
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	68					; 00000044H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z$0:
	lea	ecx, DWORD PTR _TranVector2Ds$[ebp]
	jmp	??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >
__ehhandler$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-116]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z ENDP ; WorldTransform
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ?TransformVector2Ds@C2DMatrix@@QAEXAAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z
_TEXT	SEGMENT
tv173 = -40						; size = 8
tv171 = -32						; size = 8
_tempY$1 = -24						; size = 8
_tempX$2 = -16						; size = 8
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_vPoint$ = 8						; size = 4
?TransformVector2Ds@C2DMatrix@@QAEXAAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z PROC ; C2DMatrix::TransformVector2Ds, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 119  :   for (unsigned int i=0; i<vPoint.size(); ++i)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@TransformV
$LN2@TransformV:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@TransformV:
	mov	ecx, DWORD PTR _vPoint$[ebp]
	call	?size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::size
	cmp	DWORD PTR _i$3[ebp], eax
	jae	$LN3@TransformV

; 120  :   {
; 121  :     double tempX =(m_Matrix._11*vPoint[i].x) + (m_Matrix._21*vPoint[i].y) + (m_Matrix._31);

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vPoint$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	mulsd	xmm0, QWORD PTR [eax]
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vPoint$[ebp]
	movsd	QWORD PTR tv171[ebp], xmm0
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [ecx+24]
	mulsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR tv171[ebp]
	addsd	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	addsd	xmm1, QWORD PTR [edx+48]
	movsd	QWORD PTR _tempX$2[ebp], xmm1

; 122  : 
; 123  :     double tempY = (m_Matrix._12*vPoint[i].x) + (m_Matrix._22*vPoint[i].y) + (m_Matrix._32);

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vPoint$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [ecx+8]
	mulsd	xmm0, QWORD PTR [eax]
	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _vPoint$[ebp]
	movsd	QWORD PTR tv173[ebp], xmm0
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [ecx+32]
	mulsd	xmm0, QWORD PTR [eax+8]
	movsd	xmm1, QWORD PTR tv173[ebp]
	addsd	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	addsd	xmm1, QWORD PTR [edx+56]
	movsd	QWORD PTR _tempY$1[ebp], xmm1

; 124  :   
; 125  :     vPoint[i].x = tempX;

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _vPoint$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	movsd	xmm0, QWORD PTR _tempX$2[ebp]
	movsd	QWORD PTR [eax], xmm0

; 126  : 
; 127  :     vPoint[i].y = tempY;

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vPoint$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	movsd	xmm0, QWORD PTR _tempY$1[ebp]
	movsd	QWORD PTR [eax+8], xmm0

; 128  : 
; 129  :   }

	jmp	$LN2@TransformV
$LN3@TransformV:

; 130  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?TransformVector2Ds@C2DMatrix@@QAEXAAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z ENDP ; C2DMatrix::TransformVector2Ds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ?Rotate@C2DMatrix@@QAEXABUVector2D@@0@Z
_TEXT	SEGMENT
_mat$ = -80						; size = 72
_this$ = -4						; size = 4
_fwd$ = 8						; size = 4
_side$ = 12						; size = 4
?Rotate@C2DMatrix@@QAEXABUVector2D@@0@Z PROC		; C2DMatrix::Rotate, COMDAT
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 211  :   C2DMatrix::Matrix mat;

	lea	ecx, DWORD PTR _mat$[ebp]
	call	??0Matrix@C2DMatrix@@QAE@XZ		; C2DMatrix::Matrix::Matrix

; 212  :   
; 213  :   mat._11 = fwd.x;  mat._12 = fwd.y; mat._13 = 0;

	mov	eax, DWORD PTR _fwd$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR _mat$[ebp], xmm0
	mov	ecx, DWORD PTR _fwd$[ebp]
	movsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR _mat$[ebp+8], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+16], xmm0

; 214  :   
; 215  :   mat._21 = side.x; mat._22 = side.y; mat._23 = 0;

	mov	edx, DWORD PTR _side$[ebp]
	movsd	xmm0, QWORD PTR [edx]
	movsd	QWORD PTR _mat$[ebp+24], xmm0
	mov	eax, DWORD PTR _side$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	movsd	QWORD PTR _mat$[ebp+32], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+40], xmm0

; 216  :   
; 217  :   mat._31 = 0; mat._32 = 0;mat._33 = 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+48], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+56], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _mat$[ebp+64], xmm0

; 218  :   
; 219  :   //and multiply
; 220  :   MatrixMultiply(mat);

	lea	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z ; C2DMatrix::MatrixMultiply

; 221  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Rotate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@Rotate:
	DD	1
	DD	$LN4@Rotate
$LN4@Rotate:
	DD	-80					; ffffffb0H
	DD	72					; 00000048H
	DD	$LN3@Rotate
$LN3@Rotate:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?Rotate@C2DMatrix@@QAEXABUVector2D@@0@Z ENDP		; C2DMatrix::Rotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ?Scale@C2DMatrix@@QAEXNN@Z
_TEXT	SEGMENT
_mat$ = -80						; size = 72
_this$ = -4						; size = 4
_xScale$ = 8						; size = 8
_yScale$ = 16						; size = 8
?Scale@C2DMatrix@@QAEXNN@Z PROC				; C2DMatrix::Scale, COMDAT
; _this$ = ecx

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 176  :   C2DMatrix::Matrix mat;

	lea	ecx, DWORD PTR _mat$[ebp]
	call	??0Matrix@C2DMatrix@@QAE@XZ		; C2DMatrix::Matrix::Matrix

; 177  :   
; 178  :   mat._11 = xScale; mat._12 = 0; mat._13 = 0;

	movsd	xmm0, QWORD PTR _xScale$[ebp]
	movsd	QWORD PTR _mat$[ebp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+8], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+16], xmm0

; 179  :   
; 180  :   mat._21 = 0; mat._22 = yScale; mat._23 = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR _yScale$[ebp]
	movsd	QWORD PTR _mat$[ebp+32], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+40], xmm0

; 181  :   
; 182  :   mat._31 = 0; mat._32 = 0; mat._33 = 1;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+48], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+56], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _mat$[ebp+64], xmm0

; 183  :   
; 184  :   //and multiply
; 185  :   MatrixMultiply(mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z ; C2DMatrix::MatrixMultiply

; 186  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Scale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN5@Scale:
	DD	1
	DD	$LN4@Scale
$LN4@Scale:
	DD	-80					; ffffffb0H
	DD	72					; 00000048H
	DD	$LN3@Scale
$LN3@Scale:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?Scale@C2DMatrix@@QAEXNN@Z ENDP				; C2DMatrix::Scale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ?Translate@C2DMatrix@@QAEXNN@Z
_TEXT	SEGMENT
_mat$ = -80						; size = 72
_this$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
?Translate@C2DMatrix@@QAEXNN@Z PROC			; C2DMatrix::Translate, COMDAT
; _this$ = ecx

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 161  :   Matrix mat;

	lea	ecx, DWORD PTR _mat$[ebp]
	call	??0Matrix@C2DMatrix@@QAE@XZ		; C2DMatrix::Matrix::Matrix

; 162  :   
; 163  :   mat._11 = 1; mat._12 = 0; mat._13 = 0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _mat$[ebp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+8], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+16], xmm0

; 164  :   
; 165  :   mat._21 = 0; mat._22 = 1; mat._23 = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+24], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _mat$[ebp+32], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR _mat$[ebp+40], xmm0

; 166  :   
; 167  :   mat._31 = x;    mat._32 = y;    mat._33 = 1;

	movsd	xmm0, QWORD PTR _x$[ebp]
	movsd	QWORD PTR _mat$[ebp+48], xmm0
	movsd	xmm0, QWORD PTR _y$[ebp]
	movsd	QWORD PTR _mat$[ebp+56], xmm0
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _mat$[ebp+64], xmm0

; 168  :   
; 169  :   //and multiply
; 170  :   MatrixMultiply(mat);

	lea	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z ; C2DMatrix::MatrixMultiply

; 171  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Translate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN5@Translate:
	DD	1
	DD	$LN4@Translate
$LN4@Translate:
	DD	-80					; ffffffb0H
	DD	72					; 00000048H
	DD	$LN3@Translate
$LN3@Translate:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?Translate@C2DMatrix@@QAEXNN@Z ENDP			; C2DMatrix::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ?Identity@C2DMatrix@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Identity@C2DMatrix@@QAEXXZ PROC			; C2DMatrix::Identity, COMDAT
; _this$ = ecx

; 149  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 150  :   m_Matrix._11 = 1; m_Matrix._12 = 0; m_Matrix._13 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+16], xmm0

; 151  : 
; 152  :   m_Matrix._21 = 0; m_Matrix._22 = 1; m_Matrix._23 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [ecx+32], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+40], xmm0

; 153  : 
; 154  :   m_Matrix._31 = 0; m_Matrix._32 = 0; m_Matrix._33 = 1;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+48], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+56], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [edx+64], xmm0

; 155  : 
; 156  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Identity@C2DMatrix@@QAEXXZ ENDP			; C2DMatrix::Identity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ??0C2DMatrix@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0C2DMatrix@@QAE@XZ PROC				; C2DMatrix::C2DMatrix, COMDAT
; _this$ = ecx

; 49   :   C2DMatrix()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Matrix@C2DMatrix@@QAE@XZ		; C2DMatrix::Matrix::Matrix

; 50   :   {
; 51   :     //initialize the matrix to an identity matrix
; 52   :     Identity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Identity@C2DMatrix@@QAEXXZ		; C2DMatrix::Identity

; 53   :   }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0C2DMatrix@@QAE@XZ ENDP				; C2DMatrix::C2DMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z
_TEXT	SEGMENT
_mat_temp$ = -80					; size = 72
_this$ = -4						; size = 4
_mIn$ = 8						; size = 4
?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z PROC	; C2DMatrix::MatrixMultiply, COMDAT
; _this$ = ecx

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 96   :   C2DMatrix::Matrix mat_temp;

	lea	ecx, DWORD PTR _mat_temp$[ebp]
	call	??0Matrix@C2DMatrix@@QAE@XZ		; C2DMatrix::Matrix::Matrix

; 97   :   
; 98   :   //first row
; 99   :   mat_temp._11 = (m_Matrix._11*mIn._11) + (m_Matrix._12*mIn._21) + (m_Matrix._13*mIn._31);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm1, QWORD PTR [eax+24]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+48]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp], xmm0

; 100  :   mat_temp._12 = (m_Matrix._11*mIn._12) + (m_Matrix._12*mIn._22) + (m_Matrix._13*mIn._32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm1, QWORD PTR [eax+32]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+56]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+8], xmm0

; 101  :   mat_temp._13 = (m_Matrix._11*mIn._13) + (m_Matrix._12*mIn._23) + (m_Matrix._13*mIn._33);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax]
	mulsd	xmm0, QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+8]
	mulsd	xmm1, QWORD PTR [eax+40]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	mulsd	xmm1, QWORD PTR [edx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+16], xmm0

; 102  : 
; 103  :   //second
; 104  :   mat_temp._21 = (m_Matrix._21*mIn._11) + (m_Matrix._22*mIn._21) + (m_Matrix._23*mIn._31);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+32]
	mulsd	xmm1, QWORD PTR [eax+24]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+40]
	mulsd	xmm1, QWORD PTR [edx+48]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+24], xmm0

; 105  :   mat_temp._22 = (m_Matrix._21*mIn._12) + (m_Matrix._22*mIn._22) + (m_Matrix._23*mIn._32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+32]
	mulsd	xmm1, QWORD PTR [eax+32]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+40]
	mulsd	xmm1, QWORD PTR [edx+56]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+32], xmm0

; 106  :   mat_temp._23 = (m_Matrix._21*mIn._13) + (m_Matrix._22*mIn._23) + (m_Matrix._23*mIn._33);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax+24]
	mulsd	xmm0, QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+32]
	mulsd	xmm1, QWORD PTR [eax+40]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+40]
	mulsd	xmm1, QWORD PTR [edx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+40], xmm0

; 107  : 
; 108  :   //third
; 109  :   mat_temp._31 = (m_Matrix._31*mIn._11) + (m_Matrix._32*mIn._21) + (m_Matrix._33*mIn._31);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	mulsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+56]
	mulsd	xmm1, QWORD PTR [eax+24]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+64]
	mulsd	xmm1, QWORD PTR [edx+48]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+48], xmm0

; 110  :   mat_temp._32 = (m_Matrix._31*mIn._12) + (m_Matrix._32*mIn._22) + (m_Matrix._33*mIn._32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	mulsd	xmm0, QWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+56]
	mulsd	xmm1, QWORD PTR [eax+32]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+64]
	mulsd	xmm1, QWORD PTR [edx+56]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+56], xmm0

; 111  :   mat_temp._33 = (m_Matrix._31*mIn._13) + (m_Matrix._32*mIn._23) + (m_Matrix._33*mIn._33);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mIn$[ebp]
	movsd	xmm0, QWORD PTR [eax+48]
	mulsd	xmm0, QWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [edx+56]
	mulsd	xmm1, QWORD PTR [eax+40]
	addsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mIn$[ebp]
	movsd	xmm1, QWORD PTR [ecx+64]
	mulsd	xmm1, QWORD PTR [edx+64]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _mat_temp$[ebp+64], xmm0

; 112  : 
; 113  :   m_Matrix = mat_temp;

	mov	ecx, 18					; 00000012H
	lea	esi, DWORD PTR _mat_temp$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 114  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MatrixMult
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@MatrixMult:
	DD	1
	DD	$LN4@MatrixMult
$LN4@MatrixMult:
	DD	-80					; ffffffb0H
	DD	72					; 00000048H
	DD	$LN3@MatrixMult
$LN3@MatrixMult:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?MatrixMultiply@C2DMatrix@@AAEXAAUMatrix@1@@Z ENDP	; C2DMatrix::MatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2D\C2DMatrix.h
;	COMDAT ??0Matrix@C2DMatrix@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Matrix@C2DMatrix@@QAE@XZ PROC			; C2DMatrix::Matrix::Matrix, COMDAT
; _this$ = ecx

; 32   :     Matrix()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 33   :     {
; 34   :       _11=0.0; _12=0.0; _13=0.0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+8], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+16], xmm0

; 35   :       _21=0.0; _22=0.0; _23=0.0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+24], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+32], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+40], xmm0

; 36   :       _31=0.0; _32=0.0; _33=0.0;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [eax+48], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [ecx+56], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [edx+64], xmm0

; 37   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Matrix@C2DMatrix@@QAE@XZ ENDP			; C2DMatrix::Matrix::Matrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\cgdi.h
;	COMDAT ?ClosedShape@Cgdi@@QAEXABV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z
_TEXT	SEGMENT
_p$1 = -8						; size = 4
_this$ = -4						; size = 4
_points$ = 8						; size = 4
?ClosedShape@Cgdi@@QAEXABV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z PROC ; Cgdi::ClosedShape, COMDAT
; _this$ = ecx

; 325  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 326  :     MoveToEx(m_hdc, (int)points[0].x, (int)points[0].y, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _points$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	cvttsd2si eax, QWORD PTR [eax+8]
	push	eax
	push	0
	mov	ecx, DWORD PTR _points$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	cvttsd2si ecx, QWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	call	DWORD PTR __imp__MoveToEx@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 327  :     
; 328  :     for (unsigned int p=1; p<points.size(); ++p)

	mov	DWORD PTR _p$1[ebp], 1
	jmp	SHORT $LN4@ClosedShap
$LN2@ClosedShap:
	mov	ecx, DWORD PTR _p$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$1[ebp], ecx
$LN4@ClosedShap:
	mov	ecx, DWORD PTR _points$[ebp]
	call	?size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::size
	cmp	DWORD PTR _p$1[ebp], eax
	jae	SHORT $LN3@ClosedShap

; 329  :     {
; 330  :       LineTo(m_hdc, (int)points[p].x, (int)points[p].y);

	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	mov	ecx, DWORD PTR _points$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	cvttsd2si eax, QWORD PTR [eax+8]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _p$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _points$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	cvttsd2si edx, QWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	call	DWORD PTR __imp__LineTo@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 331  :     }

	jmp	SHORT $LN2@ClosedShap
$LN3@ClosedShap:

; 332  : 
; 333  :     LineTo(m_hdc, (int)points[0].x, (int)points[0].y);

	push	0
	mov	ecx, DWORD PTR _points$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	cvttsd2si edx, QWORD PTR [eax+8]
	mov	esi, esp
	push	edx
	push	0
	mov	ecx, DWORD PTR _points$[ebp]
	call	??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
	cvttsd2si eax, QWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	push	edx
	call	DWORD PTR __imp__LineTo@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 334  :   }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClosedShape@Cgdi@@QAEXABV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z ENDP ; Cgdi::ClosedShape
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\cgdi.h
;	COMDAT ?TextColor@Cgdi@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
?TextColor@Cgdi@@QAEXHHH@Z PROC				; Cgdi::TextColor, COMDAT
; _this$ = ecx

; 227  :   void TextColor(int r, int g, int b){SetTextColor(m_hdc, RGB(r,g,b));}

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _r$[ebp]
	movzx	ecx, BYTE PTR _g$[ebp]
	shl	ecx, 8
	or	eax, ecx
	movzx	edx, BYTE PTR _b$[ebp]
	shl	edx, 16					; 00000010H
	or	eax, edx
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	call	DWORD PTR __imp__SetTextColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?TextColor@Cgdi@@QAEXHHH@Z ENDP				; Cgdi::TextColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\cgdi.h
;	COMDAT ?TextAtPos@Cgdi@@QAEXNNABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 8
_y$ = 16						; size = 8
_s$ = 24						; size = 4
?TextAtPos@Cgdi@@QAEXNNABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; Cgdi::TextAtPos, COMDAT
; _this$ = ecx

; 213  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 214  :     TextOut(m_hdc, (int)x, (int)y, s.c_str(), (int)s.size());

	mov	ecx, DWORD PTR _s$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	cvttsd2si eax, QWORD PTR _y$[ebp]
	push	eax
	cvttsd2si ecx, QWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+124]
	push	eax
	call	DWORD PTR __imp__TextOutA@20
	cmp	esi, esp
	call	__RTC_CheckEsp

; 215  :   }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?TextAtPos@Cgdi@@QAEXNNABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; Cgdi::TextAtPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\cgdi.h
;	COMDAT ?BrownPen@Cgdi@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BrownPen@Cgdi@@QAEXXZ PROC				; Cgdi::BrownPen, COMDAT
; _this$ = ecx

; 146  :   void BrownPen() {if(m_hdc){SelectObject(m_hdc, m_BrownPen);}}

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN1@BrownPen
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@BrownPen:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BrownPen@Cgdi@@QAEXXZ ENDP				; Cgdi::BrownPen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_pos$ = 8						; size = 16
?AddGrave@GraveMarkers@@QAEXUVector2D@@@Z PROC		; GraveMarkers::AddGrave
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 66   :   m_GraveList.push_back(GraveRecord(pos));

	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _pos$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0GraveRecord@GraveMarkers@@QAE@UVector2D@@@Z ; GraveMarkers::GraveRecord::GraveRecord
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEX$$QAUGraveRecord@GraveMarkers@@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::push_back

; 67   : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AddGrave@GraveMarkers@@QAEXUVector2D@@@Z ENDP		; GraveMarkers::AddGrave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
_TEXT	SEGMENT
tv181 = -168						; size = 4
tv179 = -164						; size = 4
tv66 = -160						; size = 4
$T2 = -156						; size = 16
$T3 = -140						; size = 16
$T4 = -124						; size = 16
$T5 = -108						; size = 12
$T6 = -93						; size = 1
$T7 = -92						; size = 28
_facing$ = -60						; size = 16
_it$ = -36						; size = 12
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Render@GraveMarkers@@QAEXXZ PROC			; GraveMarkers::Render
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Render@GraveMarkers@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 156				; 0000009cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 46   :   GraveList::iterator it = m_GraveList.begin();

	lea	eax, DWORD PTR _it$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 47   :   Vector2D facing(-1,0);

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _facing$[ebp]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D
	jmp	SHORT $LN4@Render
$LN2@Render:

; 48   :   for (it; it != m_GraveList.end(); ++it)

	lea	ecx, DWORD PTR _it$[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
$LN4@Render:
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::end
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv179[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv179[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator!=
	mov	BYTE PTR $T6[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T6[ebp]
	test	ecx, ecx
	je	$LN3@Render

; 49   :   {
; 50   :     
; 51   :     m_vecRIPVBTrans = WorldTransform(m_vecRIPVB,

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	ecx, DWORD PTR _facing$[ebp]
	call	?Perp@Vector2D@@QBE?AU1@XZ		; Vector2D::Perp
	push	eax
	lea	eax, DWORD PTR _facing$[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$[ebp]
	call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	?WorldTransform@@YA?AV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAV12@ABUVector2D@@111@Z ; WorldTransform
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv181[ebp], eax
	mov	eax, DWORD PTR tv181[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::operator=
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >

; 52   :                                    it->Position,
; 53   :                                    facing,
; 54   :                                    facing.Perp(),
; 55   :                                    Vector2D(1,1));
; 56   : 
; 57   :     gdi->BrownPen();

	call	?Instance@Cgdi@@SAPAV1@XZ		; Cgdi::Instance
	mov	ecx, eax
	call	?BrownPen@Cgdi@@QAEXXZ			; Cgdi::BrownPen

; 58   :     gdi->ClosedShape(m_vecRIPVBTrans);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	?Instance@Cgdi@@SAPAV1@XZ		; Cgdi::Instance
	mov	ecx, eax
	call	?ClosedShape@Cgdi@@QAEXABV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@Z ; Cgdi::ClosedShape

; 59   :     gdi->TextColor(133,90,0);

	push	0
	push	90					; 0000005aH
	push	133					; 00000085H
	call	?Instance@Cgdi@@SAPAV1@XZ		; Cgdi::Instance
	mov	ecx, eax
	call	?TextColor@Cgdi@@QAEXHHH@Z		; Cgdi::TextColor

; 60   :     gdi->TextAtPos(it->Position.x - 10, it->Position.y - 5, "RIP");

	push	OFFSET $SG153406
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	lea	ecx, DWORD PTR _it$[ebp]
	call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->
	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR __real@4014000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _it$[ebp]
	call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->
	movsd	xmm0, QWORD PTR [eax]
	subsd	xmm0, QWORD PTR __real@4024000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?Instance@Cgdi@@SAPAV1@XZ		; Cgdi::Instance
	mov	ecx, eax
	call	?TextAtPos@Cgdi@@QAEXNNABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; Cgdi::TextAtPos
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T7[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 61   :   }

	jmp	$LN2@Render
$LN3@Render:

; 62   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _it$[ebp]
	call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Render
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@Render:
	DD	2
	DD	$LN13@Render
$LN13@Render:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN10@Render
	DD	-60					; ffffffc4H
	DD	16					; 00000010H
	DD	$LN11@Render
$LN11@Render:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN10@Render:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Render@GraveMarkers@@QAEXXZ$0:
	lea	ecx, DWORD PTR _it$[ebp]
	jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?Render@GraveMarkers@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?Render@GraveMarkers@@QAEXXZ$3:
	lea	ecx, DWORD PTR $T7[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Render@GraveMarkers@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-164]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Render@GraveMarkers@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Render@GraveMarkers@@QAEXXZ ENDP			; GraveMarkers::Render
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
_TEXT	SEGMENT
tv163 = -100						; size = 4
tv161 = -96						; size = 4
tv193 = -92						; size = 8
tv177 = -84						; size = 8
tv158 = -76						; size = 4
tv66 = -72						; size = 4
$T2 = -68						; size = 12
$T3 = -56						; size = 4
$T4 = -52						; size = 12
$T5 = -37						; size = 1
_it$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Update@GraveMarkers@@QAEXXZ PROC			; GraveMarkers::Update
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Update@GraveMarkers@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 88					; 00000058H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 29   :   GraveList::iterator it = m_GraveList.begin();

	lea	eax, DWORD PTR _it$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::begin
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN2@Update:

; 30   :   while (it != m_GraveList.end())

	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::end
	mov	DWORD PTR tv66[ebp], eax
	mov	edx, DWORD PTR tv66[ebp]
	mov	DWORD PTR tv158[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv158[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$[ebp]
	call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator!=
	mov	BYTE PTR $T5[ebp], al
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	movzx	ecx, BYTE PTR $T5[ebp]
	test	ecx, ecx
	je	$LN3@Update

; 31   :   {
; 32   :     if (Clock->GetCurrentTime() - it->TimeCreated > m_dLifeTime)

	call	?Instance@CrudeTimer@@SAPAV1@XZ		; CrudeTimer::Instance
	mov	ecx, eax
	call	?GetTickCount@CrudeTimer@@QAENXZ	; CrudeTimer::GetTickCount
	fstp	QWORD PTR tv177[ebp]
	movsd	xmm0, QWORD PTR tv177[ebp]
	lea	ecx, DWORD PTR _it$[ebp]
	movsd	QWORD PTR tv193[ebp], xmm0
	call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QBEPAUGraveRecord@GraveMarkers@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator->
	movsd	xmm0, QWORD PTR tv193[ebp]
	subsd	xmm0, QWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	comisd	xmm0, QWORD PTR [edx]
	jbe	SHORT $LN4@Update

; 33   :     {
; 34   :       it = m_GraveList.erase(it);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	eax, DWORD PTR _it$[ebp]
	push	eax
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::erase
	mov	DWORD PTR tv161[ebp], eax
	mov	edx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv163[ebp], edx
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	lea	ecx, DWORD PTR _it$[ebp]
	call	??4?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ

; 35   :     }
; 36   :     else

	jmp	SHORT $LN5@Update
$LN4@Update:

; 37   :     {
; 38   :       ++it;

	lea	ecx, DWORD PTR _it$[ebp]
	call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
$LN5@Update:

; 39   :     }
; 40   :   }

	jmp	$LN2@Update
$LN3@Update:

; 41   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _it$[ebp]
	call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@Update:
	DD	1
	DD	$LN13@Update
$LN13@Update:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN11@Update
$LN11@Update:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Update@GraveMarkers@@QAEXXZ$0:
	lea	ecx, DWORD PTR _it$[ebp]
	jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?Update@GraveMarkers@@QAEXXZ$1:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?Update@GraveMarkers@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-96]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Update@GraveMarkers@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Update@GraveMarkers@@QAEXXZ ENDP			; GraveMarkers::Update
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
_TEXT	SEGMENT
_i$2 = -180						; size = 4
_rip$ = -172						; size = 144
_NumripVerts$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lifetime$ = 8						; size = 8
??0GraveMarkers@@QAE@N@Z PROC				; GraveMarkers::GraveMarkers
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0GraveMarkers@@QAE@N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 168				; 000000a8H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 7    : GraveMarkers::GraveMarkers(double lifetime):m_dLifeTime(lifetime)

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _lifetime$[ebp]
	movsd	QWORD PTR [eax], xmm0

; 8    : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 9    :       //create the vertex buffer for the graves
; 10   :     const int NumripVerts = 9;

	mov	DWORD PTR _NumripVerts$[ebp], 9

; 11   :     const Vector2D rip[NumripVerts] = {Vector2D(-4, -5),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c014000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c010000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 12   :                                        Vector2D(-4, 3),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c010000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+16]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 13   :                                        Vector2D(-3, 5),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4014000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c008000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+32]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 14   :                                        Vector2D(-1, 6),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4018000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@bff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+48]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 15   :                                        Vector2D(1, 6),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4018000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+64]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 16   :                                        Vector2D(3, 5),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4014000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+80]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 17   :                                        Vector2D(4, 3),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4008000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+96]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 18   :                                        Vector2D(4, -5),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c014000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@4010000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+112]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 19   :                                        Vector2D(-4, -5)};

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c014000000000000
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@c010000000000000
	movsd	QWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rip$[ebp+128]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D

; 20   :   for (int i=0; i<NumripVerts; ++i)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@GraveMarke
$LN2@GraveMarke:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@GraveMarke:
	cmp	DWORD PTR _i$2[ebp], 9
	jge	SHORT $LN3@GraveMarke

; 21   :   {
; 22   :     m_vecRIPVB.push_back(rip[i]);

	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _rip$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?push_back@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXABUVector2D@@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::push_back

; 23   :   }

	jmp	SHORT $LN2@GraveMarke
$LN3@GraveMarke:

; 24   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@GraveMarke
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN12@GraveMarke:
	DD	1
	DD	$LN11@GraveMarke
$LN11@GraveMarke:
	DD	-172					; ffffff54H
	DD	144					; 00000090H
	DD	$LN9@GraveMarke
$LN9@GraveMarke:
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0GraveMarkers@@QAE@N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >
__unwindfunclet$??0GraveMarkers@@QAE@N@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >
__unwindfunclet$??0GraveMarkers@@QAE@N@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::~list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >
__ehhandler$??0GraveMarkers@@QAE@N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0GraveMarkers@@QAE@N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0GraveMarkers@@QAE@N@Z ENDP				; GraveMarkers::GraveMarkers
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1524 :     const _Ty1& _Get_first() const noexcept { // return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1525 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1526 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1520 :     _Ty1& _Get_first() noexcept { // return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1521 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1522 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >, COMDAT
; _this$ = ecx

; 371  :     _List_val() : _Myhead(), _Mysize(0) { // initialize data

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 372  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Mysize@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mysize@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAIXZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Mysize, COMDAT
; _this$ = ecx

; 1675 :     size_type& _Mysize() noexcept { // return reference to _Mysize

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1676 :         return _Get_data()._Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	add	eax, 8

; 1677 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Mysize@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAIXZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead, COMDAT
; _this$ = ecx

; 1667 :     _Nodeptr& _Myhead() noexcept { // return reference to _Myhead

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1668 :         return _Get_data()._Myhead;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	add	eax, 4

; 1669 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data, COMDAT
; _this$ = ecx

; 1663 :     const _Scary_val& _Get_data() const noexcept { // return const reference to _Scary_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1664 :         return _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]

; 1665 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data, COMDAT
; _this$ = ecx

; 1659 :     _Scary_val& _Get_data() noexcept { // return reference to _Scary_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1660 :         return _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]

; 1661 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal, COMDAT
; _this$ = ecx

; 1655 :     const _Alnode& _Getal() const noexcept { // return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1656 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first

; 1657 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal, COMDAT
; _this$ = ecx

; 1651 :     _Alnode& _Getal() noexcept { // return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1652 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Get_first

; 1653 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Newhead$ = -64					; size = 4
__Al$ = -56						; size = 4
__Proxy$ = -48						; size = 8
_$S15$ = -29						; size = 1
__Alproxy$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1631 :     void _Alloc_sentinel_and_proxy() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1632 :         auto& _My_data  = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1633 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S15$[ebp]
	call	??$?0U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<GraveMarkers::GraveRecord,void *> >
	lea	eax, DWORD PTR _$S15$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1634 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	ecx, DWORD PTR __My_data$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1635 :         auto& _Al     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1636 :         auto _Newhead = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocate
	mov	DWORD PTR __Newhead$[ebp], eax

; 1637 :         _Alnode_traits::construct(_Al, _STD addressof(_Newhead->_Next), _Newhead); // assumed nothrow

	lea	eax, DWORD PTR __Newhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newhead$[ebp]
	push	ecx
	call	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * &>
	add	esp, 12					; 0000000cH

; 1638 :         _Alnode_traits::construct(_Al, _STD addressof(_Newhead->_Prev), _Newhead);

	lea	eax, DWORD PTR __Newhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newhead$[ebp]
	add	ecx, 4
	push	ecx
	call	??$addressof@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@YAPAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<GraveMarkers::GraveRecord,void *> *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@QAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::construct<std::_List_node<GraveMarkers::GraveRecord,void *> *,std::_List_node<GraveMarkers::GraveRecord,void *> * &>
	add	esp, 12					; 0000000cH

; 1639 :         _My_data._Myhead = _Newhead;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Newhead$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1640 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 1641 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Alloc_sent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@Alloc_sent:
	DD	3
	DD	$LN8@Alloc_sent
$LN8@Alloc_sent:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Alloc_sent
	DD	-48					; ffffffd0H
	DD	8
	DD	$LN5@Alloc_sent
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN6@Alloc_sent
$LN6@Alloc_sent:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN5@Alloc_sent:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN4@Alloc_sent:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	53					; 00000035H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-64]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Alloc_sentinel_and_proxy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z
_TEXT	SEGMENT
__Pnextptr$2 = -44					; size = 4
__Pnextnext$3 = -40					; size = 4
__Head$ = -36						; size = 4
__Pnext$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Orphan_ptr2, COMDAT
; _this$ = ecx

; 1593 :     void _Orphan_ptr2(_Nodeptr _Ptr) noexcept { // orphan iterators with specified node pointers

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1594 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1595 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1596 :         _Iterator_base12** _Pnext = &_Get_data()._Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	mov	eax, DWORD PTR [eax]
	add	eax, 4
	mov	DWORD PTR __Pnext$[ebp], eax

; 1597 :         const auto _Head          = _Myhead();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Head$[ebp], ecx
$LN2@Orphan_ptr:

; 1598 :         while (*_Pnext != nullptr) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Orphan_ptr

; 1599 :             _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnextnext$3[ebp], ecx

; 1600 :             const auto _Pnextptr          = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnextptr$2[ebp], ecx

; 1601 :             if (_Pnextptr == _Head || _Pnextptr != _Ptr) {

	mov	edx, DWORD PTR __Pnextptr$2[ebp]
	cmp	edx, DWORD PTR __Head$[ebp]
	je	SHORT $LN6@Orphan_ptr
	mov	eax, DWORD PTR __Pnextptr$2[ebp]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	je	SHORT $LN4@Orphan_ptr
$LN6@Orphan_ptr:

; 1602 :                 // iterator is end() or doesn't point at the one we are orphaning, move on
; 1603 :                 _Pnext = _Pnextnext;

	mov	ecx, DWORD PTR __Pnextnext$3[ebp]
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1604 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ptr
$LN4@Orphan_ptr:

; 1605 :                 (*_Pnext)->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0

; 1606 :                 *_Pnext             = *_Pnextnext;

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR __Pnextnext$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
$LN5@Orphan_ptr:

; 1607 :             }
; 1608 :         }

	jmp	SHORT $LN2@Orphan_ptr
$LN3@Orphan_ptr:

; 1609 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1610 :         (void) _Ptr;
; 1611 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1612 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ptr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN11@Orphan_ptr:
	DD	1
	DD	$LN10@Orphan_ptr
$LN10@Orphan_ptr:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@Orphan_ptr
$LN8@Orphan_ptr:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Orphan_ptr2
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Tidy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__My_data$ = -12					; size = 4
__Al$ = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Tidy, COMDAT
; _this$ = ecx

; 1199 :     void _Tidy() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1200 :         auto& _Al      = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1201 :         auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 1202 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1203 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Free_non_head@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Free_non_head<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	add	esp, 8

; 1204 :         _Node::_Freenode0(_Al, _My_data._Myhead);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Freenode0@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode0<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	add	esp, 8

; 1205 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv167 = -52						; size = 4
tv164 = -48						; size = 4
tv173 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
$T5 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::erase, COMDAT
; _this$ = ecx

; 1148 :     iterator erase(const_iterator _Where) { // erase element at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN4@erase:

; 1149 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 :         _STL_VERIFY(_Where._Getcont() == _STD addressof(_Get_data()), "list erase iterator outside range");

	lea	ecx, DWORD PTR __Where$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	push	eax
	call	??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN7@erase
	jmp	SHORT $LN2@erase
$LN7@erase:
	push	OFFSET ??_C@_0CC@KEJJOMBH@list?5erase?5iterator?5outside?5ran@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1150					; 0000047eH
	push	OFFSET ??_C@_0GF@EDKJAGDO@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@erase
	int	3
$LN11@erase:
	push	0
	push	1150					; 0000047eH
	push	OFFSET ??_C@_1MK@OEMIBCNG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1NG@LDJHJLCI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAl?$AAi?$AAs?$AAt?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc@
	push	OFFSET ??_C@_1EI@FHIDKIBN@?$AA?$CC?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@erase
$LN2@erase:
	xor	edx, edx
	jne	SHORT $LN4@erase

; 1151 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1152 :         _Node::_Freenode(_Getal(), _Unlinknode(_Get_unwrapped(_Where++)));

	push	0
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::operator++
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR tv173[ebp]
	mov	DWORD PTR tv164[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv164[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??$_Get_unwrapped@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@$0A@@std@@YA@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@0@@Z ; std::_Get_unwrapped<std::_List_const_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >,0>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unlinknode@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unlinknode
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	push	eax
	call	??$_Freenode@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@PAU01@@Z ; std::_List_node<GraveMarkers::GraveRecord,void *>::_Freenode<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >
	add	esp, 8
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ

; 1153 :         return _Make_iter(_Where);

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	lea	edx, DWORD PTR __Where$[ebp]
	push	edx
	call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Make_iter
	mov	DWORD PTR tv167[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1154 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z$0:
	lea	ecx, DWORD PTR __Where$[ebp]
	jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z$1:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
__ehhandler$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::erase
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Unlinknode@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv74 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Unlinknode@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unlinknode, COMDAT
; _this$ = ecx

; 1125 :     _Nodeptr _Unlinknode(_Unchecked_const_iterator _Where) { // unlink node at _Where from the list

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1126 :         auto _Pnode = _Where._Ptr;

	mov	eax, DWORD PTR __Where$[ebp]
	mov	DWORD PTR __Pnode$[ebp], eax

; 1127 :         _Orphan_ptr2(_Pnode);

	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_ptr2@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Orphan_ptr2

; 1128 :         _Pnode->_Prev->_Next = _Pnode->_Next;

	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1129 :         _Pnode->_Next->_Prev = _Pnode->_Prev;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 1130 :         --_Mysize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mysize@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAIXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Mysize
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR [eax], edx

; 1131 :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 1132 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Unlinknode@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unlinknode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?max_size@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBEIXZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::max_size, COMDAT
; _this$ = ecx

; 1011 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1012 :         return _Alnode_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::max_size
	add	esp, 4

; 1013 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBEIXZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 12
?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Make_iter, COMDAT
; _this$ = ecx

; 924  :     iterator _Make_iter(const_iterator _Where) const noexcept { // make iterator from const_iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 925  :         return iterator(_Where._Ptr, _STD addressof(_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@ABEABV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	push	eax
	call	??$addressof@$$CBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@ABV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > const >
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Where$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	lea	ecx, DWORD PTR __Where$[ebp]
	call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 926  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Make_iter@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@@Z ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Make_iter
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?_Unchecked_end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 916  :     _Unchecked_iterator _Unchecked_end() { // return unchecked iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  :         return _Unchecked_iterator(_Myhead(), nullptr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 918  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Unchecked_end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::end, COMDAT
; _this$ = ecx

; 900  :     _NODISCARD iterator end() noexcept { // return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 901  :         return iterator(_Myhead(), _STD addressof(_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	push	eax
	call	??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 902  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::end
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::begin, COMDAT
; _this$ = ecx

; 892  :     _NODISCARD iterator begin() noexcept { // return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 893  :         return iterator(_Myhead()->_Next, _STD addressof(_Get_data()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	push	eax
	call	??$addressof@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myhead@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Myhead
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@std@@QAE@PAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >::_List_iterator<std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 894  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?begin@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::begin
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??1?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_$S3$ = -13						; size = 1
__Alproxy$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::~list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >, COMDAT
; _this$ = ecx

; 847  :     ~list() noexcept { // destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 848  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Tidy

; 849  : #if _ITERATOR_DEBUG_LEVEL != 0
; 850  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S3$[ebp]
	call	??$?0U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_List_node<GraveMarkers::GraveRecord,void *> >
	lea	eax, DWORD PTR _$S3$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 851  :         _Delete_plain(_Alproxy, _Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEAAV?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Get_data
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 852  : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 853  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@list
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@list:
	DD	1
	DD	$LN4@list
$LN4@list:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN3@list
$LN3@list:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	51					; 00000033H
	DB	0
??1?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::~list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ?push_back@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEX$$QAUGraveRecord@GraveMarkers@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEX$$QAUGraveRecord@GraveMarkers@@@Z PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::push_back, COMDAT
; _this$ = ecx

; 775  :     void push_back(_Ty&& _Val) { // insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 776  :         _Insert(_Unchecked_end(), _STD move(_Val));

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Unchecked_end@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@@2@XZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Unchecked_end
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	call	??$move@AAUGraveRecord@GraveMarkers@@@std@@YA$$QAUGraveRecord@GraveMarkers@@AAU12@@Z ; std::move<GraveMarkers::GraveRecord &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Insert@UGraveRecord@GraveMarkers@@@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@std@@U_Iterator_base0@2@@1@$$QAUGraveRecord@GraveMarkers@@@Z ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Insert<GraveMarkers::GraveRecord>

; 777  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAEX$$QAUGraveRecord@GraveMarkers@@@Z ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\list
;	COMDAT ??0?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ PROC ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >, COMDAT
; _this$ = ecx

; 603  :     list() : _Mypair(_Zero_then_variadic_args_t()) { // construct empty list

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@UGraveRecord@GraveMarkers@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1>::_Compressed_pair<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >,std::_List_val<std::_List_simple_types<GraveMarkers::GraveRecord> >,1><>

; 604  :         _Alloc_sentinel_and_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_sentinel_and_proxy@?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@AAEXXZ ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::_Alloc_sentinel_and_proxy

; 605  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$list@UGraveRecord@GraveMarkers@@V?$allocator@UGraveRecord@GraveMarkers@@@std@@@std@@QAE@XZ ENDP ; std::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >::list<GraveMarkers::GraveRecord,std::allocator<GraveMarkers::GraveRecord> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::max_size, COMDAT

; 828  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept { // get maximum size

	push	ebp
	mov	ebp, esp

; 829  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 134217727				; 07ffffffH

; 830  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@QAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@QAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::deallocate, COMDAT

; 813  :     static void deallocate(_Alloc&, const pointer _Ptr, const size_type _Count) { // deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 814  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 815  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 816  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@2@QAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocate, COMDAT
; _this$ = ecx

; 930  :         _CRT_GUARDOVERFLOW const size_t _Count) { // allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 931  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0CA@@std@@YAII@Z	; std::_Get_size_of_n<32>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 932  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEPAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEXQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEXQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::deallocate, COMDAT
; _this$ = ecx

; 924  :     void deallocate(_Ty* const _Ptr, const size_t _Count) { // deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 925  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 926  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 5
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 927  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAEXQAU?$_List_node@UGraveRecord@GraveMarkers@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >, COMDAT
; _this$ = ecx

; 916  :     constexpr allocator() noexcept { // construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_List_node@UGraveRecord@GraveMarkers@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >::allocator<std::_List_node<GraveMarkers::GraveRecord,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QBEABV?$allocator@UVector2D@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QBEABV?$allocator@UVector2D@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1524 :     const _Ty1& _Get_first() const noexcept { // return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1525 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1526 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QBEABV?$allocator@UVector2D@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAEAAV?$allocator@UVector2D@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAEAAV?$allocator@UVector2D@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1520 :     _Ty1& _Get_first() noexcept { // return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1521 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1522 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAEAAV?$allocator@UVector2D@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<Vector2D> >::_Vector_val<std::_Simple_types<Vector2D> >, COMDAT
; _this$ = ecx

; 318  :     _Vector_val() : _Myfirst(), _Mylast(), _Myend() { // initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 319  :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<Vector2D> >::_Vector_val<std::_Simple_types<Vector2D> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEABV?$allocator@UVector2D@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEABV?$allocator@UVector2D@@@2@XZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal, COMDAT
; _this$ = ecx

; 1706 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1707 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QBEABV?$allocator@UVector2D@@@2@XZ ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first

; 1708 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEABV?$allocator@UVector2D@@@2@XZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal, COMDAT
; _this$ = ecx

; 1702 :     _Alty& _Getal() noexcept { // return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1703 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAEAAV?$allocator@UVector2D@@@2@XZ ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Get_first

; 1704 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Orphan_range@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEXPAUVector2D@@0@Z
_TEXT	SEGMENT
__Pnextptr$1 = -24					; size = 4
__Pnext$ = -20						; size = 4
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEXPAUVector2D@@0@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1682 :     void _Orphan_range(pointer _First, pointer _Last) const { // orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1683 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1684 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1685 : 
; 1686 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 1687 :         while (*_Pnext) {

	mov	edx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Orphan_ran

; 1688 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$1[ebp], edx

; 1689 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	eax, DWORD PTR __Pnextptr$1[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __Pnextptr$1[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1690 :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	DWORD PTR __Pnext$[ebp], eax

; 1691 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1692 :                 (*_Pnext)->_Myproxy = nullptr;

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 1693 :                 *_Pnext             = (*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN5@Orphan_ran:

; 1694 :             }
; 1695 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 1696 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1697 :         (void) _First;
; 1698 :         (void) _Last;
; 1699 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1700 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN11@Orphan_ran:
	DD	1
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@Orphan_ran
$LN9@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEXPAUVector2D@@0@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Xlength@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@CAXXZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Xlength, COMDAT

; 1674 :     [[noreturn]] static void _Xlength() { // report a length_error

	push	ebp
	mov	ebp, esp

; 1675 :         _Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1676 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlength@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@CAXXZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Tidy, COMDAT
; _this$ = ecx

; 1656 :     void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1657 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1658 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1659 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1660 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1661 : 
; 1662 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1663 : 
; 1664 :         if (_Myfirst != pointer()) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Tidy

; 1665 :             _Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Destroy

; 1666 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 4
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z ; std::allocator<Vector2D>::deallocate

; 1667 : 
; 1668 :             _Myfirst = pointer();

	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [edx], 0

; 1669 :             _Mylast  = pointer();

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 1670 :             _Myend   = pointer();

	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], 0
$LN3@Tidy:

; 1671 :         }
; 1672 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Tidy
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Change_array@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXQAUVector2D@@II@Z
_TEXT	SEGMENT
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXQAUVector2D@@II@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Change_array, COMDAT
; _this$ = ecx

; 1637 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1638 :         // orphan all iterators, discard old array, acquire new array
; 1639 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1640 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1641 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1642 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1643 : 
; 1644 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 1645 : 
; 1646 :         if (_Myfirst != pointer()) { // destroy and deallocate old array

	mov	ecx, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Change_arr

; 1647 :             _Destroy(_Myfirst, _Mylast);

	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Destroy

; 1648 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 4
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z ; std::allocator<Vector2D>::deallocate
$LN2@Change_arr:

; 1649 :         }
; 1650 : 
; 1651 :         _Myfirst = _Newvec;

	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [edx], eax

; 1652 :         _Mylast  = _Newvec + _Newsize;

	mov	ecx, DWORD PTR __Newsize$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR __Newvec$[ebp]
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 1653 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], eax

; 1654 :     }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXQAUVector2D@@II@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Buy_raw@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__Myfirst$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXI@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1603 :     void _Buy_raw(const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1604 :         // allocate array with _Newcapacity elements
; 1605 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1606 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	mov	DWORD PTR __Myfirst$[ebp], ecx

; 1607 :         pointer& _Mylast  = _My_data._Mylast;

	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 8
	mov	DWORD PTR __Mylast$[ebp], edx

; 1608 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1609 : 
; 1610 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1611 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1612 : 
; 1613 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@UVector2D@@@std@@QAEPAUVector2D@@I@Z ; std::allocator<Vector2D>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 1614 :         _Myfirst           = _Newvec;

	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [edx], eax

; 1615 :         _Mylast            = _Newvec;

	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [ecx], edx

; 1616 :         _Myend             = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], eax

; 1617 :     }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy_raw@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXI@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Calculate_growth@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
__Oldcapacity$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEII@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1585 :     size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1586 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1587 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1588 : 
; 1589 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1590 :             return _Newsize; // geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1591 :         }
; 1592 : 
; 1593 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1594 : 
; 1595 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1596 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1597 :         }
; 1598 : 
; 1599 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1600 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEII@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Destroy, COMDAT
; _this$ = ecx

; 1581 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1582 :         _Destroy_range(_First, _Last, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@UVector2D@@@std@@@std@@YAXPAUVector2D@@0AAV?$allocator@UVector2D@@@0@@Z ; std::_Destroy_range<std::allocator<Vector2D> >
	add	esp, 12					; 0000000cH

; 1583 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@0@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1575 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1576 :         // move_if_noexcept [_First, _Last) to raw _Dest, using allocator
; 1577 :         _Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00U?$integral_constant@_N$00@2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept1

; 1578 :             bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1579 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1565 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1566 :         // move [_First, _Last) to raw _Dest, using allocator
; 1567 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ; std::_Uninitialized_move<Vector2D *,Vector2D *,std::allocator<Vector2D> >
	add	esp, 16					; 00000010H

; 1568 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXPAUVector2D@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Umove@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU3@00@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove, COMDAT
; _this$ = ecx

; 1561 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1562 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUVector2D@@PAU1@V?$allocator@UVector2D@@@std@@@std@@YAPAUVector2D@@QAU1@0PAU1@AAV?$allocator@UVector2D@@@0@@Z ; std::_Uninitialized_move<Vector2D *,Vector2D *,std::allocator<Vector2D> >
	add	esp, 16					; 00000010H

; 1563 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU3@00@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[], COMDAT
; _this$ = ecx

; 1475 :     _NODISCARD const _Ty& operator[](const size_type _Pos) const { // subscript nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1476 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1477 : #if _ITERATOR_DEBUG_LEVEL != 0
; 1478 :         _STL_VERIFY(

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1479					; 000005c7H
	push	OFFSET ??_C@_0GH@CCKIPOPB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1479					; 000005c7H
	push	OFFSET ??_C@_1MO@BGGMBFHK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1KC@ILGGEGM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H

; 1479 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");

	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1480 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1481 : 
; 1482 :         return _My_data._Myfirst[_Pos];

	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 1483 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEABUVector2D@@I@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[], COMDAT
; _this$ = ecx

; 1465 :     _NODISCARD _Ty& operator[](const size_type _Pos) { // subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1466 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1467 : #if _ITERATOR_DEBUG_LEVEL != 0
; 1468 :         _STL_VERIFY(

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1469					; 000005bdH
	push	OFFSET ??_C@_0GH@CCKIPOPB@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1469					; 000005bdH
	push	OFFSET ??_C@_1MO@BGGMBFHK@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1KC@ILGGEGM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H

; 1469 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");

	xor	edx, edx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1470 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1471 : 
; 1472 :         return _My_data._Myfirst[_Pos];

	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 1473 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAUVector2D@@I@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?capacity@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?capacity@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::capacity, COMDAT
; _this$ = ecx

; 1460 :     _NODISCARD size_type capacity() const noexcept { // return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1461 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1462 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4

; 1463 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?max_size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::max_size, COMDAT
; _this$ = ecx

; 1455 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1456 :         return _Min_value(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEABV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAIABV?$allocator@UVector2D@@@2@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1457 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1458 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::size, COMDAT
; _this$ = ecx

; 1450 :     _NODISCARD size_type size() const noexcept { // return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1451 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1452 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx+4]
	sar	eax, 4

; 1453 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QBEIXZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?push_back@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXABUVector2D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXABUVector2D@@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::push_back, COMDAT
; _this$ = ecx

; 673  :     void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 674  :         emplace_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@ABUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABUVector2D@@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::emplace_back<Vector2D const &>

; 675  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEXABUVector2D@@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S1$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 629  :     ~vector() noexcept { // destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 630  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Tidy

; 631  : #if _ITERATOR_DEBUG_LEVEL != 0
; 632  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S1$[ebp]
	call	??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>
	lea	eax, DWORD PTR _$S1$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 633  :         _Delete_plain(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR __Alproxy$[ebp]
	push	eax
	call	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 634  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 635  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@vector:
	DD	1
	DD	$LN5@vector
$LN5@vector:
	DD	-25					; ffffffe7H
	DD	1
	DD	$LN3@vector
$LN3@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::~vector<Vector2D,std::allocator<Vector2D> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??4?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::operator=, COMDAT
; _this$ = ecx

; 621  :     vector& operator=(vector&& _Right) _NOEXCEPT_COND(noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 622  :         if (this != _STD addressof(_Right)) {

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@YAPAV?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@0@AAV10@@Z ; std::addressof<std::vector<Vector2D,std::allocator<Vector2D> > >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	je	SHORT $LN2@operator

; 623  :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

	xor	ecx, ecx
	mov	BYTE PTR $T1[ebp], cl
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_assign@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_assign
$LN2@operator:

; 624  :         }
; 625  : 
; 626  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 627  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Move_assign@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_assign, COMDAT
; _this$ = ecx

; 552  :     void _Move_assign(vector& _Right, _Equal_allocators) noexcept {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 553  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXXZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Tidy

; 554  :         _Pocma(_Getal(), _Right._Getal());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	call	??$_Pocma@V?$allocator@UVector2D@@@std@@@std@@YAXAAV?$allocator@UVector2D@@@0@0@Z ; std::_Pocma<std::allocator<Vector2D> >
	add	esp, 8

; 555  :         _Take_contents(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Take_contents@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Take_contents

; 556  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Move_assign@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -19						; size = 1
$T3 = -18						; size = 1
$T4 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 537  :     vector(vector&& _Right) noexcept

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 538  :         : _Mypair(_One_then_variadic_args_t(), _STD move(_Right._Getal())) { // construct by moving _Right

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	call	??$move@AAV?$allocator@UVector2D@@@std@@@std@@YA$$QAV?$allocator@UVector2D@@@0@AAV10@@Z ; std::move<std::allocator<Vector2D> &>
	add	esp, 4
	push	eax
	movzx	eax, BYTE PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@UVector2D@@@std@@$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UVector2D@@@1@@Z ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><std::allocator<Vector2D> >

; 539  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 540  :         _Move_construct(_Right, true_type{});

	xor	ecx, ecx
	mov	BYTE PTR $T2[ebp], cl
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_construct@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_construct

; 541  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Move_construct@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_construct@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_construct, COMDAT
; _this$ = ecx

; 511  :     void _Move_construct(vector& _Right, true_type) noexcept { // move from _Right, stealing its contents

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 512  :         _Take_contents(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Take_contents@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Take_contents

; 513  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Move_construct@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Move_construct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ?_Take_contents@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
__Right_data$ = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::_Take_contents, COMDAT
; _this$ = ecx

; 496  :     void _Take_contents(vector& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 497  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 498  :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], ecx

; 499  :         _My_data._Swap_proxy_and_iterators(_Right_data);

	mov	edx, DWORD PTR __Right_data$[ebp]
	push	edx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 500  : 
; 501  :         _My_data._Myfirst = _Right_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 502  :         _My_data._Mylast  = _Right_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 503  :         _My_data._Myend   = _Right_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 504  : 
; 505  :         _Right_data._Myfirst = pointer();

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [eax+4], 0

; 506  :         _Right_data._Mylast  = pointer();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 507  :         _Right_data._Myend   = pointer();

	mov	edx, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [edx+12], 0

; 508  :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Take_contents@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXAAV12@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -78						; size = 1
$T3 = -77						; size = 1
__Guard$4 = -72						; size = 4
__Proxy$ = -60						; size = 8
__Rightlast$ = -48					; size = 4
__Rightfirst$ = -44					; size = 4
__Right_data$ = -40					; size = 4
__My_data$ = -36					; size = 4
_$S2$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 460  :               _Alty_traits::select_on_container_copy_construction(_Right._Getal())) { // construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 459  :         : _Mypair(_One_then_variadic_args_t(),

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@ABEABV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SA?AV?$allocator@UVector2D@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<Vector2D> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@UVector2D@@@std@@$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UVector2D@@@1@@Z ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><std::allocator<Vector2D> >

; 461  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S2$[ebp]
	call	??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>
	lea	edx, DWORD PTR _$S2$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], edx

; 462  :         auto& _My_data            = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 463  :         const auto& _Right_data   = _Right._Mypair._Myval2;

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], ecx

; 464  :         const pointer _Rightfirst = _Right_data._Myfirst;

	mov	edx, DWORD PTR __Right_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR __Rightfirst$[ebp], eax

; 465  :         const pointer _Rightlast  = _Right_data._Mylast;

	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Rightlast$[ebp], edx

; 466  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 467  :         if (_Rightfirst != _Rightlast) {

	mov	edx, DWORD PTR __Rightfirst$[ebp]
	cmp	edx, DWORD PTR __Rightlast$[ebp]
	je	SHORT $LN2@vector

; 468  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

	mov	eax, DWORD PTR __Rightlast$[ebp]
	sub	eax, DWORD PTR __Rightfirst$[ebp]
	sar	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy_raw@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEXI@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Buy_raw

; 469  :             _Tidy_guard<vector> _Guard{this};

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Guard$4[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 470  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __Rightlast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Rightfirst$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUVector2D@@@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEPAUVector2D@@PAU2@00@Z ; std::vector<Vector2D,std::allocator<Vector2D> >::_Ucopy<Vector2D *>
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 471  :             _Guard._Target   = nullptr;

	mov	DWORD PTR __Guard$4[ebp], 0

; 472  :         }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Guard$4[ebp]
	call	??1?$_Tidy_guard@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >::~_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >
$LN2@vector:

; 473  : 
; 474  :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 475  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN11@vector:
	DD	3
	DD	$LN10@vector
$LN10@vector:
	DD	-25					; ffffffe7H
	DD	1
	DD	$LN6@vector
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN7@vector
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN8@vector
$LN8@vector:
	DB	95					; 0000005fH
	DB	71					; 00000047H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
$LN7@vector:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN6@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__unwindfunclet$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z$1:
	lea	ecx, DWORD PTR __Guard$4[ebp]
	jmp	??1?$_Tidy_guard@V?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >::~_Tidy_guard<std::vector<Vector2D,std::allocator<Vector2D> > >
__ehhandler$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vector
;	COMDAT ??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -18						; size = 1
$T3 = -17						; size = 1
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ PROC ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >, COMDAT
; _this$ = ecx

; 371  :     vector() _NOEXCEPT_COND(is_nothrow_default_constructible_v<_Alty>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 372  :         : _Mypair(_Zero_then_variadic_args_t()) { // construct empty vector

	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@UVector2D@@@std@@V?$_Vector_val@U?$_Simple_types@UVector2D@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1>::_Compressed_pair<std::allocator<Vector2D>,std::_Vector_val<std::_Simple_types<Vector2D> >,1><>

; 373  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@AAEAAV?$allocator@UVector2D@@@2@XZ ; std::vector<Vector2D,std::allocator<Vector2D> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0UVector2D@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UVector2D@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Vector2D>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 374  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UVector2D@@V?$allocator@UVector2D@@@std@@@std@@QAE@XZ ENDP ; std::vector<Vector2D,std::allocator<Vector2D> >::vector<Vector2D,std::allocator<Vector2D> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SA?AV?$allocator@UVector2D@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SA?AV?$allocator@UVector2D@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<Vector2D> >::select_on_container_copy_construction, COMDAT

; 832  :     _NODISCARD static _Alloc select_on_container_copy_construction(const _Alloc& _Al) { // get allocator to use

	push	ebp
	mov	ebp, esp

; 833  :         return _Al;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 834  :     }

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SA?AV?$allocator@UVector2D@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Vector2D> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAIABV?$allocator@UVector2D@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAIABV?$allocator@UVector2D@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<Vector2D> >::max_size, COMDAT

; 828  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept { // get maximum size

	push	ebp
	mov	ebp, esp

; 829  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 268435455				; 0fffffffH

; 830  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@UVector2D@@@std@@@std@@SAIABV?$allocator@UVector2D@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<Vector2D> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?allocate@?$allocator@UVector2D@@@std@@QAEPAUVector2D@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UVector2D@@@std@@QAEPAUVector2D@@I@Z PROC ; std::allocator<Vector2D>::allocate, COMDAT
; _this$ = ecx

; 930  :         _CRT_GUARDOVERFLOW const size_t _Count) { // allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 931  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BA@@std@@YAII@Z	; std::_Get_size_of_n<16>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 932  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UVector2D@@@std@@QAEPAUVector2D@@I@Z ENDP ; std::allocator<Vector2D>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z PROC ; std::allocator<Vector2D>::deallocate, COMDAT
; _this$ = ecx

; 924  :     void deallocate(_Ty* const _Ptr, const size_t _Count) { // deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 925  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 926  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 927  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UVector2D@@@std@@QAEXQAUVector2D@@I@Z ENDP ; std::allocator<Vector2D>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$allocator@UVector2D@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UVector2D@@@std@@QAE@XZ PROC		; std::allocator<Vector2D>::allocator<Vector2D>, COMDAT
; _this$ = ecx

; 916  :     constexpr allocator() noexcept { // construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UVector2D@@@std@@QAE@XZ ENDP		; std::allocator<Vector2D>::allocator<Vector2D>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.h
;	COMDAT ??0GraveRecord@GraveMarkers@@QAE@UVector2D@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 16
??0GraveRecord@GraveMarkers@@QAE@UVector2D@@@Z PROC	; GraveMarkers::GraveRecord::GraveRecord, COMDAT
; _this$ = ecx

; 29   :     {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 27   :     GraveRecord(Vector2D pos):Position(pos),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pos$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pos$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _pos$[ebp+12]
	mov	DWORD PTR [eax+12], edx

; 28   :                               TimeCreated(Clock->GetCurrentTime())

	call	?Instance@CrudeTimer@@SAPAV1@XZ		; CrudeTimer::Instance
	mov	ecx, eax
	call	?GetTickCount@CrudeTimer@@QAENXZ	; CrudeTimer::GetTickCount
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+16]

; 29   :     {}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0GraveRecord@GraveMarkers@@QAE@UVector2D@@@Z ENDP	; GraveMarkers::GraveRecord::GraveRecord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\time\crudetimer.h
;	COMDAT ?GetTickCount@CrudeTimer@@QAENXZ
_TEXT	SEGMENT
tv78 = -16						; size = 8
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?GetTickCount@CrudeTimer@@QAENXZ PROC			; CrudeTimer::GetTickCount, COMDAT
; _this$ = ecx

; 42   :   double GetCurrentTime(){return timeGetTime() * 0.001 - m_dStartTime;}

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	call	DWORD PTR __imp__timeGetTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv73[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	mov	ecx, DWORD PTR _this$[ebp]
	subsd	xmm0, QWORD PTR [ecx]
	movsd	QWORD PTR tv78[ebp], xmm0
	fld	QWORD PTR tv78[ebp]
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTickCount@CrudeTimer@@QAENXZ ENDP			; CrudeTimer::GetTickCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2d\vector2d.h
;	COMDAT ?Perp@Vector2D@@QBE?AU1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Perp@Vector2D@@QBE?AU1@XZ PROC				; Vector2D::Perp, COMDAT
; _this$ = ecx

; 176  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 177  :   return Vector2D(-y, x);

	mov	eax, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [ecx+8]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0Vector2D@@QAE@NN@Z			; Vector2D::Vector2D
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 178  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Perp@Vector2D@@QBE?AU1@XZ ENDP				; Vector2D::Perp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\2d\vector2d.h
;	COMDAT ??0Vector2D@@QAE@NN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 8
??0Vector2D@@QAE@NN@Z PROC				; Vector2D::Vector2D, COMDAT
; _this$ = ecx

; 25   :   Vector2D(double a, double b):x(a),y(b){}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _a$[ebp]
	movsd	QWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _b$[ebp]
	movsd	QWORD PTR [ecx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0Vector2D@@QAE@NN@Z ENDP				; Vector2D::Vector2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMinFloat@@YAXXZ
text$di	SEGMENT
??__EMinFloat@@YAXXZ PROC				; `dynamic initializer for 'MinFloat'', COMDAT

; 27   : const float   MinFloat  = (std::numeric_limits<float>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::min
	fstp	DWORD PTR ?MinFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinFloat@@YAXXZ ENDP				; `dynamic initializer for 'MinFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMaxFloat@@YAXXZ
text$di	SEGMENT
??__EMaxFloat@@YAXXZ PROC				; `dynamic initializer for 'MaxFloat'', COMDAT

; 26   : const float   MaxFloat  = (std::numeric_limits<float>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	fstp	DWORD PTR ?MaxFloat@@3MB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxFloat@@YAXXZ ENDP				; `dynamic initializer for 'MaxFloat''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMinDouble@@YAXXZ
text$di	SEGMENT
??__EMinDouble@@YAXXZ PROC				; `dynamic initializer for 'MinDouble'', COMDAT

; 25   : const double  MinDouble = (std::numeric_limits<double>::min)();

	push	ebp
	mov	ebp, esp
	call	?min@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::min
	fstp	QWORD PTR ?MinDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMinDouble@@YAXXZ ENDP				; `dynamic initializer for 'MinDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMaxDouble@@YAXXZ
text$di	SEGMENT
??__EMaxDouble@@YAXXZ PROC				; `dynamic initializer for 'MaxDouble'', COMDAT

; 24   : const double  MaxDouble = (std::numeric_limits<double>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@N@std@@SANXZ	; std::numeric_limits<double>::max
	fstp	QWORD PTR ?MaxDouble@@3NB
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxDouble@@YAXXZ ENDP				; `dynamic initializer for 'MaxDouble''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Common\misc\utils.h
;	COMDAT ??__EMaxInt@@YAXXZ
text$di	SEGMENT
??__EMaxInt@@YAXXZ PROC					; `dynamic initializer for 'MaxInt'', COMDAT

; 23   : const int     MaxInt    = (std::numeric_limits<int>::max)();

	push	ebp
	mov	ebp, esp
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR ?MaxInt@@3HB, eax
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__EMaxInt@@YAXXZ ENDP					; `dynamic initializer for 'MaxInt''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 20   :     _NOEXCEPT_COND(noexcept(_Right < _Left)) { // return smaller of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 21   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Min_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Min_value
$LN3@Min_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 22   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1524 :     const _Ty1& _Get_first() const noexcept { // return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1525 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1526 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1520 :     _Ty1& _Get_first() noexcept { // return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1521 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1522 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data, COMDAT
; _this$ = ecx

; 3989 :     const _Scary_val& _Get_data() const noexcept { // return const reference to _Scary_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3990 :         return _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]

; 3991 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data, COMDAT
; _this$ = ecx

; 3985 :     _Scary_val& _Get_data() noexcept { // return reference to _Scary_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3986 :         return _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]

; 3987 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 3981 :     const _Alty& _Getal() const noexcept { // return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3982 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 3983 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 3977 :     _Alty& _Getal() noexcept { // return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3978 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 3979 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Orphan_all@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Orphan_all, COMDAT
; _this$ = ecx

; 3968 :     void _Orphan_all() noexcept { // orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3969 :         _Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3970 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 3963 :     [[noreturn]] static void _Xlen() { // report a length_error

	push	ebp
	mov	ebp, esp

; 3964 :         _Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 3965 :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T2 = -29						; size = 1
__Al$3 = -28						; size = 4
__Ptr$4 = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3946 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3947 :         _Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Orphan_all

; 3948 :         auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3949 :         if (_My_data._Large_string_engaged()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Tidy_deall

; 3950 :             const pointer _Ptr = _My_data._Bx._Ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Ptr$4[ebp], edx

; 3951 :             auto& _Al          = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$3[ebp], eax

; 3952 :             _Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$3[ebp]
	push	ecx
	call	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 3953 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Ptr$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$3[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3954 :         }
; 3955 : 
; 3956 :         _My_data._Mysize = 0;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], 0

; 3957 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 3958 :         // the _Traits::assign is last so the codegen doesn't think the char
; 3959 :         // write can alias this
; 3960 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR __My_data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 3961 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -9						; size = 1
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3937 :     void _Tidy_init() noexcept { // initialize basic_string data members

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3938 :         auto& _My_data   = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3939 :         _My_data._Mysize = 0;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+20], 0

; 3940 :         _My_data._Myres  = _BUF_SIZE - 1;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH

; 3941 :         // the _Traits::assign is last so the codegen doesn't think the char
; 3942 :         // write can alias this
; 3943 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR __My_data$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 3944 :     }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -32						; size = 4
__Old$ = -28						; size = 4
__Masked$ = -20						; size = 4
__My_data$ = -12					; size = 4
__Max$ = -8						; size = 4
_this$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3843 :     size_type _Calculate_growth(const size_type _Requested) const { // determines the next array size to allocate

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3844 :         const size_type _Max    = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 3845 :         auto& _My_data          = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3846 :         const size_type _Masked = _Requested | _ALLOC_MASK;

	mov	eax, DWORD PTR __Requested$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Masked$[ebp], eax

; 3847 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	ecx, DWORD PTR __Masked$[ebp]
	cmp	ecx, DWORD PTR __Max$[ebp]
	jbe	SHORT $LN2@Calculate_

; 3848 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3849 :         }
; 3850 : 
; 3851 :         const size_type _Old = _My_data._Myres;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR __Old$[ebp], eax

; 3852 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	mov	ecx, DWORD PTR __Old$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR __Max$[ebp]
	sub	edx, ecx
	cmp	DWORD PTR __Old$[ebp], edx
	jbe	SHORT $LN3@Calculate_

; 3853 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3854 :         }
; 3855 : 
; 3856 :         return _Max_value(_Masked, _Old + _Old / 2);

	mov	eax, DWORD PTR __Old$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Old$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	edx, DWORD PTR __Masked$[ebp]
	push	edx
	call	??$_Max_value@I@std@@YAABIABI0@Z	; std::_Max_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
$LN1@Calculate_:

; 3857 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Calculate_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN7@Calculate_:
	DD	1
	DD	$LN6@Calculate_
$LN6@Calculate_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@Calculate_
$LN5@Calculate_:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Storage_max$ = -20					; size = 4
__Alloc_max$ = -12					; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3307 :     _NODISCARD size_type max_size() const noexcept { // return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3308 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
	mov	DWORD PTR __Alloc_max$[ebp], eax

; 3309 :         const size_type _Storage_max = // can always store small string

	mov	DWORD PTR $T3[ebp], 16			; 00000010H
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Alloc_max$[ebp]
	push	ecx
	call	??$_Max_value@I@std@@YAABIABI0@Z	; std::_Max_value<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Storage_max$[ebp], edx

; 3310 :             _Max_value(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3311 :         return _Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	eax, DWORD PTR __Storage_max$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 3312 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 :         );
; 3314 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@max_size
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@max_size:
	DD	1
	DD	$LN4@max_size
$LN4@max_size:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@max_size
$LN3@max_size:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3303 :     _NODISCARD size_type size() const noexcept { // return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3304 :         return _Get_data()._Mysize;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	eax, DWORD PTR [eax+20]

; 3305 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3285 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept { // return pointer to null-terminated immutable array

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 3286 :         return _Get_data()._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	ecx, eax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3287 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2743 :     basic_string& assign(_In_z_ const _Elem* const _Ptr) { // assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2744 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIQBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@I@std@@YAII@Z		; std::_Convert_size<unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2745 :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -14						; size = 1
$T2 = -13						; size = 1
__Old_ptr$3 = -12					; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2724 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2725 :         // assign [_Ptr, _Ptr + _Count)
; 2726 :         auto& _My_data = _Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2727 :         if (_Count <= _My_data._Myres) {

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN2@assign

; 2728 :             _Elem* const _Old_ptr = _My_data._Myptr();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 2729 :             _My_data._Mysize      = _Count;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2730 :             _Traits::move(_Old_ptr, _Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$3[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 2731 :             _Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2732 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 2733 :         }
; 2734 : 
; 2735 :         return _Reallocate_for(_Count,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2736 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 2737 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 2738 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 2739 :             },
; 2740 :             _Ptr);
; 2741 :     }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -36						; size = 4
_$S10$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2537 :     ~basic_string() noexcept { // destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2538 :         _Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2539 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2540 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S10$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	eax, DWORD PTR _$S10$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 2541 :         _Delete_plain(_Alproxy, _STD exchange(_Get_data()._Myproxy, nullptr));

	mov	DWORD PTR $T2[ebp], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	push	eax
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 2542 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2543 :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@basic_stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@basic_stri:
	DD	1
	DD	$LN5@basic_stri
$LN5@basic_stri:
	DD	-25					; ffffffe7H
	DD	1
	DD	$LN3@basic_stri
$LN3@basic_stri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	48					; 00000030H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -49						; size = 1
__Proxy$ = -44						; size = 8
_$S12$ = -25						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2250 :     basic_string(_In_z_ const _Elem* const _Ptr)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2251 :         : _Mypair(_Zero_then_variadic_args_t()) { // construct from [_Ptr, <null>)

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2252 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S12$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	ecx, DWORD PTR _$S12$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], ecx

; 2253 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Get_data
	push	eax
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2254 :         _Tidy_init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2255 :         assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2256 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release

; 2257 :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@basic_stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@basic_stri:
	DD	2
	DD	$LN8@basic_stri
$LN8@basic_stri:
	DD	-25					; ffffffe7H
	DD	1
	DD	$LN5@basic_stri
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN6@basic_stri
$LN6@basic_stri:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN5@basic_stri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$1:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2100 :         ~_Bxty() noexcept { // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2101 :         }

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2097 :         _Bxty() { // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2098 :         }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 2071 :     bool _Large_string_engaged() const { // returns whether the large string mode (allocated memory) is engaged

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2072 :         return _BUF_SIZE <= _Myres;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
	mov	al, BYTE PTR tv66[ebp]

; 2073 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2062 :     const value_type* _Myptr() const { // determine current pointer to buffer for immutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2063 :         const value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2064 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2065 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2066 :         }
; 2067 : 
; 2068 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2069 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2053 :     value_type* _Myptr() { // determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2054 :         value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2055 :         if (_Large_string_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 2056 :             _Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2057 :         }
; 2058 : 
; 2059 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2060 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2042 :     _String_val() : _Bx(), _Mysize(0), _Myres(0) { // initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 2043 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 828  :     _NODISCARD static size_type max_size(const _Alloc&) noexcept { // get maximum size

	push	ebp
	mov	ebp, esp

; 829  :         return static_cast<size_t>(-1) / sizeof(value_type);

	or	eax, -1

; 830  :     }

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 930  :         _CRT_GUARDOVERFLOW const size_t _Count) { // allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 931  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$00@std@@YAII@Z	; std::_Get_size_of_n<1>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 932  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 924  :     void deallocate(_Ty* const _Ptr, const size_t _Count) { // deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 925  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 926  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 927  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 916  :     constexpr allocator() noexcept { // construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 342  :     static _CONSTEXPR17 void assign(char& _Left, const char& _Right) noexcept { // assign an element

	push	ebp
	mov	ebp, esp

; 343  :         _Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 344  :     }

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 331  :         const size_t _Count) noexcept { // strengthened

	push	ebp
	mov	ebp, esp

; 332  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 333  :         return static_cast<char*>(_CSTD memmove(_First1, _First2, _Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 334  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 308  :         const size_t _Count) noexcept { // strengthened

	push	ebp
	mov	ebp, esp

; 309  :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 310  :         return static_cast<char*>(_CSTD memcpy(_First1, _First2, _Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 311  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xstring
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 298  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const char* const _First) noexcept { // strengthened

	push	ebp
	mov	ebp, esp

; 299  :         // find length of null-terminated string
; 300  : #if _HAS_CXX17
; 301  :         return __builtin_strlen(_First);
; 302  : #else // _HAS_CXX17
; 303  :         return _CSTD strlen(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 304  : #endif // _HAS_CXX17
; 305  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1443 :     void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1444 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1445 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -8						; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Orphan_me, COMDAT
; _this$ = ecx

; 1359 :     void _Orphan_me() noexcept { // cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1360 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1361 :         if (_Myproxy != nullptr) { // adopted, remove self from list

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN13@Orphan_me

; 1362 :             _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$1[ebp], edx
$LN2@Orphan_me:

; 1363 :             while (*_Pnext != nullptr && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_me
	mov	ecx, DWORD PTR __Pnext$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _this$[ebp]
	je	SHORT $LN6@Orphan_me

; 1364 :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx

; 1365 :             }

	jmp	SHORT $LN2@Orphan_me
$LN6@Orphan_me:

; 1366 : 
; 1367 :             _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	edx, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@Orphan_me
	jmp	SHORT $LN4@Orphan_me
$LN9@Orphan_me:
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1367					; 00000557H
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me
	int	3
$LN14@Orphan_me:
	push	0
	push	1367					; 00000557H
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EE@KLDMFDFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAI?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA_@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN9@Orphan_me
$LN4@Orphan_me:
	xor	edx, edx
	jne	SHORT $LN6@Orphan_me

; 1368 :             *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1369 :             _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN13@Orphan_me:

; 1370 :         }
; 1371 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1372 :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Orphan_me
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1355 :     const _Container_base12* _Getcont() const noexcept { // get owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1356 :         return _Myproxy == nullptr ? nullptr : _Myproxy->_Mycont;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getcont
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1357 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$2 = -40						; size = 4
__Parent_proxy$3 = -32					; size = 4
__Lock$4 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1331 :     void _Adopt(const _Container_base12* _Parent) noexcept { // adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1332 :         if (_Parent == nullptr) { // no future parent, just disown current parent

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt

; 1333 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1334 :             _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1335 :             _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1336 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1337 :         } else { // have a parent, do adoption

	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	jmp	SHORT $LN5@Adopt
$LN2@Adopt:

; 1338 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$3[ebp], ecx

; 1339 : 
; 1340 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1341 :             if (_Myproxy != _Parent_proxy) { // change parentage

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
	je	SHORT $LN5@Adopt

; 1342 :                 _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1343 :                 _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1344 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Parent_proxy$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 1345 :                 _Parent_proxy->_Myfirstiter = this;

	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1346 :                 _Myproxy                    = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
	mov	DWORD PTR [eax], ecx

; 1347 :             }

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Adopt:

; 1348 : 
; 1349 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1350 :             _Myproxy = _Parent_proxy;
; 1351 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1352 :         }
; 1353 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@Adopt:
	DD	2
	DD	$LN9@Adopt
$LN9@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Adopt
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@Adopt
$LN7@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1324 :     ~_Iterator_base12() noexcept { // destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1325 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1326 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1327 :         _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1328 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1329 :     }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@Iterator_b:
	DD	1
	DD	$LN5@Iterator_b
$LN5@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@Iterator_b
$LN3@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Iterator_base12@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		; std::_Iterator_base12::operator=, COMDAT
; _this$ = ecx

; 1309 :     _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept { // assign an iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1310 :         if (_Myproxy != _Right._Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN2@operator

; 1311 :             if (_Right._Myproxy == nullptr) { // becoming invalid, disown current parent

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@operator

; 1312 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1313 :                 _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1314 :                 _Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me

; 1315 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1316 :             } else {

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	jmp	SHORT $LN2@operator
$LN3@operator:

; 1317 :                 _Adopt(_Right._Myproxy->_Mycont);

	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
$LN2@operator:

; 1318 :             }
; 1319 :         }
; 1320 : 
; 1321 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1322 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@operator:
	DD	1
	DD	$LN8@operator
$LN8@operator:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@operator
$LN6@operator:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ENDP		; std::_Iterator_base12::operator=
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Iterator_base12@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1304 :     _Iterator_base12(const _Iterator_base12& _Right) noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1305 :         : _Myproxy(nullptr), _Mynextiter(nullptr) { // copy an iterator

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1306 :         *this = _Right;

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=

; 1307 :     }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Iterator_base12@std@@QAE@ABU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1301 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) { // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1302 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -32						; size = 4
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1396 : inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept { // swap all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1397 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1398 :     _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1399 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1400 : 
; 1401 :     _Container_proxy* _Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 1402 :     _Myproxy                = _Right._Myproxy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 1403 :     _Right._Myproxy         = _Temp;

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [edx], eax

; 1404 : 
; 1405 :     if (_Myproxy != nullptr) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Swap_proxy

; 1406 :         _Myproxy->_Mycont = this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Swap_proxy:

; 1407 :     }
; 1408 : 
; 1409 :     if (_Right._Myproxy != nullptr) {

	mov	edx, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Swap_proxy

; 1410 :         _Right._Myproxy->_Mycont = &_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@Swap_proxy:

; 1411 :     }
; 1412 : }

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Swap_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@Swap_proxy:
	DD	1
	DD	$LN7@Swap_proxy
$LN7@Swap_proxy:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN5@Swap_proxy
$LN5@Swap_proxy:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$2 = -32						; size = 4
__Lock$3 = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1381 : inline void _Container_base12::_Orphan_all() noexcept { // orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1382 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1383 :     if (_Myproxy != nullptr) { // proxy allocated, drain it

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 1384 :         _Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1385 : 
; 1386 :         for (_Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter; *_Pnext != nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$2[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 1387 :              *_Pnext                   = (*_Pnext)->_Mynextiter) {

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:

; 1385 : 
; 1386 :         for (_Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter; *_Pnext != nullptr;

	mov	ecx, DWORD PTR __Pnext$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 1388 :             (*_Pnext)->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0

; 1389 :         }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1390 : 
; 1391 :         _Myproxy->_Myfirstiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 1392 :     }

	lea	ecx, DWORD PTR __Lock$3[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 1393 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1394 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@Orphan_all
$LN7@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1270 :     _Container_base12() : _Myproxy(nullptr) { // construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1271 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1262 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 1248 :     void _Adopt(const void*) noexcept { // adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1249 :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1136 : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept { // convert size_t to size_t, unchanged

	push	ebp
	mov	ebp, esp

; 1137 :     return _Len;

	mov	eax, DWORD PTR __Len$[ebp]

; 1138 : }

	pop	ebp
	ret	0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -16					; size = 4
__Min_back_shift$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 107  :     size_t& _Bytes) { // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 108  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 109  : 
; 110  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	115					; 00000073H
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	115					; 00000073H
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	125					; 0000007dH
	push	OFFSET ??_C@_0GJ@IPOKOOCN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	125					; 0000007dH
	push	OFFSET ??_C@_1NC@PMLIAFCM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 127  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 49   :     _DECLSPEC_ALLOCATOR static void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp

; 50   :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 51   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 37   :     const size_t _Count) noexcept { // gets the size of _Count copies of a type with size 1

	push	ebp
	mov	ebp, esp

; 38   :     return _Count;

	mov	eax, DWORD PTR __Count$[ebp]

; 39   : }

	pop	ebp
	ret	0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 873  :     _NODISCARD static constexpr double(max)() noexcept { // return maximum value

	push	ebp
	mov	ebp, esp

; 874  :         return DBL_MAX;

	fld	QWORD PTR __real@7fefffffffffffff

; 875  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?min@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?min@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::min, COMDAT

; 869  :     _NODISCARD static constexpr double(min)() noexcept { // return minimum value

	push	ebp
	mov	ebp, esp

; 870  :         return DBL_MIN;

	fld	QWORD PTR __real@0010000000000000

; 871  :     }

	pop	ebp
	ret	0
?min@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 824  :     _NODISCARD static constexpr float(max)() noexcept { // return maximum value

	push	ebp
	mov	ebp, esp

; 825  :         return FLT_MAX;

	fld	DWORD PTR __real@7f7fffff

; 826  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?min@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?min@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::min, COMDAT

; 820  :     _NODISCARD static constexpr float(min)() noexcept { // return minimum value

	push	ebp
	mov	ebp, esp

; 821  :         return FLT_MIN;

	fld	DWORD PTR __real@00800000

; 822  :     }

	pop	ebp
	ret	0
?min@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 507  :     _NODISCARD static constexpr int(max)() noexcept { // return maximum value

	push	ebp
	mov	ebp, esp

; 508  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 509  :     }

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.21.27702\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 168  :     {

	push	ebp
	mov	ebp, esp

; 169  :         (void)_Size;
; 170  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 171  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\Nathanael\Desktop\raven_VS2015\VS2015\Buckland_Chapter7 to 10_Raven\GraveMarkers.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
